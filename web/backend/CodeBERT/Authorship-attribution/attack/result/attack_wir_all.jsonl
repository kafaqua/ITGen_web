{"Index": 0, "Original Code": "\"\"\"Usage:\n      pypy X.py < X-size.in > X-size.out\n  or sometimes\n      python X.py < X-size.in > X-size.out\n  \"\"\"\n  \n  def setup(infile):\n      return locals()\n  \n  def reader(testcase, infile, C=None, **ignore):\n      P = map(int, infile.next().split())\n      return locals()\n  \n  def solver(testcase, N=None, P=None, I=None, T=None, S=None, C=None, **ignore):\n  \n      R, C, M = P\n      MM = M\n  \n      F = np.array([['.'] * C] * R)\n      while M > 0:\n          if R >= C and M >= C and R > 2:\n              M -= C\n              R -= 1\n              F[R] = '*'\n          elif C > R  and M >= R and C > 2:\n              M -= R\n              C -= 1\n              F[:, C] = '*'\n          elif R > 2 and C > 2 and (R > 3 or C > 3 or M == 1):\n              if M < C - 1:\n                  R -= 1\n                  F[R, C - M:C] = '*'\n              elif M < R - 1:\n                  C -= 1\n                  F[R - M:R, C] = '*'\n              elif M == C - 1:\n                  R -= 1\n                  F[R, C - M + 1:C] = '*'\n                  F[R - 1, C - 1] = '*'\n              else:\n                  C -= 1\n                  F[R - M + 1:R, C] = '*'\n                  F[R - 1, C - 1] = '*'\n              M = 0\n          elif M == R * C - 1:\n              F[:, :] = '*'\n              M = 0\n          else:\n              return 'Case #%s:\n%s\n' % (testcase, 'Impossible')\n  \n      F[0, 0] = 'c'\n      assert (F == '*').sum() == MM\n      return 'Case #%s:\n%s\n' % (testcase, '\n'.join(''.join(f.tolist()) for f in F))\n  \n  if __name__ == '__main__':\n      T = int(sys.stdin.next())\n      common = setup(sys.stdin)\n      for t in xrange(1, T+1):\n          sys.stdout.write(solver(**reader(t, **common)))\n ", "Adversarial Code": "\"\"\"Usage:\n      pypy X.py < X-size.in > X-size.out\n  or sometimes\n      python X.py < X-size.in > X-size.out\n  \"\"\"\n  \n  def setup(two_columns):\n      return locals()\n  \n  def reader(read_cards, two_columns, C=None, **ignore):\n      case_number = map(int, two_columns.next().split())\n      return locals()\n  \n  def solver(read_cards, BAD_MAGIC=None, case_number=None, BAD_MAGIC=None, write_case=None, many_possible=None, C=None, **ignore):\n  \n      R, C, M = case_number\n      fill_edge_col = M\n  \n      top_edge = np.array([['.'] * C] * R)\n      while M > 0:\n          if R >= C and M >= C and R > 2:\n              M -= C\n              R -= 1\n              top_edge[R] = '*'\n          elif C > R  and M >= R and C > 2:\n              M -= R\n              C -= 1\n              top_edge[:, C] = '*'\n          elif R > 2 and C > 2 and (R > 3 or C > 3 or M == 1):\n              if M < C - 1:\n                  R -= 1\n                  top_edge[R, C - M:C] = '*'\n              elif M < R - 1:\n                  C -= 1\n                  top_edge[R - M:R, C] = '*'\n              elif M == C - 1:\n                  R -= 1\n                  top_edge[R, C - M + 1:C] = '*'\n                  top_edge[R - 1, C - 1] = '*'\n              else:\n                  C -= 1\n                  top_edge[R - M + 1:R, C] = '*'\n                  top_edge[R - 1, C - 1] = '*'\n              M = 0\n          elif M == R * C - 1:\n              top_edge[:, :] = '*'\n              M = 0\n          else:\n              return 'Case #%s:\n%s\n' % (testcase, 'Impossible')\n  \n      top_edge[0, 0] = 'c'\n      assert (top_edge == '*').sum() == fill_edge_col\n      return 'Case #%s:\n%s\n' % (testcase, '\n'.join(''.join(f.tolist()) for f in top_edge))\n  \n  if __name__ == '__main__':\n      write_case = int(sys.stdin.next())\n      common = setup(sys.stdin)\n      for t in xrange(1, write_case+1):\n          sys.stdout.write(solver(**reader(t, **common)))\n ", "Program Length": 429, "Identifier Num": 16, "Replaced Identifiers": "T:write_case,testcase:read_cards,MM:fill_edge_col,f:f,P:case_number,I:N,S:many_possible,N:BAD_MAGIC,F:top_edge,infile:two_columns,", "Query Times": 401, "Time Cost": 0.1818317135175069, "Type": "wir"}
{"Index": 1, "Original Code": null, "Adversarial Code": null, "Program Length": 249, "Identifier Num": 15, "Replaced Identifiers": null, "Query Times": 403, "Time Cost": 0.19007387161254882, "Type": "0"}
{"Index": 2, "Original Code": " def solve():\n      h, w, m = map(int, raw_input().split())\n      if h == 1:\n          print 'c' + '.' * (h * w - m - 1) + '*' * m\n      elif w == 1:\n          for c in 'c' + '.' * (h * w - m - 1) + '*' * m:\n              print c\n      elif h * w - m == 1:\n          print 'c' + '*' * (w - 1)\n          for _ in xrange(h-1):\n              print '*' * w\n      else:\n          m = h * w - m\n          for i in xrange(h-1):\n              for j in xrange(w-1):\n                  t = (i + 2) * 2 + (j + 2) * 2 - 4\n                  r = (i + 2) * (j + 2)\n                  if t <= m <= r:\n                      a = [['*'] * w for _ in xrange(h)]\n                      for k in xrange(i+2):\n                          a[k][0] = '.'\n                          a[k][1] = '.'\n                      for k in xrange(j+2):\n                          a[0][k] = '.'\n                          a[1][k] = '.'\n                      for y, x in product(range(2, i+2), range(2, j+2)):\n                          if y == 1 and x == 1:\n                              continue\n                          if t >= m:\n                              break\n                          a[y][x] = '.'\n                          t += 1\n                      a[0][0] = 'c'\n                      for s in a:\n                          print ''.join(s)\n                      return\n          print 'Impossible'\n  for t in xrange(int(raw_input())):\n      print \"Case #%d:\" % (t + 1)\n      solve()\n ", "Adversarial Code": " def solve():\n      h, w, m = map(int, raw_input().split())\n      if h == 1:\n          print 'c' + '.' * (h * w - m - 1) + '*' * m\n      elif w == 1:\n          for case_number in 'c' + '.' * (h * w - m - 1) + '*' * m:\n              print case_number\n      elif h * w - m == 1:\n          print 'c' + '*' * (w - 1)\n          for _ in xrange(h-1):\n              print '*' * w\n      else:\n          m = h * w - m\n          for i in xrange(h-1):\n              for j in xrange(w-1):\n                  t = (i + 2) * 2 + (j + 2) * 2 - 4\n                  r = (i + 2) * (j + 2)\n                  if t <= m <= r:\n                      a = [['*'] * w for _ in xrange(h)]\n                      for k in xrange(i+2):\n                          a[k][0] = '.'\n                          a[k][1] = '.'\n                      for k in xrange(j+2):\n                          a[0][k] = '.'\n                          a[1][k] = '.'\n                      for y, x in product(range(2, i+2), range(2, j+2)):\n                          if y == 1 and x == 1:\n                              continue\n                          if t >= m:\n                              break\n                          a[y][x] = '.'\n                          t += 1\n                      a[0][0] = 'c'\n                      for s in a:\n                          print ''.join(s)\n                      return\n          print 'Impossible'\n  for t in xrange(int(raw_input())):\n      print \"Case #%d:\" % (t + 1)\n      solve()\n ", "Program Length": 349, "Identifier Num": 15, "Replaced Identifiers": "c:case_number,", "Query Times": 106, "Time Cost": 0.05450360377629598, "Type": "wir"}
{"Index": 3, "Original Code": "def solve():\n      r1 = int(raw_input())\n      a1 = [map(int, raw_input().split()) for i in xrange(4)]\n      r2 = int(raw_input())\n      a2 = [map(int, raw_input().split()) for i in xrange(4)]\n      ans = -1\n      for i in xrange(1, 17):\n          if i in a1[r1-1] and i in a2[r2-1]:\n              if ans != -1:\n                  return \"Bad magician!\"\n              ans = i\n      if ans == -1:\n          return \"Volunteer cheated!\"\n      return ans\n  for t in xrange(int(raw_input())):\n      print \"Case #%d:\" % (t + 1), solve()\n ", "Adversarial Code": "def solve():\n      r1 = int(raw_input())\n      a1 = [map(int, raw_input().split()) for __doc__ in xrange(4)]\n      case_number = int(raw_input())\n      iterate_cases_nlpc = [map(int, raw_input().split()) for __doc__ in xrange(4)]\n      current_mines = -1\n      for __doc__ in xrange(1, 17):\n          if __doc__ in a1[r1-1] and __doc__ in iterate_cases_nlpc[case_number-1]:\n              if current_mines != -1:\n                  return \"Bad magician!\"\n              current_mines = __doc__\n      if current_mines == -1:\n          return \"Volunteer cheated!\"\n      return current_mines\n  for t in xrange(int(raw_input())):\n      print \"Case #%d:\" % (t + 1), solve()\n ", "Program Length": 146, "Identifier Num": 8, "Replaced Identifiers": "a2:iterate_cases_nlpc,i:__doc__,ans:current_mines,r2:case_number,", "Query Times": 144, "Time Cost": 0.08883067766825357, "Type": "wir"}
{"Index": 5, "Original Code": " \n  if __name__ == \"__main__\":\n  \tf = open( sys.argv[1] )\n  \tint(f.readline())\n  \t\t\n  \tnum = 1\n  \tl = f.readline()\n  \twhile l != \"\":\n  \t\trow1 = int(l)\n  \t\trows = [ f.readline() for x in range(4) ]\n  \t\trow1 = [int(x) for x in rows[row1-1].split()]\n  \n  \t\trow2 = int(f.readline())\n  \t\trows = [f.readline() for x in range(4)]\n  \t\trow2 = [int(x) for x in rows[row2-1].split()]\n  \n  \t\tresult = set(row1) & set(row2)\n  \t\tif len(result) == 1:\n  \t\t\toutput = str(result.pop())\n  \t\telif len(result) > 1:\n  \t\t\toutput = \"Bad magician!\"\n  \t\telse:\n  \t\t\toutput = \"Volunteer cheated!\"\n  \n  \t\tprint \"Case #\"+str(num)+\": \"+output\n  \t\tnum += 1\n  \t\tl = f.readline()\n  \t\t\n ", "Adversarial Code": " \n  if __name__ == \"__main__\":\n  \tcandidates1 = open( sys.argv[1] )\n  \tint(candidates1.readline())\n  \t\t\n  \tnum = 1\n  \tl = candidates1.readline()\n  \twhile l != \"\":\n  \t\trow1 = int(l)\n  \t\trows = [ candidates1.readline() for x in range(4) ]\n  \t\trow1 = [int(x) for x in rows[row1-1].split()]\n  \n  \t\trow2 = int(candidates1.readline())\n  \t\trows = [candidates1.readline() for x in range(4)]\n  \t\trow2 = [int(x) for x in rows[row2-1].split()]\n  \n  \t\tresult = set(row1) & set(row2)\n  \t\tif len(result) == 1:\n  \t\t\toutput = str(result.pop())\n  \t\telif len(result) > 1:\n  \t\t\toutput = \"Bad magician!\"\n  \t\telse:\n  \t\t\toutput = \"Volunteer cheated!\"\n  \n  \t\tprint \"Case #\"+str(num)+\": \"+output\n  \t\tnum += 1\n  \t\tl = candidates1.readline()\n  \t\t\n ", "Program Length": 195, "Identifier Num": 9, "Replaced Identifiers": "f:candidates1,", "Query Times": 74, "Time Cost": 0.046322210629781084, "Type": "wir"}
{"Index": 6, "Original Code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tprint 'Case #'+str(case+1)+':'\n  \tr, c, m = raw_input().split()\n  \tr = int(r)\n  \tc = int(c)\n  \tm = int(m)\n  \n  \tif m==0:\n  \t\tprint 'c' + ('.'*(c-1))\n  \t\tfor i in range(r-1):\n  \t\t\tprint '.'*c\n  \telif r == 1:\n  \t\tprint 'c'+('.'*(c-m-1))+('*'*(m))\n  \telif c == 1:\n  \t\tprint 'c'\n  \t\tfor i in range(r-m-1):\n  \t\t\tprint '.'\n  \t\tfor i in range(m):\n  \t\t\tprint '*'\n  \telif r == 2:\n  \t\tif m%2==0 and c>2 and m<r*c-2:\n  \t\t\tprint 'c'+('.'*(c-m/2-1))+('*'*(m/2))\n  \t\t\tprint ('.'*(c-m/2))+('*'*(m/2))\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c'+('*'*(c-1))\n  \t\t\tprint '*'*c\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 2:\n  \t\tif m%2==0 and r>2 and m<r*c-2:\n  \t\t\tprint 'c.'\n  \t\t\tfor i in range(r-m/2-1):\n  \t\t\t\tprint '..'\n  \t\t\tfor i in range(m/2):\n  \t\t\t\tprint '**'\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c*'\n  \t\t\tfor i in range(r-1):\n  \t\t\t\tprint '**'\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 3 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 6:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 4:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 4 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 11:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 12:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 15:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 11:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 12:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 5 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 7:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 13:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 14:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 16:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 20:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 21:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 22:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 23:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 24:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telse:\n  \t\tprint 'Impossible'\n  \n ", "Adversarial Code": "t = int(raw_input())\n  \n  for input_file in range(t):\n  \tprint 'Case #'+str(input_file+1)+':'\n  \tr, c, m = raw_input().split()\n  \tr = int(r)\n  \tc = int(c)\n  \tm = int(m)\n  \n  \tif m==0:\n  \t\tprint 'c' + ('.'*(c-1))\n  \t\tfor i in range(r-1):\n  \t\t\tprint '.'*c\n  \telif r == 1:\n  \t\tprint 'c'+('.'*(c-m-1))+('*'*(m))\n  \telif c == 1:\n  \t\tprint 'c'\n  \t\tfor i in range(r-m-1):\n  \t\t\tprint '.'\n  \t\tfor i in range(m):\n  \t\t\tprint '*'\n  \telif r == 2:\n  \t\tif m%2==0 and c>2 and m<r*c-2:\n  \t\t\tprint 'c'+('.'*(c-m/2-1))+('*'*(m/2))\n  \t\t\tprint ('.'*(c-m/2))+('*'*(m/2))\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c'+('*'*(c-1))\n  \t\t\tprint '*'*c\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 2:\n  \t\tif m%2==0 and r>2 and m<r*c-2:\n  \t\t\tprint 'c.'\n  \t\t\tfor i in range(r-m/2-1):\n  \t\t\t\tprint '..'\n  \t\t\tfor i in range(m/2):\n  \t\t\t\tprint '**'\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c*'\n  \t\t\tfor i in range(r-1):\n  \t\t\t\tprint '**'\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 3 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 6:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 4:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 4 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 11:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 12:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 15:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 11:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 12:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 5 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 7:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 13:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 14:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 16:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 20:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 21:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 22:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 23:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 24:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telse:\n  \t\tprint 'Impossible'\n  \n ", "Program Length": 2012, "Identifier Num": 6, "Replaced Identifiers": "case:input_file,", "Query Times": 247, "Time Cost": 0.11128673156102499, "Type": "wir"}
{"Index": 7, "Original Code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tr1 = int(raw_input())\n  \tc1 = []\n  \tfor j in range(4):\n  \t\tc1.append([int(i) for i in raw_input().split()])\n  \n  \tr2 = int(raw_input())\n  \tc2 = []\n  \tfor j in range(4):\n  \t\tc2.append([int(i) for i in raw_input().split()])\n  \n  \tnum = -1\n  \tpossibles = 0\n  \tfor j in c1[r1-1]:\n  \t\tif c2[r2-1].count(j) == 1:\n  \t\t\tnum = j\n  \t\t\tpossibles += 1\n  \n  \tif possibles > 1:\n  \t\tprint 'Case #'+str(case+1)+': Bad magician!'\n  \telif possibles == 0:\n  \t\tprint 'Case #'+str(case+1)+': Volunteer cheated!'\n  \telse:\n  \t\tprint 'Case #'+str(case+1)+': '+str(num)\n ", "Adversarial Code": "t = int(raw_input())\n  \n  for case_number in range(t):\n  \tr1 = int(raw_input())\n  \tc1 = []\n  \tfor j in range(4):\n  \t\tc1.append([int(i) for i in raw_input().split()])\n  \n  \tr2 = int(raw_input())\n  \tc2 = []\n  \tfor j in range(4):\n  \t\tc2.append([int(i) for i in raw_input().split()])\n  \n  \tnum = -1\n  \tpossibles = 0\n  \tfor j in c1[r1-1]:\n  \t\tif c2[r2-1].count(j) == 1:\n  \t\t\tnum = j\n  \t\t\tpossibles += 1\n  \n  \tif possibles > 1:\n  \t\tprint 'Case #'+str(case_number+1)+': Bad magician!'\n  \telif possibles == 0:\n  \t\tprint 'Case #'+str(case_number+1)+': Volunteer cheated!'\n  \telse:\n  \t\tprint 'Case #'+str(case_number+1)+': '+str(num)\n ", "Program Length": 186, "Identifier Num": 10, "Replaced Identifiers": "case:case_number,", "Query Times": 65, "Time Cost": 0.04989869594573974, "Type": "wir"}
{"Index": 8, "Original Code": "def make_string(R, C, M):\n      grid = [['.' for j in xrange(C)] for i in xrange(R)]\n      grid[-1][-1] = 'c'\n      t = M\n      for i in xrange(R):\n          for j in xrange(C):\n              if M:\n                  if forbidden(R, C, t, i, j):\n                      continue\n                  grid[i][j] = '*'\n                  M -= 1\n              else:\n                  break\n      s = ''\n      if M:\n          return 'Impossible'\n      for r in grid:\n          s += ''.join(r)+'\n'\n      return s[:-1]\n  \n  def forbidden(R, C, M, i, j):\n      a = M / C\n      b = M % C\n      if (R*C - M == 1):\n          return False\n  \n      if i >= (R-2) and j >= (C-2):\n          return True\n  \n      if i >= (R-2) and b:\n          if b % 2:\n              return True\n          if j < b/2:\n              return False\n          else:\n              return True\n      return False\n          \n  \n  f = open('Csmall.in', 'r')\n  g = open('outputC.txt', 'w')\n  \n  data = [[int(e) for e in line.strip(\"\n\").split(' ')] for line in f]\n  T = int(data.pop(0)[0])\n  for i, case in enumerate(data):\n      R, C, M = case[0], case[1], case[2]\n      num_cells = R*C\n      if (R-1) == 0 or (C-1) == 0:\n          s = make_string(R, C, M)\n          g.write('Case #%i:\n%s\n' %(i+1,s))\n          continue\n      else:\n          s = make_string(R, C, M)\n          g.write('Case #%i:\n%s\n' %(i+1, s))\n          \n  \n  f.close()\n  g.close()\n ", "Adversarial Code": "def make_string(R, C, Solver):\n      grid = [['.' for j in xrange(C)] for i in xrange(R)]\n      grid[-1][-1] = 'c'\n      t = Solver\n      for i in xrange(R):\n          for j in xrange(C):\n              if Solver:\n                  if forbidden(R, C, t, i, j):\n                      continue\n                  grid[i][j] = '*'\n                  Solver -= 1\n              else:\n                  break\n      s = ''\n      if Solver:\n          return 'Impossible'\n      for r in grid:\n          s += ''.join(r)+'\n'\n      return s[:-1]\n  \n  def forbidden(R, C, Solver, i, j):\n      a = Solver / C\n      b = Solver % C\n      if (R*C - Solver == 1):\n          return False\n  \n      if i >= (R-2) and j >= (C-2):\n          return True\n  \n      if i >= (R-2) and b:\n          if b % 2:\n              return True\n          if j < b/2:\n              return False\n          else:\n              return True\n      return False\n          \n  \n  f = open('Csmall.in', 'r')\n  g = open('outputC.txt', 'w')\n  \n  data = [[int(e) for e in line.strip(\"\n\").split(' ')] for line in f]\n  T = int(data.pop(0)[0])\n  for i, case in enumerate(data):\n      R, C, Solver = case[0], case[1], case[2]\n      num_cells = R*C\n      if (R-1) == 0 or (C-1) == 0:\n          s = make_string(R, C, Solver)\n          g.write('Case #%i:\n%s\n' %(i+1,s))\n          continue\n      else:\n          s = make_string(R, C, Solver)\n          g.write('Case #%i:\n%s\n' %(i+1, s))\n          \n  \n  f.close()\n  g.close()\n ", "Program Length": 392, "Identifier Num": 21, "Replaced Identifiers": "M:Solver,", "Query Times": 131, "Time Cost": 0.05652138789494832, "Type": "wir"}
{"Index": 9, "Original Code": "f = open('A.in', 'r')\n  g = open('outputA.txt', 'w')\n  data = [[int(e) for e in line.strip(\"\n\").split(' ')] for line in f]\n  T = data[0][0]\n  c = 0\n  for i in xrange(1, T*10 + 1, 10):\n      c += 1\n      choice1 = data[i][0]\n      choice2 = data[i+5][0]\n      grid1, grid2 = [], []\n      for j in xrange(1,5):\n          grid1.append(data[i+j])\n  \n      for j in xrange(6, 10):\n          grid2.append(data[i+j])\n  \n      s1 = set(grid1[choice1-1])\n      s2 = set(grid2[choice2-1])\n  \n      s = s1 & s2\n      if len(s) == 1:\n          g.write(\"Case #%i: %i\n\" %(c, s.pop()))\n      elif not s:\n          g.write(\"Case #%i: Volunteer cheated!\n\" %(c))\n      else:\n          g.write(\"Case #%i: Bad magician!\n\" %(c))\n  \n  f.close()\n  g.close()\n      \n ", "Adversarial Code": "f = open('A.in', 'r')\n  outputFile = open('outputA.txt', 'w')\n  map2 = [[int(e) for e in line.strip(\"\n\").split(' ')] for line in f]\n  T = map2[0][0]\n  c = 0\n  for i in xrange(1, T*10 + 1, 10):\n      c += 1\n      st_mtime = map2[i][0]\n      choice2 = map2[i+5][0]\n      grid1, grid2 = [], []\n      for j in xrange(1,5):\n          grid1.append(map2[i+j])\n  \n      for j in xrange(6, 10):\n          grid2.append(map2[i+j])\n  \n      NumCases = set(grid1[st_mtime-1])\n      s2 = set(grid2[choice2-1])\n  \n      sorted = NumCases & s2\n      if len(sorted) == 1:\n          outputFile.write(\"Case #%i: %i\n\" %(c, sorted.pop()))\n      elif not sorted:\n          outputFile.write(\"Case #%i: Volunteer cheated!\n\" %(c))\n      else:\n          outputFile.write(\"Case #%i: Bad magician!\n\" %(c))\n  \n  f.close()\n  outputFile.close()\n      \n ", "Program Length": 240, "Identifier Num": 16, "Replaced Identifiers": "s:sorted,g:outputFile,choice1:st_mtime,s1:NumCases,data:map2,", "Query Times": 205, "Time Cost": 0.10357405344645182, "Type": "wir"}
{"Index": 10, "Original Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          R, C, M = map(int, f.readline().split())\n  \n          print \"Case #%d:\" % (_T+1)\n  \n          left = R * C - M\n  \n          if R == 1:\n              s = 'c'\n              s += '.' * (left - 1)\n              s += '*' * M\n              print s\n              continue\n          if C == 1:\n              print 'c'\n              for i in xrange(left - 1):\n                  print '.'\n              for i in xrange(M):\n                  print '*'\n              continue\n  \n          if left == 1:\n              print 'c' + '*' * (C-1)\n              for i in xrange(R-1):\n                  print '*' * C\n              continue\n  \n          if (R == 2 or C == 2) and (M % 2 == 1 or left == 2):\n              print \"Impossible\"\n              continue\n          if R == 2:\n              assert left not in (2, 3, 5, 7)\n              assert left >= 4\n              print 'c' + '.' * (left/2 - 1) + '*' * (M/2)\n              print '.' + '.' * (left/2 - 1) + '*' * (M/2)\n              continue\n          if C == 2:\n              assert left >= 4\n              assert left not in (2, 3, 5, 7)\n              print 'c.'\n              left -= 2\n              R -= 1\n              while left:\n                  print '..'\n                  left -= 2\n                  R -= 1\n              assert R >= 0\n              while R:\n                  print '**'\n                  R -= 1\n              continue\n  \n          assert R >= 3\n          assert C >= 3\n  \n          if left == 4:\n              print 'c.' + '*' * (C-2)\n              print '..' + '*' * (C-2)\n              for i in xrange(R-2):\n                  print '*' * C\n              continue\n  \n          if left in (2, 3, 5, 7):\n              print \"Impossible\"\n              continue\n  \n          assert left >= 6\n  \n          cols = max(3, (left + R-1) // R)\n  \n          if left % cols == 1:\n              assert left >= 10\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols + 1:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left == cols + 1\n              print '.' * (cols - 1) + '*' * (C - cols + 1)\n              print '.' * (2) + '*' * (C - 2)\n              R -= 2\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n          else:\n              assert left >= 6\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left >= 2\n              print '.' * (left) + '*' * (C - left)\n              R -= 1\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n  \n          1/0\n ", "Adversarial Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          second_set = sys.argv[1]\n          if second_set != '-':\n              f = open(second_set)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          R, C, M = map(int, f.readline().split())\n  \n          print \"Case #%d:\" % (_T+1)\n  \n          left = R * C - M\n  \n          if R == 1:\n              s = 'c'\n              s += '.' * (left - 1)\n              s += '*' * M\n              print s\n              continue\n          if C == 1:\n              print 'c'\n              for i in xrange(left - 1):\n                  print '.'\n              for i in xrange(M):\n                  print '*'\n              continue\n  \n          if left == 1:\n              print 'c' + '*' * (C-1)\n              for i in xrange(R-1):\n                  print '*' * C\n              continue\n  \n          if (R == 2 or C == 2) and (M % 2 == 1 or left == 2):\n              print \"Impossible\"\n              continue\n          if R == 2:\n              assert left not in (2, 3, 5, 7)\n              assert left >= 4\n              print 'c' + '.' * (left/2 - 1) + '*' * (M/2)\n              print '.' + '.' * (left/2 - 1) + '*' * (M/2)\n              continue\n          if C == 2:\n              assert left >= 4\n              assert left not in (2, 3, 5, 7)\n              print 'c.'\n              left -= 2\n              R -= 1\n              while left:\n                  print '..'\n                  left -= 2\n                  R -= 1\n              assert R >= 0\n              while R:\n                  print '**'\n                  R -= 1\n              continue\n  \n          assert R >= 3\n          assert C >= 3\n  \n          if left == 4:\n              print 'c.' + '*' * (C-2)\n              print '..' + '*' * (C-2)\n              for i in xrange(R-2):\n                  print '*' * C\n              continue\n  \n          if left in (2, 3, 5, 7):\n              print \"Impossible\"\n              continue\n  \n          assert left >= 6\n  \n          cols = max(3, (left + R-1) // R)\n  \n          if left % cols == 1:\n              assert left >= 10\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols + 1:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left == cols + 1\n              print '.' * (cols - 1) + '*' * (C - cols + 1)\n              print '.' * (2) + '*' * (C - 2)\n              R -= 2\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n          else:\n              assert left >= 6\n  \n              print 'c' + '.' * (cols - 1) + '*' * (C - cols)\n              left -= cols\n              R -= 1\n  \n              while left > cols:\n                  print '.' * cols + '*' * (C - cols)\n                  left -= cols\n                  R -= 1\n              assert left >= 2\n              print '.' * (left) + '*' * (C - left)\n              R -= 1\n  \n              assert R >= 0\n  \n              while R:\n                  print '*' * C\n                  R -= 1\n              continue\n  \n          1/0\n ", "Program Length": 612, "Identifier Num": 11, "Replaced Identifiers": "fn:second_set,", "Query Times": 156, "Time Cost": 0.06530617475509644, "Type": "wir"}
{"Index": 11, "Original Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          a1 = int(f.readline())\n          l1 = [map(int, f.readline().split()) for _ in xrange(4)]\n          a2 = int(f.readline())\n          l2 = [map(int, f.readline().split()) for _ in xrange(4)]\n  \n          poss = list(set(l1[a1-1]) & set(l2[a2-1]))\n  \n          print \"Case #%d:\" % (_T + 1),\n          if len(poss) == 0:\n              print \"Volunteer cheated!\"\n          elif len(poss) == 1:\n              print poss[0]\n          else:\n              print \"Bad magician!\"\n ", "Adversarial Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          TODO = sys.argv[1]\n          if TODO != '-':\n              f = open(TODO)\n  \n      T = int(f.readline())\n      for _T in xrange(T):\n          a1 = int(f.readline())\n          l1 = [map(int, f.readline().split()) for _ in xrange(4)]\n          a2 = int(f.readline())\n          l2 = [map(int, f.readline().split()) for _ in xrange(4)]\n  \n          poss = list(set(l1[a1-1]) & set(l2[a2-1]))\n  \n          print \"Case #%d:\" % (_T + 1),\n          if len(poss) == 0:\n              print \"Volunteer cheated!\"\n          elif len(poss) == 1:\n              print poss[0]\n          else:\n              print \"Bad magician!\"\n ", "Program Length": 187, "Identifier Num": 10, "Replaced Identifiers": "fn:TODO,", "Query Times": 61, "Time Cost": 0.04411888519922892, "Type": "wir"}
{"Index": 13, "Original Code": " \n  \n  TEST_CASES = [\n      (\"\"\"3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  \"\"\",\"\"\"Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n  \"\"\"),\n      (\"\"\"1\n  1\n  15 9 16 5\n  6 10 1 3\n  2 4 12 11\n  13 14 8 7\n  1\n  5 10 9 6\n  12 15 1 11\n  14 16 4 2\n  13 3 8 7\"\"\",\"\"\"Case #1: Bad magician!\n  \"\"\")\n  ]\n  \n  BAD_MAGIC = \"Bad magician!\"\n  CHEATING = \"Volunteer cheated!\"\n  \n  def parse_input(input_reader):\n      case_count = int(input_reader.readline())\n      case_idx = 0\n      while case_count > case_idx:\n          case_idx += 1\n          rows = []\n          for loop_idx in (1,2):\n              row_idx = int(input_reader.readline())\n              for idx in (1,2,3,4):\n                  if idx == row_idx:\n                      rows.append(set(input_reader.readline().rstrip(\"\n\").split(\" \")))\n                  else:\n                      input_reader.readline()\n          input_values = {\"rows\":rows,\n                          \"case\":case_idx}\n          yield input_values\n  \n  \n  def solve_problem(output_writer=sys.stdout, **kwargs):\n      rows = kwargs['rows']\n      case = kwargs['case']\n      intersect = rows[0].intersection(rows[1])\n      if not intersect:\n          msg = CHEATING\n      elif len(intersect) == 1:\n          msg = intersect.pop()\n      else:\n          msg = BAD_MAGIC\n      print >>output_writer, \"Case #%d: %s\" % (case, msg)\n  \n  def solve_inputs(input_reader, output_writer):\n      \"\"\"\n      Loop through each problem input in input reader and solve it.\n  \n      Outputs responses to output_writer.\n      \"\"\"\n      for input_values in parse_input(input_reader):\n          solve_problem(output_writer=output_writer, **input_values)\n  \n  def run_tests():\n      \"\"\"\n      Check the sample input and output match.\n      \"\"\"\n      idx = 0\n      all_pass = True\n      for problem_input, expected_output in TEST_CASES:\n          idx += 1\n          input_reader = StringIO(problem_input)\n          output_writer = StringIO()\n          solve_inputs(input_reader, output_writer)\n          problem_output = output_writer.getvalue()\n          if problem_output == expected_output:\n              print \"Test %d: Success\" % idx\n          else:\n              all_pass = False\n              print \"Test %d: Failure\" % idx\n          input_reader.close()\n          output_writer.close()\n      if all_pass:\n          print \"All tests were successful!\"\n      else:\n          print \"Something didn't match - try again.\"\n          print problem_output\n  \n  def main():\n      parser = OptionParser()\n      parser.add_option(\"-f\", \"--file\",\n                        dest=\"filename_stem\",\n                        help=\"read input from FILE.in and write to FILE.out\",\n                        metavar=\"FILE\")\n  \n      (options, args) = parser.parse_args()\n      if options.filename_stem:\n          print \"Running in file mode.\"\n          input_reader = open(\"%s.in\" % options.filename_stem, \"r\")\n          output_writer = open(\"%s.out\" % options.filename_stem, \"w\")\n          solve_inputs(input_reader, output_writer)\n      else:\n          print \"Running in test mode.\"\n          run_tests()\n  \n  if __name__ == \"__main__\":\n      main()\n ", "Adversarial Code": " \n  \n  TEST_CASES = [\n      (\"\"\"3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  \"\"\",\"\"\"Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n  \"\"\"),\n      (\"\"\"1\n  1\n  15 9 16 5\n  6 10 1 3\n  2 4 12 11\n  13 14 8 7\n  1\n  5 10 9 6\n  12 15 1 11\n  14 16 4 2\n  13 3 8 7\"\"\",\"\"\"Case #1: Bad magician!\n  \"\"\")\n  ]\n  \n  BAD_MAGIC = \"Bad magician!\"\n  CHEATING = \"Volunteer cheated!\"\n  \n  def parse_input(boardHasZero):\n      case_count = int(boardHasZero.readline())\n      searchBruteForce = 0\n      while case_count > searchBruteForce:\n          searchBruteForce += 1\n          show = []\n          for ret_list in (1,2):\n              inputFilename = int(boardHasZero.readline())\n              for numTests in (1,2,3,4):\n                  if numTests == inputFilename:\n                      show.append(set(boardHasZero.readline().rstrip(\"\n\").split(\" \")))\n                  else:\n                      boardHasZero.readline()\n          input_values = {\"rows\":show,\n                          \"case\":searchBruteForce}\n          yield input_values\n  \n  \n  def solve_problem(output_writer=sys.stdout, **kwargs):\n      show = kwargs['rows']\n      case = kwargs['case']\n      intersect = show[0].intersection(show[1])\n      if not intersect:\n          msg = CHEATING\n      elif len(intersect) == 1:\n          msg = intersect.pop()\n      else:\n          msg = BAD_MAGIC\n      print >>output_writer, \"Case #%d: %s\" % (case, msg)\n  \n  def solve_inputs(boardHasZero, output_writer):\n      \"\"\"\n      Loop through each problem input in input reader and solve it.\n  \n      Outputs responses to output_writer.\n      \"\"\"\n      for input_values in parse_input(boardHasZero):\n          solve_problem(output_writer=output_writer, **input_values)\n  \n  def run_tests():\n      \"\"\"\n      Check the sample input and output match.\n      \"\"\"\n      numTests = 0\n      all_pass = True\n      for problem_input, expected_output in TEST_CASES:\n          numTests += 1\n          boardHasZero = StringIO(problem_input)\n          output_writer = StringIO()\n          solve_inputs(boardHasZero, output_writer)\n          problem_output = output_writer.getvalue()\n          if problem_output == expected_output:\n              print \"Test %d: Success\" % numTests\n          else:\n              all_pass = False\n              print \"Test %d: Failure\" % numTests\n          boardHasZero.close()\n          output_writer.close()\n      if all_pass:\n          print \"All tests were successful!\"\n      else:\n          print \"Something didn't match - try again.\"\n          print problem_output\n  \n  def main():\n      parser = OptionParser()\n      parser.add_option(\"-f\", \"--file\",\n                        dest=\"filename_stem\",\n                        help=\"read input from FILE.in and write to FILE.out\",\n                        metavar=\"FILE\")\n  \n      (options, args) = parser.parse_args()\n      if options.filename_stem:\n          print \"Running in file mode.\"\n          boardHasZero = open(\"%s.in\" % options.filename_stem, \"r\")\n          output_writer = open(\"%s.out\" % options.filename_stem, \"w\")\n          solve_inputs(boardHasZero, output_writer)\n      else:\n          print \"Running in test mode.\"\n          run_tests()\n  \n  if __name__ == \"__main__\":\n      main()\n ", "Program Length": 406, "Identifier Num": 18, "Replaced Identifiers": "case_idx:searchBruteForce,output_writer:output_writer,input_values:input_values,row_idx:inputFilename,input_reader:boardHasZero,loop_idx:ret_list,idx:numTests,rows:show,", "Query Times": 326, "Time Cost": 0.16882463296254477, "Type": "wir"}
{"Index": 14, "Original Code": "__author__ = 'Jeffrey'\n  \n  inFileName = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\C-small-attempt0.in\"\n  \n  outFileName = inFileName[: -2] + \"out\"\n  \n  \n  def parseInput(f):\n      T = int(f.readline())\n      L = []\n  \n      for i in range(T):\n          L.append([int(i) for i in f.readline().split()])\n  \n      return T, L\n  \n  \n  def calculateOneClick(R, C, M):\n      size = R * C\n      if R == 1 or C == 1 and M < size:\n          return generateWinBoardBaseCase(R, C, M)\n      elif size - M == 1:\n          return generateWinBoardBaseCase(R, C, M)\n      elif size - M >= 4:\n          return generateWinBoard(R, C, M)\n      return \"Impossible\"\n  \n  def generateWinBoard(R,C,M):\n      emptySpace = R * C - M - 4\n      out = \"c\"\n      if C > 1:\n          out += \".\"\n          for i in range(2,C):\n              if emptySpace > 0:\n                  out += \".\"\n                  emptySpace -= 1\n              else:\n                  out += \"*\"\n      if R > 1:\n          out += '\n'\n          out += \".\"\n          if C > 1:\n              out += \".\"\n          for i in range(2,C):\n              if emptySpace > 0:\n                  out += \".\"\n                  emptySpace -= 1\n              else:\n                  out += \"*\"\n      for r in range(2,R):\n          out += '\n'\n          for c in range(C):\n              if emptySpace > 0:\n                  out += \".\"\n                  emptySpace -= 1\n              else:\n                  out += \"*\"\n      return out\n  \n  def generateWinBoardBaseCase(R,C,M):\n      emptySpace = R * C - M - 1\n      out = \"c\"\n      if C > 1:\n          for c in range(1,C):\n              if emptySpace > 0:\n                  out += \".\"\n                  emptySpace -= 1\n              else:\n                  out += \"*\"\n      for r in range(1,R):\n          out += '\n'\n          for c in range(C):\n              if emptySpace > 0:\n                  out += \".\"\n                  emptySpace -= 1\n              else:\n                  out += \"*\"\n      return out\n  \n  \n  def playGame(T, L):\n      for i in range(T):\n          result = calculateOneClick(L[i][0], L[i][1], L[i][2])\n          yield \"Case #\" + str(i + 1) + \":\n\" + str(result)\n  \n  \n  if __name__ == \"__main__\":\n      iF = open(inFileName, 'r')\n      T, L = parseInput(iF)\n      iF.close()\n  \n      print(T)\n      print(L)\n  \n      oF = open(outFileName, \"wb\")\n      for out in playGame(T, L):\n          print(out)\n          oF.write(bytes(out + \"\n\", 'utf-8'))\n      oF.close()\n ", "Adversarial Code": "problem_input = 'Jeffrey'\n  \n  line_of_numbers = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\C-small-attempt0.in\"\n  \n  NUM_PROCESSES = line_of_numbers[: -2] + \"out\"\n  \n  \n  def parseInput(global):\n      Y = int(global.readline())\n      Flip = []\n  \n      for Case in range(Y):\n          Flip.append([int(Case) for Case in global.readline().split()])\n  \n      return Y, Flip\n  \n  \n  def calculateOneClick(__doc__, CASE_PRFX, Ans):\n      place_mine = __doc__ * CASE_PRFX\n      if __doc__ == 1 or CASE_PRFX == 1 and Ans < place_mine:\n          return generateWinBoardBaseCase(__doc__, CASE_PRFX, Ans)\n      elif place_mine - Ans == 1:\n          return generateWinBoardBaseCase(__doc__, CASE_PRFX, Ans)\n      elif place_mine - Ans >= 4:\n          return generateWinBoard(__doc__, CASE_PRFX, Ans)\n      return \"Impossible\"\n  \n  def generateWinBoard(__doc__,CASE_PRFX,Ans):\n      numPossibleAnswers = __doc__ * CASE_PRFX - Ans - 4\n      boardHasZero = \"c\"\n      if CASE_PRFX > 1:\n          boardHasZero += \".\"\n          for Case in range(2,CASE_PRFX):\n              if numPossibleAnswers > 0:\n                  boardHasZero += \".\"\n                  numPossibleAnswers -= 1\n              else:\n                  boardHasZero += \"*\"\n      if __doc__ > 1:\n          boardHasZero += '\n'\n          boardHasZero += \".\"\n          if CASE_PRFX > 1:\n              boardHasZero += \".\"\n          for Case in range(2,CASE_PRFX):\n              if numPossibleAnswers > 0:\n                  boardHasZero += \".\"\n                  numPossibleAnswers -= 1\n              else:\n                  boardHasZero += \"*\"\n      for r in range(2,__doc__):\n          boardHasZero += '\n'\n          for c in range(CASE_PRFX):\n              if numPossibleAnswers > 0:\n                  boardHasZero += \".\"\n                  numPossibleAnswers -= 1\n              else:\n                  boardHasZero += \"*\"\n      return boardHasZero\n  \n  def generateWinBoardBaseCase(__doc__,CASE_PRFX,Ans):\n      numPossibleAnswers = __doc__ * CASE_PRFX - Ans - 1\n      boardHasZero = \"c\"\n      if CASE_PRFX > 1:\n          for c in range(1,CASE_PRFX):\n              if numPossibleAnswers > 0:\n                  boardHasZero += \".\"\n                  numPossibleAnswers -= 1\n              else:\n                  boardHasZero += \"*\"\n      for r in range(1,__doc__):\n          boardHasZero += '\n'\n          for c in range(CASE_PRFX):\n              if numPossibleAnswers > 0:\n                  boardHasZero += \".\"\n                  numPossibleAnswers -= 1\n              else:\n                  boardHasZero += \"*\"\n      return boardHasZero\n  \n  \n  def playGame(Y, Flip):\n      for Case in range(Y):\n          result = calculateOneClick(Flip[Case][0], Flip[Case][1], Flip[Case][2])\n          yield \"Case #\" + str(Case + 1) + \":\n\" + str(result)\n  \n  \n  if __name__ == \"__main__\":\n      iF = open(line_of_numbers, 'r')\n      Y, Flip = parseInput(iF)\n      iF.close()\n  \n      print(Y)\n      print(Flip)\n  \n      oF = open(NUM_PROCESSES, \"wb\")\n      for boardHasZero in playGame(Y, Flip):\n          print(boardHasZero)\n          oF.write(bytes(boardHasZero + \"\n\", 'utf-8'))\n      oF.close()\n ", "Program Length": 510, "Identifier Num": 21, "Replaced Identifiers": "inFileName:line_of_numbers,__author__:problem_input,outFileName:NUM_PROCESSES,C:CASE_PRFX,R:__doc__,M:Ans,out:boardHasZero,f:global,size:place_mine,L:Flip,i:Case,result:result,c:c,T:Y,r:r,iF:iF,oF:oF,emptySpace:numPossibleAnswers,", "Query Times": 674, "Time Cost": 0.32496141592661537, "Type": "wir"}
{"Index": 15, "Original Code": null, "Adversarial Code": null, "Program Length": 306, "Identifier Num": 23, "Replaced Identifiers": null, "Query Times": 674, "Time Cost": 0.3237055619557699, "Type": "0"}
{"Index": 17, "Original Code": " \n  def solve_case(answers, arrangements_of_cards, case_number):\n      first_candidates = arrangements_of_cards[0][answers[0] - 1]\n      second_candidates = arrangements_of_cards[1][answers[1] - 1]\n      answer = set(first_candidates) & set(second_candidates)\n      length_of_answer = len(answer)\n      if length_of_answer > 1:\n          print \"Case #%d: Bad magician!\" % case_number\n      elif length_of_answer < 1:\n          print \"Case #%d: Volunteer cheated!\" % case_number\n      else:\n          print \"Case #%d: %d\" % (case_number, answer.pop())\n  \n  r = sys.stdin\n  \n  if len(sys.argv) > 1:\n      r = open(sys.argv[1], 'r')\n  \n  total_cases = r.readline()\n  for case_number in range(1, int(total_cases) + 1):\n      answers = []\n      arrangements_of_cards = []\n      answers.append(int(r.readline()))\n      arrangements_of_cards.append([])\n      for row in range(0, 4):\n          arrangements_of_cards[0].append(map(int, r.readline().split(' ')))\n      answers.append(int(r.readline()))\n      arrangements_of_cards.append([])\n      for row in range(0, 4):\n          arrangements_of_cards[1].append(map(int, r.readline().split(' ')))\n      solve_case(answers, arrangements_of_cards, case_number)\n ", "Adversarial Code": " \n  def solve_case(parse_input, arrangements_of_cards, active_cols):\n      first_candidates = arrangements_of_cards[0][parse_input[0] - 1]\n      second_candidates = arrangements_of_cards[1][parse_input[1] - 1]\n      answer = set(first_candidates) & set(second_candidates)\n      length_of_answer = len(answer)\n      if length_of_answer > 1:\n          print \"Case #%d: Bad magician!\" % active_cols\n      elif length_of_answer < 1:\n          print \"Case #%d: Volunteer cheated!\" % active_cols\n      else:\n          print \"Case #%d: %d\" % (active_cols, answer.pop())\n  \n  iF = sys.stdin\n  \n  if len(sys.argv) > 1:\n      iF = open(sys.argv[1], 'r')\n  \n  is = iF.readline()\n  for active_cols in range(1, int(is) + 1):\n      parse_input = []\n      arrangements_of_cards = []\n      parse_input.append(int(iF.readline()))\n      arrangements_of_cards.append([])\n      for parse in range(0, 4):\n          arrangements_of_cards[0].append(map(int, iF.readline().split(' ')))\n      parse_input.append(int(iF.readline()))\n      arrangements_of_cards.append([])\n      for parse in range(0, 4):\n          arrangements_of_cards[1].append(map(int, iF.readline().split(' ')))\n      solve_case(parse_input, arrangements_of_cards, active_cols)\n ", "Program Length": 259, "Identifier Num": 11, "Replaced Identifiers": "case_number:active_cols,r:iF,answers:parse_input,row:parse,total_cases:is,", "Query Times": 197, "Time Cost": 0.10049938758214315, "Type": "wir"}
{"Index": 19, "Original Code": " \n  \n  def compute(r1, m1, r2, m2):\n      valid1 = set(m1[r1 - 1])\n      valid2 = set(m2[r2 - 1])\n      valid = valid1 & valid2\n      if len(valid) == 0:\n          return 'Volunteer cheated!'\n      if len(valid) > 1:\n          return 'Bad magician!'\n      return valid.pop()\n  \n  \n  def parse_single():\n      r = int(sys.stdin.readline().strip())\n      m = []\n      for i in xrange(4):\n          m.append(map(int, sys.stdin.readline().strip().split()))\n      return r, m\n  \n  def parse():\n      r1, m1 = parse_single()\n      r2, m2 = parse_single()\n      return r1, m1, r2, m2\n  \n  \n  if __name__ == \"__main__\":\n      sys.setrecursionlimit(100000)\n      T = int(sys.stdin.readline().strip())\n      for i in xrange(T):\n          data = parse()\n          result = compute(*data)\n          print \"Case #%d: %s\" % (i + 1, result)\n ", "Adversarial Code": " \n  \n  def compute(r1, case_counter, r2, m2):\n      valid1 = set(case_counter[r1 - 1])\n      valid2 = set(m2[r2 - 1])\n      case_counter = valid1 & valid2\n      if len(case_counter) == 0:\n          return 'Volunteer cheated!'\n      if len(case_counter) > 1:\n          return 'Bad magician!'\n      return case_counter.pop()\n  \n  \n  def parse_single():\n      r = int(sys.stdin.readline().strip())\n      m = []\n      for i in xrange(4):\n          m.append(map(int, sys.stdin.readline().strip().split()))\n      return r, m\n  \n  def parse():\n      r1, case_counter = parse_single()\n      r2, m2 = parse_single()\n      return r1, case_counter, r2, m2\n  \n  \n  if __name__ == \"__main__\":\n      sys.setrecursionlimit(100000)\n      T = int(sys.stdin.readline().strip())\n      for i in xrange(T):\n          n_cases = parse()\n          numTests = compute(*n_cases)\n          print \"Case #%d: %s\" % (i + 1, numTests)\n ", "Program Length": 211, "Identifier Num": 16, "Replaced Identifiers": "valid:case_counter,data:n_cases,result:numTests,m1:case_counter,", "Query Times": 162, "Time Cost": 0.0834227720896403, "Type": "wir"}
{"Index": 20, "Original Code": null, "Adversarial Code": null, "Program Length": 406, "Identifier Num": 17, "Replaced Identifiers": null, "Query Times": 445, "Time Cost": 0.21293890873591106, "Type": "0"}
{"Index": 21, "Original Code": null, "Adversarial Code": null, "Program Length": 297, "Identifier Num": 22, "Replaced Identifiers": null, "Query Times": 439, "Time Cost": 0.21855212052663167, "Type": "0"}
{"Index": 22, "Original Code": "def Trivial(R,C,char):\n      for i in range(R):\n          Ans = '';\n          for j in range(C):\n              if (i==j==0):\n                  Ans += 'c';\n              else:\n                  Ans += char;\n          print Ans;\n  \n  \n  def Draw1(R,C,Blank):\n      Ans = \"c\";\n      for i in range(Blank-1):\n          Ans += '.';\n      for i in range(R*C-Blank):\n          Ans += '*';\n      if (R == 1):\n          print Ans;        \n          return;\n      if (C == 1):\n          for i in range(len(Ans)):\n              print Ans[i];\n  \n  def Draw2(R,C,Blank):\n      if (Blank%2 != 0) or (Blank == 2):\n          print \"Impossible\";\n          return;\n      Row1 = '.'*(Blank/2) + '*'*(Mine/2);\n      Row0 = 'c' + Row1[1:];\n      if R==2:\n          print Row0;\n          print Row1;\n      else:\n          for i in range(len(Row0)):\n              print Row0[i]+Row1[i];\n      return;\n  \n  \n  def Generate(R, C, Blank):\n      TODO = Blank;\n      Spaces = [0]*R;\n      if TODO <= 2*C:\n          if TODO%2 == 0:\n              Spaces[0] = TODO/2;\n              Spaces[1] = TODO-Spaces[0];\n          else:\n              if (TODO == 7):\n                  Spaces[0] = 3;\n                  Spaces[1] = 2;\n                  Spaces[2] = 2;\n              else:\n                  Spaces[0] = (TODO-3)/2;\n                  Spaces[1] = (TODO-3)/2;\n                  Spaces[2] = 3;\n      else:\n          row = 0;\n          if (TODO >= 2*C+2):\n              Spaces[0] = C;\n              Spaces[1] = C;\n              TODO -= 2*C;\n              row = 2;\n              \n          while TODO > C+1:\n              if (TODO == 2*C+1) and (C != 3):\n                  Spaces[row] = C-1;\n                  Spaces[row+1] = C-1;\n                  Spaces[row+2] = 3;\n                  TODO = 0;\n              else:\n                  Spaces[row] = C;\n                  TODO -= C;\n                  row += 1;\n          if (TODO == C+1):\n              Spaces[row] += C-1;\n              Spaces[row+1] = 2;\n              TODO = 0;\n          Spaces[row] += TODO;\n  \n      for r in range(R):\n          Ans = '.'*Spaces[r] + '*'*(C-Spaces[r]);\n          if r == 0:\n              Ans = 'c'+Ans[1:];\n          print Ans;\n  \n  \n  def Solve(R, C, M):\n      Blank = R*C-M;\n      if Blank == 0:\n          print \"Impossible\";\n          return;\n  \n      if (Blank == 1):\n          Trivial(R,C,'*');\n          return\n      if (Blank == R*C):\n          Trivial(R,C,'.');\n          return\n  \n      if (R == 1) or (C == 1):\n            Draw1(R,C,Blank);\n            return\n  \n      if (R-2)*(C-2) == 0:\n          Draw2(R,C,Blank);\n          return\n  \n      if Blank in [2,3,5,7]:\n          print \"Impossible\";\n          return;\n      \n      if (R >= 3) and (C >= 3):\n          Generate(R, C, Blank);\n  \n      return;\n  \n  \n  T = int(raw_input());\n  for q in range(T):\n      [Row,Col,Mine] = map(int, raw_input().split());\n  \n      Blanks = Row*Col - Mine;\n      \n      print \"Case #%d:\" % (q+1)\n      Solve(Row, Col, Mine);\n      \n          \n ", "Adversarial Code": "def Trivial(mat_to_str,put_mines_last_step,process_case):\n      for fill_edge_row in range(mat_to_str):\n          num_common = '';\n          for t2 in range(put_mines_last_step):\n              if (fill_edge_row==t2==0):\n                  num_common += 'c';\n              else:\n                  num_common += process_case;\n          print num_common;\n  \n  \n  def Draw1(mat_to_str,put_mines_last_step,test_case_n):\n      num_common = \"c\";\n      for fill_edge_row in range(test_case_n-1):\n          num_common += '.';\n      for fill_edge_row in range(mat_to_str*put_mines_last_step-test_case_n):\n          num_common += '*';\n      if (mat_to_str == 1):\n          print num_common;        \n          return;\n      if (put_mines_last_step == 1):\n          for fill_edge_row in range(len(num_common)):\n              print num_common[fill_edge_row];\n  \n  def Draw2(mat_to_str,put_mines_last_step,test_case_n):\n      if (test_case_n%2 != 0) or (test_case_n == 2):\n          print \"Impossible\";\n          return;\n      enum_neighbour_coords = '.'*(test_case_n/2) + '*'*(Mine/2);\n      Row0 = 'c' + enum_neighbour_coords[1:];\n      if mat_to_str==2:\n          print Row0;\n          print enum_neighbour_coords;\n      else:\n          for fill_edge_row in range(len(Row0)):\n              print Row0[fill_edge_row]+enum_neighbour_coords[fill_edge_row];\n      return;\n  \n  \n  def Generate(mat_to_str, put_mines_last_step, test_case_n):\n      TODO = test_case_n;\n      Spaces = [0]*mat_to_str;\n      if TODO <= 2*put_mines_last_step:\n          if TODO%2 == 0:\n              Spaces[0] = TODO/2;\n              Spaces[1] = TODO-Spaces[0];\n          else:\n              if (TODO == 7):\n                  Spaces[0] = 3;\n                  Spaces[1] = 2;\n                  Spaces[2] = 2;\n              else:\n                  Spaces[0] = (TODO-3)/2;\n                  Spaces[1] = (TODO-3)/2;\n                  Spaces[2] = 3;\n      else:\n          row = 0;\n          if (TODO >= 2*put_mines_last_step+2):\n              Spaces[0] = put_mines_last_step;\n              Spaces[1] = put_mines_last_step;\n              TODO -= 2*put_mines_last_step;\n              row = 2;\n              \n          while TODO > put_mines_last_step+1:\n              if (TODO == 2*put_mines_last_step+1) and (put_mines_last_step != 3):\n                  Spaces[row] = put_mines_last_step-1;\n                  Spaces[row+1] = put_mines_last_step-1;\n                  Spaces[row+2] = 3;\n                  TODO = 0;\n              else:\n                  Spaces[row] = put_mines_last_step;\n                  TODO -= put_mines_last_step;\n                  row += 1;\n          if (TODO == put_mines_last_step+1):\n              Spaces[row] += put_mines_last_step-1;\n              Spaces[row+1] = 2;\n              TODO = 0;\n          Spaces[row] += TODO;\n  \n      for r in range(mat_to_str):\n          num_common = '.'*Spaces[r] + '*'*(put_mines_last_step-Spaces[r]);\n          if r == 0:\n              num_common = 'c'+num_common[1:];\n          print num_common;\n  \n  \n  def Solve(mat_to_str, put_mines_last_step, M):\n      test_case_n = mat_to_str*put_mines_last_step-M;\n      if test_case_n == 0:\n          print \"Impossible\";\n          return;\n  \n      if (test_case_n == 1):\n          Trivial(mat_to_str,put_mines_last_step,'*');\n          return\n      if (test_case_n == mat_to_str*put_mines_last_step):\n          Trivial(mat_to_str,put_mines_last_step,'.');\n          return\n  \n      if (mat_to_str == 1) or (put_mines_last_step == 1):\n            Draw1(mat_to_str,put_mines_last_step,test_case_n);\n            return\n  \n      if (mat_to_str-2)*(put_mines_last_step-2) == 0:\n          Draw2(mat_to_str,put_mines_last_step,test_case_n);\n          return\n  \n      if test_case_n in [2,3,5,7]:\n          print \"Impossible\";\n          return;\n      \n      if (mat_to_str >= 3) and (put_mines_last_step >= 3):\n          Generate(mat_to_str, put_mines_last_step, test_case_n);\n  \n      return;\n  \n  \n  T = int(raw_input());\n  for q in range(T):\n      [Row,Col,Mine] = map(int, raw_input().split());\n  \n      Blanks = Row*Col - Mine;\n      \n      print \"Case #%d:\" % (q+1)\n      Solve(Row, Col, Mine);\n      \n          \n ", "Program Length": 765, "Identifier Num": 17, "Replaced Identifiers": "C:put_mines_last_step,Blank:test_case_n,row:row,R:mat_to_str,Mine:Mine,Spaces:Spaces,r:r,Row1:enum_neighbour_coords,j:t2,char:process_case,Row0:Row0,TODO:TODO,i:fill_edge_row,Ans:num_common,", "Query Times": 585, "Time Cost": 0.29339580138524374, "Type": "wir"}
{"Index": 23, "Original Code": null, "Adversarial Code": null, "Program Length": 174, "Identifier Num": 9, "Replaced Identifiers": null, "Query Times": 298, "Time Cost": 0.15409327745437623, "Type": "0"}
{"Index": 24, "Original Code": " \n  \n  \n  def show_board(board):\n      for row in board:\n          print ''.join(row)\n  \n  \n  N = int(sys.stdin.readline())\n  \n  for T in range(1, N+1):\n      (R, C, M) = map(int, sys.stdin.readline().split(' '))\n      E = R*C-M # empty\n      possible, reverse, need_adjust, column_base = (False, False, False, False)\n      if C > R:\n          (R, C) = (C, R)\n          reverse = True\n  \n      W = 0\n      lastRow = 0\n      if E == 0:\n          pass\n      elif E == 1 or M == 0:\n          W = C\n          possible = True\n      elif C == 1:\n          W = 1\n          if E > 0:\n              possible = True\n      elif C == 2:\n          W = 2\n          lastRow = int(E / 2) + 1   # 1 base\n          if E % 2 == 0 and E >= 4:\n              possible = True\n      elif C >= 3:\n          for w in range(2, C+1):\n              lastRow = int(E / w) + 1   # 1 base\n              if lastRow > R: continue\n              lastRowNum = E % w\n              \n              if lastRow == 2 and lastRowNum == 0:\n                  pass\n              elif lastRow == 2:   # lastRow == 1 => impossible\n                  if lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n              elif lastRow >= 3:\n                  if lastRowNum >= 2 or lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n                  elif C >= 4 and lastRowNum == 1 and R >= 3:\n                      W = w\n                      possible = True\n                      need_adjust = True\n                      break\n          if not possible:\n              for w in range(2, R+1):\n                  lastRow = int(E / w) + 1   # 1 base\n                  if lastRow > R: continue\n                  lastRowNum = E % w\n                  if lastRow == 2 and lastRowNum == 0:\n                      pass\n                  elif lastRow == 2:   # lastRow == 1 => impossible\n                      if lastRowNum == 0:\n                          W = w\n                          possible = True\n                          column_base = True\n                          break\n                  elif lastRow >= 3:\n                      if lastRowNum >= 2 or lastRowNum == 0:\n                          W = w\n                          possible = True\n                          column_base = True\n                          break\n                      elif C >= 4 and lastRowNum == 1 and R >= 3:\n                          W = w\n                          possible = True\n                          need_adjust = True\n                          column_base = True\n                          break\n                                  \n      if not possible:\n          if reverse:\n              R, C = (C, R)        \n          ans = 'Impossible %sx%s M=%s' % (R, C, M)\n          print 'Case #%(T)s: %(ans)s' % locals()\n          continue\n  \n      board = [['*'] * C for i in range(R)]\n      for i in range(E):\n          if not column_base:\n              c = i % W\n              r = i / W\n          else:\n              r = i % W\n              c = i / W            \n          board[r][c] = '.'\n      if need_adjust:\n          board[lastRow-1][1], board[lastRow-2][-1] = board[lastRow-2][-1], board[lastRow-1][1]\n      if reverse:\n          board = map(list, zip(*board))\n          R, C = (C, R)\n  \n      clicked = False\n      for r in range(R):\n          if clicked: break\n          for c in range(C):\n              cell = board[r][c]\n              if cell != '.': continue\n              if E == 1:\n                  board[r][c] = 'c'\n                  clicked = True\n                  break\n              \n              if r >= 1  and c >= 1  and board[r-1][c-1] == '*': continue\n              if r >= 1              and board[r-1][c]   == '*': continue\n              if r >= 1  and c < C-1 and board[r-1][c+1] == '*': continue\n              if             c >= 1  and board[r][c-1]   == '*': continue\n              if             c < C-1 and board[r][c+1]   == '*': continue\n              if r < R-1 and c >= 1  and board[r+1][c-1] == '*': continue\n              if r < R-1             and board[r+1][c]   == '*': continue\n              if r < R-1 and c < C-1 and board[r+1][c+1] == '*': continue\n              board[r][c] = 'c'\n              clicked = True\n              break\n  \n      ans = 'Possible' if possible else 'Impossible'\n      print 'Case #%(T)s:' % locals()\n      show_board(board)\n ", "Adversarial Code": " \n  \n  \n  def show_board(board):\n      for row in board:\n          print ''.join(row)\n  \n  \n  N = int(sys.stdin.readline())\n  \n  for T in range(1, N+1):\n      (R, C, M) = map(int, sys.stdin.readline().split(' '))\n      E = R*C-M # empty\n      possible, reverse, answers, input = (False, False, False, False)\n      if C > R:\n          (R, C) = (C, R)\n          reverse = True\n  \n      W = 0\n      case_index = 0\n      if E == 0:\n          pass\n      elif E == 1 or M == 0:\n          W = C\n          possible = True\n      elif C == 1:\n          W = 1\n          if E > 0:\n              possible = True\n      elif C == 2:\n          W = 2\n          case_index = int(E / 2) + 1   # 1 base\n          if E % 2 == 0 and E >= 4:\n              possible = True\n      elif C >= 3:\n          for w in range(2, C+1):\n              case_index = int(E / w) + 1   # 1 base\n              if case_index > R: continue\n              lastRowNum = E % w\n              \n              if case_index == 2 and lastRowNum == 0:\n                  pass\n              elif case_index == 2:   # lastRow == 1 => impossible\n                  if lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n              elif case_index >= 3:\n                  if lastRowNum >= 2 or lastRowNum == 0:\n                      W = w\n                      possible = True\n                      break\n                  elif C >= 4 and lastRowNum == 1 and R >= 3:\n                      W = w\n                      possible = True\n                      answers = True\n                      break\n          if not possible:\n              for w in range(2, R+1):\n                  case_index = int(E / w) + 1   # 1 base\n                  if case_index > R: continue\n                  lastRowNum = E % w\n                  if case_index == 2 and lastRowNum == 0:\n                      pass\n                  elif case_index == 2:   # lastRow == 1 => impossible\n                      if lastRowNum == 0:\n                          W = w\n                          possible = True\n                          input = True\n                          break\n                  elif case_index >= 3:\n                      if lastRowNum >= 2 or lastRowNum == 0:\n                          W = w\n                          possible = True\n                          input = True\n                          break\n                      elif C >= 4 and lastRowNum == 1 and R >= 3:\n                          W = w\n                          possible = True\n                          answers = True\n                          input = True\n                          break\n                                  \n      if not possible:\n          if reverse:\n              R, C = (C, R)        \n          ans = 'Impossible %sx%s M=%s' % (R, C, M)\n          print 'Case #%(T)s: %(ans)s' % locals()\n          continue\n  \n      board = [['*'] * C for i in range(R)]\n      for i in range(E):\n          if not input:\n              c = i % W\n              r = i / W\n          else:\n              r = i % W\n              c = i / W            \n          board[r][c] = '.'\n      if answers:\n          board[case_index-1][1], board[case_index-2][-1] = board[case_index-2][-1], board[case_index-1][1]\n      if reverse:\n          board = map(list, zip(*board))\n          R, C = (C, R)\n  \n      clicked = False\n      for r in range(R):\n          if clicked: break\n          for c in range(C):\n              cell = board[r][c]\n              if cell != '.': continue\n              if E == 1:\n                  board[r][c] = 'c'\n                  clicked = True\n                  break\n              \n              if r >= 1  and c >= 1  and board[r-1][c-1] == '*': continue\n              if r >= 1              and board[r-1][c]   == '*': continue\n              if r >= 1  and c < C-1 and board[r-1][c+1] == '*': continue\n              if             c >= 1  and board[r][c-1]   == '*': continue\n              if             c < C-1 and board[r][c+1]   == '*': continue\n              if r < R-1 and c >= 1  and board[r+1][c-1] == '*': continue\n              if r < R-1             and board[r+1][c]   == '*': continue\n              if r < R-1 and c < C-1 and board[r+1][c+1] == '*': continue\n              board[r][c] = 'c'\n              clicked = True\n              break\n  \n      ans = 'Possible' if possible else 'Impossible'\n      print 'Case #%(T)s:' % locals()\n      show_board(board)\n ", "Program Length": 838, "Identifier Num": 17, "Replaced Identifiers": "lastRowNum:lastRowNum,lastRow:case_index,ans:ans,column_base:input,need_adjust:answers,", "Query Times": 369, "Time Cost": 0.17632585763931274, "Type": "wir"}
{"Index": 25, "Original Code": " \n  \n  N = int(sys.stdin.readline())\n  \n  for T in range(1, N+1):\n      first_ans = int(sys.stdin.readline())\n      first_grid = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          first_grid.append(row)\n      first_list = set(first_grid[first_ans-1])\n      \n      second_ans = int(sys.stdin.readline())\n      second_grid = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          second_grid.append(row)\n      second_list = set(second_grid[second_ans-1])\n  \n      intersection = first_list.intersection(second_list)\n  \n      if len(intersection) == 1:\n          ans = intersection.pop()\n      elif len(intersection) == 0:\n          ans = 'Volunteer cheated!'\n      else:\n          ans = 'Bad magician!'\n  \n      print 'Case #%(T)s: %(ans)s' % locals()\n ", "Adversarial Code": " \n  \n  N = int(sys.stdin.readline())\n  \n  for problem in range(1, N+1):\n      TestCase = int(sys.stdin.readline())\n      iterate_cases_1lpc = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          iterate_cases_1lpc.append(row)\n      arguments = set(iterate_cases_1lpc[TestCase-1])\n      \n      second_ans = int(sys.stdin.readline())\n      r1 = []\n      for i in range(4):\n          row = [int(v) for v in sys.stdin.readline().split(' ')]\n          r1.append(row)\n      process_case = set(r1[second_ans-1])\n  \n      _i = arguments._i(process_case)\n  \n      if len(_i) == 1:\n          ans = _i.pop()\n      elif len(_i) == 0:\n          ans = 'Volunteer cheated!'\n      else:\n          ans = 'Bad magician!'\n  \n      print 'Case #%(T)s: %(ans)s' % locals()\n ", "Program Length": 197, "Identifier Num": 13, "Replaced Identifiers": "second_list:process_case,first_grid:iterate_cases_1lpc,first_list:arguments,second_grid:r1,second_ans:second_ans,intersection:_i,first_ans:TestCase,T:problem,", "Query Times": 278, "Time Cost": 0.15355569124221802, "Type": "wir"}
{"Index": 27, "Original Code": "T = int(raw_input())\n  for i in range(T):\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x1 = X[index-1]\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x2 = X[index-1]\n    ans = set(x1).intersection(set(x2))\n    if len(ans) == 0:\n      print 'Case #%i: Volunteer cheated!' % (i+1)\n    elif len(ans) == 1:\n      print 'Case #%i: %i' % (i+1, ans.pop())\n    else:\n      print 'Case #%i: Bad magician!' % (i+1)\n ", "Adversarial Code": "inputFileName = int(raw_input())\n  for i in range(inputFileName):\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x1 = X[index-1]\n    index = int(raw_input())\n    X = []\n    for j in range(4):\n      X.append(map(int, raw_input().split()))\n    x2 = X[index-1]\n    ans = set(x1).intersection(set(x2))\n    if len(ans) == 0:\n      print 'Case #%i: Volunteer cheated!' % (i+1)\n    elif len(ans) == 1:\n      print 'Case #%i: %i' % (i+1, ans.pop())\n    else:\n      print 'Case #%i: Bad magician!' % (i+1)\n ", "Program Length": 168, "Identifier Num": 8, "Replaced Identifiers": "T:inputFileName,", "Query Times": 60, "Time Cost": 0.04453152020772298, "Type": "wir"}
{"Index": 29, "Original Code": "def solve(c1, g1, c2, g2):\n      row_1 = g1[c1-1]\n      row_2 = g2[c2-1]\n      inter = set(row_1) & set(row_2)\n      if len(inter) == 0:\n          return \"Volunteer cheated!\"\n      if len(inter) > 1:\n          return \"Bad magician!\"\n      return str(inter.pop())\n  \n  if __name__ == \"__main__\":\n      T = int(raw_input())\n      for i in range(1,T+1):\n          c1 = int(raw_input())\n          g1 = []\n          for j in range(4):\n              g1.append(map(int, raw_input().split()))\n          c2 = int(raw_input())\n          g2 = []\n          for j in range(4):\n              g2.append(map(int, raw_input().split()))\n          print \"Case #%d: %s\" % (i, solve(c1,g1,c2,g2)) \n          \n      \n ", "Adversarial Code": "def solve(c1, g1, c2, g2):\n      one_line_builder = g1[c1-1]\n      NumCases = g2[c2-1]\n      inter = set(one_line_builder) & set(NumCases)\n      if len(inter) == 0:\n          return \"Volunteer cheated!\"\n      if len(inter) > 1:\n          return \"Bad magician!\"\n      return str(inter.pop())\n  \n  if __name__ == \"__main__\":\n      iterate_cases_glpc = int(raw_input())\n      for i in range(1,iterate_cases_glpc+1):\n          c1 = int(raw_input())\n          g1 = []\n          for j in range(4):\n              g1.append(map(int, raw_input().split()))\n          c2 = int(raw_input())\n          g2 = []\n          for j in range(4):\n              g2.append(map(int, raw_input().split()))\n          print \"Case #%d: %s\" % (i, solve(c1,g1,c2,g2)) \n          \n      \n ", "Program Length": 184, "Identifier Num": 11, "Replaced Identifiers": "T:iterate_cases_glpc,row_1:one_line_builder,row_2:NumCases,", "Query Times": 126, "Time Cost": 0.07806938091913859, "Type": "wir"}
{"Index": 30, "Original Code": " \n  \n  tCase = int(sys.stdin.readline())\n  \n  \n  def map(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tprint Bombs\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \tfor i in xrange(R):\n  \t\tfor j in xrange(C):\n  \t\t\tif Bombs == 0:\n  \t\t\t\tbreak\n  \t\t\t\n  \t\t\tif lastSkip:\n  \t\t\t\tm[i][j] = 'f'\n  \t\t\t\tcontinue\n  \t\t\t\n  \t\t\tif R - i == 2 or C - j == 2:\n  \t\t\t\tif Bombs == 1:\n  \t\t\t\t\tm[i][j] = 'f'\n  \t\t\t\t\tlastSkip = True\n  \t\t\t\t\tcontinue\n  \t\t\t\n  \t\t\t\t\n  \t\t\tm[i][j] = '*'\n  \t\t\tBombs -= 1\n  \t\t\tlastSkip = False\n  \t\tlastSkip = False\n  \t\t\t\t\n  \t\n  \t\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  \t\t\n  def imprimir(m):\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  def map2(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \t\n  \tii = 0\n  \tjj = 0\n  \twhile Bombs > 0:\n  \t\tfor j in xrange(jj, C):\n  \t\t\tif Bombs >= (C - j) or Bombs <= (C - j - 2) and Bombs > 0:\n  \t\t\t\tm[ii][j] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tcontinue\n  \t\t\n  \t\t\n  \t\tfor i in xrange(ii+1, R):\n  \t\t\tif Bombs >= (R - i) or Bombs <= (R - i - 2) and Bombs > 0:\n  \t\t\t\tm[i][jj] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tif Bombs > 0:\n  \t\t\t\t\tprint \"Impossible\"\n  \t\t\t\t\treturn\n  \t\t\t\tcontinue\n  \t\tjj += 1\n  \t\tii += 1\n  \timprimir(m)\n  \t\n  \t\t\t\t\n  \t\n  \t\n  \n  \t\t\n  def main(R, C, M):\n  \tvazios = R * C - M\n  \n  \tif R == 1 or C == 1 or vazios == 1 or vazios >= 4:\n  \t\tmap2(R, C, M)\n  \telse:\n  \t\tprint \"Impossible\"\n  \n  \treturn \"\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tR, C, M = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d:\" % (i + 1)\n  \t\tmain(R, C, M)\n ", "Adversarial Code": " \n  \n  iname = int(sys.stdin.readline())\n  \n  \n  def map(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tprint Bombs\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \tfor i in xrange(R):\n  \t\tfor j in xrange(C):\n  \t\t\tif Bombs == 0:\n  \t\t\t\tbreak\n  \t\t\t\n  \t\t\tif lastSkip:\n  \t\t\t\tm[i][j] = 'f'\n  \t\t\t\tcontinue\n  \t\t\t\n  \t\t\tif R - i == 2 or C - j == 2:\n  \t\t\t\tif Bombs == 1:\n  \t\t\t\t\tm[i][j] = 'f'\n  \t\t\t\t\tlastSkip = True\n  \t\t\t\t\tcontinue\n  \t\t\t\n  \t\t\t\t\n  \t\t\tm[i][j] = '*'\n  \t\t\tBombs -= 1\n  \t\t\tlastSkip = False\n  \t\tlastSkip = False\n  \t\t\t\t\n  \t\n  \t\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  \t\t\n  def imprimir(m):\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  def map2(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \t\n  \tii = 0\n  \tjj = 0\n  \twhile Bombs > 0:\n  \t\tfor j in xrange(jj, C):\n  \t\t\tif Bombs >= (C - j) or Bombs <= (C - j - 2) and Bombs > 0:\n  \t\t\t\tm[ii][j] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tcontinue\n  \t\t\n  \t\t\n  \t\tfor i in xrange(ii+1, R):\n  \t\t\tif Bombs >= (R - i) or Bombs <= (R - i - 2) and Bombs > 0:\n  \t\t\t\tm[i][jj] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tif Bombs > 0:\n  \t\t\t\t\tprint \"Impossible\"\n  \t\t\t\t\treturn\n  \t\t\t\tcontinue\n  \t\tjj += 1\n  \t\tii += 1\n  \timprimir(m)\n  \t\n  \t\t\t\t\n  \t\n  \t\n  \n  \t\t\n  def main(R, C, M):\n  \tvazios = R * C - M\n  \n  \tif R == 1 or C == 1 or vazios == 1 or vazios >= 4:\n  \t\tmap2(R, C, M)\n  \telse:\n  \t\tprint \"Impossible\"\n  \n  \treturn \"\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(iname):\t\n  \t\t\n  \t\tR, C, M = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d:\" % (i + 1)\n  \t\tmain(R, C, M)\n ", "Program Length": 457, "Identifier Num": 19, "Replaced Identifiers": "tCase:iname,", "Query Times": 154, "Time Cost": 0.07232102553049723, "Type": "wir"}
{"Index": 31, "Original Code": " \n  \n  \n  class Test(unittest.TestCase):\n  \tdef test_1(self):\n  \t\tself.assertEqual(main(5, 2, 2, [2,1]), 12)\n  \tdef test_2(self):\n  \t\tself.assertEqual(main(5,2,2,[1,2]), 12)\n  \tdef test_3(self):\n  \t\tself.assertEqual(main(3,3,4,[4,1,3,5]), 39)\n  \tdef test_4(self):\n  \t\tself.assertEqual(main(5,2,4,[5, 1, 1, 5]), 51)\n  \n  \n  tCase = int(sys.stdin.readline())\n  \n  def main(A, B, AList, BList):\n  \tresp = 0\n  \tA = A - 1\n  \tB = B - 1\n  \tAlist = AList[A*4:A*4+4]\n  \tBList = BList[B*4:B*4+4]\n  \tcont = 0\n  \tfor aa in Alist:\n  \t\tif aa in BList:\n  \t\t\tresp = aa\n  \t\t\tcont += 1\n  \t\t\n  \tif cont == 1:\n  \t\treturn resp\n  \telif cont == 0:\n  \t\treturn \"Volunteer cheated!\"\n  \telse:\n  \t\treturn \"Bad magician!\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tA = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  \t\tNList = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tB = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  \t\tBList = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d: %s\" % (i + 1, main(A, B, NList, BList))\n ", "Adversarial Code": " \n  \n  \n  class Test(unittest.TestCase):\n  \tdef test_1(isPossible):\n  \t\tisPossible.assertEqual(main(5, 2, 2, [2,1]), 12)\n  \tdef test_2(isPossible):\n  \t\tisPossible.assertEqual(main(5,2,2,[1,2]), 12)\n  \tdef test_3(isPossible):\n  \t\tisPossible.assertEqual(main(3,3,4,[4,1,3,5]), 39)\n  \tdef test_4(isPossible):\n  \t\tisPossible.assertEqual(main(5,2,4,[5, 1, 1, 5]), 51)\n  \n  \n  inputFile = int(sys.stdin.readline())\n  \n  def main(A, argv, AList, outfname):\n  \titerate_cases_glpc = 0\n  \tA = A - 1\n  \targv = argv - 1\n  \tAlist = AList[A*4:A*4+4]\n  \toutfname = outfname[argv*4:argv*4+4]\n  \tEOL = 0\n  \tfor tests in Alist:\n  \t\tif tests in outfname:\n  \t\t\titerate_cases_glpc = tests\n  \t\t\tEOL += 1\n  \t\t\n  \tif EOL == 1:\n  \t\treturn iterate_cases_glpc\n  \telif EOL == 0:\n  \t\treturn \"Volunteer cheated!\"\n  \telse:\n  \t\treturn \"Bad magician!\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor solve_problem in xrange(inputFile):\t\n  \t\t\n  \t\tA = [int(cur) for cur in sys.stdin.readline().split(' ')][0]\n  \t\tNList = [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\targv = [int(cur) for cur in sys.stdin.readline().split(' ')][0]\n  \t\toutfname = [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\toutfname += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\toutfname += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\toutfname += [int(cur) for cur in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d: %s\" % (solve_problem + 1, main(A, argv, NList, outfname))\n ", "Program Length": 494, "Identifier Num": 18, "Replaced Identifiers": "tCase:inputFile,x:cur,i:solve_problem,resp:iterate_cases_glpc,B:argv,cont:EOL,NList:NList,Alist:Alist,AList:AList,aa:tests,A:A,BList:outfname,self:isPossible,", "Query Times": 467, "Time Cost": 0.2571812868118286, "Type": "wir"}
{"Index": 32, "Original Code": " \n  def debug(v):\n      pass#print(v)\n  \n  def read(f):\n      t = tuple(int(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def readf(f):\n      t = tuple(float(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def answer(f, X, ans):\n      out = \"Case #{}:\n{}\".format(X, ans)\n      f.write(out)\n      f.write(\"\n\")\n      print(out)\n  \n  def answer_cells(f, X, cells):\n      out = \"Case #{}:\".format(X)\n      f.write(out)\n      f.write(\"\n\")\n      print(out)\n      for row in cells:\n          out = \"\".join(row)\n          f.write(out)\n          f.write(\"\n\")\n          print(out)\n  \n  def main(inf, outf):\n      T, = read(inf)\n      for casenmbr in range(1, T + 1):\n          R, C, M = read(inf)\n  \n          if M == 0:\n              cells = [['.'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          empty = R * C - M\n  \n          if empty == 1:\n              cells = [['*'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          if R == 1 or C == 1:\n              cells = [['.'] * C for i in range(R)]\n              m = 0\n              for r in range(R):\n                  for c in range(C):\n                      cells[r][c] = '*'\n                      m += 1\n                      if m == M:\n                          break\n                  else:\n                      continue\n                  break\n              cells[-1][-1] = 'c'\n              answer_cells(outf, casenmbr, cells)\n              continue\n  \n          if empty in (2, 3, 5, 7):\n              answer(outf, casenmbr, \"Impossible\")\n              continue\n  \n          if (R == 2 or C == 2) and empty % 2:\n              answer(outf, casenmbr, \"Impossible\")\n              continue\n  \n          cells = [['*'] * C for i in range(R)]\n  \n  \n          cells[0][0] = 'c'\n          empty -= 1\n          cc = 1\n          rr = 1\n          while empty > 0:\n              if cc < C:\n                  for r in range(rr):\n                      if empty == 2 and r == rr - 1:\n                          break\n                      cells[r][cc] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  cc += 1\n              if rr < R and empty > 0:\n                  for c in range(cc):\n                      if empty == 2 and c == cc - 1:\n                          break\n                      cells[rr][c] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  rr += 1            \n  \n          answer_cells(outf, casenmbr, cells)\n  \n  \n  if __name__==\"__main__\":\n      infname = sys.argv[1]\n      outfname = os.path.splitext(infname)[0] + \".out\"\n      with open(infname, \"r\") as inf:\n          with open(outfname, \"w\") as outf:\n              main(inf, outf)\n ", "Adversarial Code": " \n  def debug(v):\n      pass#print(v)\n  \n  def read(size):\n      t = tuple(int(v) for v in size.readline().split())\n      debug(t)\n      return t\n  \n  def readf(size):\n      t = tuple(float(v) for v in size.readline().split())\n      debug(t)\n      return t\n  \n  def answer(size, X, ans):\n      out = \"Case #{}:\n{}\".format(X, ans)\n      size.write(out)\n      size.write(\"\n\")\n      print(out)\n  \n  def answer_cells(size, X, cells):\n      out = \"Case #{}:\".format(X)\n      size.write(out)\n      size.write(\"\n\")\n      print(out)\n      for row in cells:\n          out = \"\".join(row)\n          size.write(out)\n          size.write(\"\n\")\n          print(out)\n  \n  def main(CASE_PRFX, case_line_cnt):\n      T, = read(CASE_PRFX)\n      for problem in range(1, T + 1):\n          R, C, M = read(CASE_PRFX)\n  \n          if M == 0:\n              cells = [['.'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(case_line_cnt, problem, cells)\n              continue\n  \n          empty = R * C - M\n  \n          if empty == 1:\n              cells = [['*'] * C for i in range(R)]\n              cells[0][0] = 'c'\n              answer_cells(case_line_cnt, problem, cells)\n              continue\n  \n          if R == 1 or C == 1:\n              cells = [['.'] * C for i in range(R)]\n              m = 0\n              for r in range(R):\n                  for c in range(C):\n                      cells[r][c] = '*'\n                      m += 1\n                      if m == M:\n                          break\n                  else:\n                      continue\n                  break\n              cells[-1][-1] = 'c'\n              answer_cells(case_line_cnt, problem, cells)\n              continue\n  \n          if empty in (2, 3, 5, 7):\n              answer(case_line_cnt, problem, \"Impossible\")\n              continue\n  \n          if (R == 2 or C == 2) and empty % 2:\n              answer(case_line_cnt, problem, \"Impossible\")\n              continue\n  \n          cells = [['*'] * C for i in range(R)]\n  \n  \n          cells[0][0] = 'c'\n          empty -= 1\n          cc = 1\n          rr = 1\n          while empty > 0:\n              if cc < C:\n                  for r in range(rr):\n                      if empty == 2 and r == rr - 1:\n                          break\n                      cells[r][cc] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  cc += 1\n              if rr < R and empty > 0:\n                  for c in range(cc):\n                      if empty == 2 and c == cc - 1:\n                          break\n                      cells[rr][c] = '.'\n                      empty -= 1\n                      if empty == 0:\n                          break\n                  rr += 1            \n  \n          answer_cells(case_line_cnt, problem, cells)\n  \n  \n  if __name__==\"__main__\":\n      infname = sys.argv[1]\n      outfname = os.path.splitext(infname)[0] + \".out\"\n      with open(infname, \"r\") as CASE_PRFX:\n          with open(outfname, \"w\") as case_line_cnt:\n              main(CASE_PRFX, case_line_cnt)\n ", "Program Length": 627, "Identifier Num": 26, "Replaced Identifiers": "casenmbr:problem,outf:case_line_cnt,inf:CASE_PRFX,f:size,", "Query Times": 269, "Time Cost": 0.13339407046635945, "Type": "wir"}
{"Index": 33, "Original Code": " \n  def debug(v):\n      pass #print(v)\n  \n  def read(f):\n      t = tuple(int(v) for v in f.readline().split())\n      debug(t)\n      return t\n  \n  def answer(f, X, ans):\n      out = \"Case #{}: {}\".format(X, ans)\n      f.write(out)\n      f.write(\"\n\")\n      print(out)\n  \n  \n  \n  def main(inf, outf):\n      T, = read(inf)\n      for X in range(1, T + 1):\n          row1, = read(inf)\n          cards1 = tuple(read(inf) for i in range(4))\n          row2, = read(inf)\n          cards2 = tuple(read(inf) for i in range(4))\n  \n          kouho = set(cards1[row1 - 1]).intersection(cards2[row2 - 1])\n  \n          if kouho:\n              if len(kouho) == 1:\n                  ans = kouho.pop()\n              else:\n                  ans = \"Bad magician!\"\n          else:\n              ans = \"Volunteer cheated!\"\n  \n          answer(outf, X, ans)\n  \n  \n  if __name__==\"__main__\":\n      infname = sys.argv[1]\n      outfname = os.path.splitext(infname)[0] + \".out\"\n      with open(infname, \"r\") as inf:\n          with open(outfname, \"w\") as outf:\n              main(inf, outf)\n ", "Adversarial Code": " \n  def debug(v):\n      pass #print(v)\n  \n  def read(compute):\n      t = tuple(int(v) for v in compute.readline().split())\n      debug(t)\n      return t\n  \n  def answer(compute, X, ans):\n      out = \"Case #{}: {}\".format(X, ans)\n      compute.write(out)\n      compute.write(\"\n\")\n      print(out)\n  \n  \n  \n  def main(inf, memoize):\n      T, = read(inf)\n      for X in range(1, T + 1):\n          row1, = read(inf)\n          cards1 = tuple(read(inf) for i in range(4))\n          row2, = read(inf)\n          cards2 = tuple(read(inf) for i in range(4))\n  \n          kouho = set(cards1[row1 - 1]).intersection(cards2[row2 - 1])\n  \n          if kouho:\n              if len(kouho) == 1:\n                  ans = kouho.pop()\n              else:\n                  ans = \"Bad magician!\"\n          else:\n              ans = \"Volunteer cheated!\"\n  \n          answer(memoize, X, ans)\n  \n  \n  if __name__==\"__main__\":\n      solve = sys.argv[1]\n      outfname = os.path.splitext(solve)[0] + \".out\"\n      with open(solve, \"r\") as inf:\n          with open(outfname, \"w\") as memoize:\n              main(inf, memoize)\n ", "Program Length": 260, "Identifier Num": 21, "Replaced Identifiers": "infname:solve,f:compute,outf:memoize,", "Query Times": 150, "Time Cost": 0.08191297054290772, "Type": "wir"}
{"Index": 34, "Original Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      t = int(f.readline())\n      for _t in range(t):\n  \n          R, C, M = [int(x) for x in f.readline().split()]\n          free_spots = R * C - M - 1\n  \n          if M == 0:\n              answer = [[\".\" for x in range(C)] for y in range(R)]\n              answer[0][0] = \"c\"\n          elif R == 1:\n              answer = [[\"c\"] + [\".\" for x in range(free_spots)] + [\"*\" for m in range(M)]]\n          elif C == 1:\n              answer = [[\"c\"] + [\".\" for x in range(free_spots)] + [\"*\" for m in range(M)]]\n              answer = zip(*answer[::-1])\n          elif free_spots >= 3: # and M % R >= 2:\n              answer = [[\"*\" for x in range(C)] for y in range(R)]\n              answer[0][0] = \"c\"\n              answer[0][1] = \".\"\n              answer[1][1] = \".\"\n              answer[1][0] = \".\"\n              free_spots -= 3\n              tr, br, c = 0, 1, 2\n              if c >= C:\n                  tr, br, c = 2, 3, 0\n              for _i in range(free_spots):\n                  if answer[tr][c] == \"*\":\n                      answer[tr][c] = \".\"\n                  elif answer[br][c] == \"*\":\n                      answer[br][c] = \".\"\n                      if c < C-1:\n                          c+=1\n                      else:\n                          tr, br = tr + 2, br + 2\n                          c = 0\n                          if br == R:\n                              br, tr = br-1, tr-1\n                  \n          else:\n              answer = [\"Impossible\",]\n  \n          \n          \n          print (\"Case #\" + str(_t+1) + \":\")\n          for _i in answer:\n              print \"\".join(_i)\n      \n  \n ", "Adversarial Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          H = sys.argv[1]\n          if H != '-':\n              f = open(H)\n  \n      t = int(f.readline())\n      for _t in range(t):\n  \n          R, C, M = [int(x) for x in f.readline().split()]\n          free_spots = R * C - M - 1\n  \n          if M == 0:\n              answer = [[\".\" for x in range(C)] for y in range(R)]\n              answer[0][0] = \"c\"\n          elif R == 1:\n              answer = [[\"c\"] + [\".\" for x in range(free_spots)] + [\"*\" for m in range(M)]]\n          elif C == 1:\n              answer = [[\"c\"] + [\".\" for x in range(free_spots)] + [\"*\" for m in range(M)]]\n              answer = zip(*answer[::-1])\n          elif free_spots >= 3: # and M % R >= 2:\n              answer = [[\"*\" for x in range(C)] for y in range(R)]\n              answer[0][0] = \"c\"\n              answer[0][1] = \".\"\n              answer[1][1] = \".\"\n              answer[1][0] = \".\"\n              free_spots -= 3\n              tr, br, c = 0, 1, 2\n              if c >= C:\n                  tr, br, c = 2, 3, 0\n              for _i in range(free_spots):\n                  if answer[tr][c] == \"*\":\n                      answer[tr][c] = \".\"\n                  elif answer[br][c] == \"*\":\n                      answer[br][c] = \".\"\n                      if c < C-1:\n                          c+=1\n                      else:\n                          tr, br = tr + 2, br + 2\n                          c = 0\n                          if br == R:\n                              br, tr = br-1, tr-1\n                  \n          else:\n              answer = [\"Impossible\",]\n  \n          \n          \n          print (\"Case #\" + str(_t+1) + \":\")\n          for _i in answer:\n              print \"\".join(_i)\n      \n  \n ", "Program Length": 421, "Identifier Num": 16, "Replaced Identifiers": "fn:H,", "Query Times": 125, "Time Cost": 0.0607915202776591, "Type": "wir"}
{"Index": 35, "Original Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          fn = sys.argv[1]\n          if fn != '-':\n              f = open(fn)\n  \n      t = int(f.readline())\n      for _t in range(t):\n          X = int(f.readline())\n          cardsX = [[int(y) for y in f.readline().split()] for x in range(4)]\n          row = cardsX[X-1]\n          Y = int(f.readline())\n          cardsY = [[int(y) for y in f.readline().split()] for x in range(4)]\n          column = cardsY[Y-1]\n          card = [x for x in row if x in column]\n          if len(card) > 1:\n              answer = \"Bad magician!\"\n          elif len(card) == 0:\n              answer = \"Volunteer cheated!\"\n          else:\n              answer = str(card[0])\n          print (\"Case #\" + str(_t+1) + \": \" + answer)\n      \n  \n ", "Adversarial Code": " \n  if __name__ == \"__main__\":\n      f = sys.stdin\n      if len(sys.argv) >= 2:\n          end = sys.argv[1]\n          if end != '-':\n              f = open(end)\n  \n      t = int(f.readline())\n      for _t in range(t):\n          X = int(f.readline())\n          cardsX = [[int(y) for y in f.readline().split()] for x in range(4)]\n          row = cardsX[X-1]\n          Y = int(f.readline())\n          cardsY = [[int(y) for y in f.readline().split()] for x in range(4)]\n          column = cardsY[Y-1]\n          card = [x for x in row if x in column]\n          if len(card) > 1:\n              answer = \"Bad magician!\"\n          elif len(card) == 0:\n              answer = \"Volunteer cheated!\"\n          else:\n              answer = str(card[0])\n          print (\"Case #\" + str(_t+1) + \": \" + answer)\n      \n  \n ", "Program Length": 212, "Identifier Num": 14, "Replaced Identifiers": "fn:end,", "Query Times": 76, "Time Cost": 0.04924567937850952, "Type": "wir"}
{"Index": 36, "Original Code": null, "Adversarial Code": null, "Program Length": 456, "Identifier Num": 19, "Replaced Identifiers": null, "Query Times": 779, "Time Cost": 0.417033318678538, "Type": "0"}
{"Index": 37, "Original Code": null, "Adversarial Code": null, "Program Length": 155, "Identifier Num": 8, "Replaced Identifiers": null, "Query Times": 238, "Time Cost": 0.13155182600021362, "Type": "0"}
{"Index": 39, "Original Code": null, "Adversarial Code": null, "Program Length": 257, "Identifier Num": 6, "Replaced Identifiers": null, "Query Times": 204, "Time Cost": 0.13071165084838868, "Type": "0"}
{"Index": 41, "Original Code": null, "Adversarial Code": null, "Program Length": 187, "Identifier Num": 13, "Replaced Identifiers": null, "Query Times": 234, "Time Cost": 0.13597973982493083, "Type": "0"}
{"Index": 42, "Original Code": null, "Adversarial Code": null, "Program Length": 600, "Identifier Num": 24, "Replaced Identifiers": null, "Query Times": 773, "Time Cost": 0.4116228461265564, "Type": "0"}
{"Index": 43, "Original Code": null, "Adversarial Code": null, "Program Length": 343, "Identifier Num": 20, "Replaced Identifiers": null, "Query Times": 576, "Time Cost": 0.31289860010147097, "Type": "0"}
{"Index": 44, "Original Code": " \n  f = open(sys.argv[1])\n  T = int(f.readline())\n  for test in range(T):\n      R, C, M = map(int, f.readline().strip().split())\n      Rorig = R\n      Corig = C\n      impossible = False\n      grid = [['.' for i in range(C)] for j in range(R)]\n  \n      curr_coord = [0,0]\n      while M > 0 and not impossible:\n          if (C > R): # more columns - fill one in\n              num_mines_in_column = R\n              if M < R:\n                  num_mines_in_column = min(R - 2, M)\n              if num_mines_in_column <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_column):\n                  grid[curr_coord[0] + ii][curr_coord[1]] = '*'\n              C -= 1\n              curr_coord[1] += 1\n              M -= num_mines_in_column\n          else:\n              num_mines_in_row = C\n              if M < C:\n                  num_mines_in_row = min(C - 2, M)\n              if num_mines_in_row <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_row):\n                  grid[curr_coord[0]][curr_coord[1] + ii] = '*'\n              R -= 1\n              curr_coord[0] += 1\n              M -= num_mines_in_row\n  \n      print \"Case #%d:\" % (test + 1)\n      if impossible:\n          print \"Impossible\"\n      else:\n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == '.':\n                      if ii - 1 >= 0 and grid[ii-1][jj] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and grid[ii][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and ii - 1 >= 0 and grid[ii-1][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n  \n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == 'dirty':\n                      if ii + 1 < Rorig and grid[ii+1][jj] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and grid[ii][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and ii + 1 < Rorig and grid[ii+1][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      else:\n                          if ii != Rorig - 1 or jj != Corig - 1:\n                              impossible = True\n  \n          if impossible:\n              print \"Impossible\"\n          else:\n              grid[Rorig-1][Corig-1] = 'c'\n  \n              for ii in range(Rorig):\n                  print \" \".join([val for val in grid[ii]])\n  \n  \n ", "Adversarial Code": " \n  f = open(sys.argv[1])\n  T = int(f.readline())\n  for n_cases in range(T):\n      R, C, M = map(int, f.readline().strip().split())\n      Rorig = R\n      Corig = C\n      impossible = False\n      grid = [['.' for i in range(C)] for j in range(R)]\n  \n      curr_coord = [0,0]\n      while M > 0 and not impossible:\n          if (C > R): # more columns - fill one in\n              num_mines_in_column = R\n              if M < R:\n                  num_mines_in_column = min(R - 2, M)\n              if num_mines_in_column <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_column):\n                  grid[curr_coord[0] + ii][curr_coord[1]] = '*'\n              C -= 1\n              curr_coord[1] += 1\n              M -= num_mines_in_column\n          else:\n              num_mines_in_row = C\n              if M < C:\n                  num_mines_in_row = min(C - 2, M)\n              if num_mines_in_row <= 0:\n                  impossible = True\n                  break\n              for ii in range(num_mines_in_row):\n                  grid[curr_coord[0]][curr_coord[1] + ii] = '*'\n              R -= 1\n              curr_coord[0] += 1\n              M -= num_mines_in_row\n  \n      print \"Case #%d:\" % (n_cases + 1)\n      if impossible:\n          print \"Impossible\"\n      else:\n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == '.':\n                      if ii - 1 >= 0 and grid[ii-1][jj] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and grid[ii][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n                      elif jj - 1 >= 0 and ii - 1 >= 0 and grid[ii-1][jj-1] == '*':\n                          grid[ii][jj] = 'dirty'\n  \n          for ii in range(Rorig):\n              for jj in range(Corig):\n                  if grid[ii][jj] == 'dirty':\n                      if ii + 1 < Rorig and grid[ii+1][jj] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and grid[ii][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      elif jj + 1 < Corig and ii + 1 < Rorig and grid[ii+1][jj+1] == '.':\n                          grid[ii][jj] = '.'\n                      else:\n                          if ii != Rorig - 1 or jj != Corig - 1:\n                              impossible = True\n  \n          if impossible:\n              print \"Impossible\"\n          else:\n              grid[Rorig-1][Corig-1] = 'c'\n  \n              for ii in range(Rorig):\n                  print \" \".join([val for val in grid[ii]])\n  \n  \n ", "Program Length": 550, "Identifier Num": 17, "Replaced Identifiers": "test:n_cases,", "Query Times": 172, "Time Cost": 0.07613989114761352, "Type": "wir"}
{"Index": 45, "Original Code": " \n  f = open(sys.argv[1])\n  T = int(f.readline())\n  for test in range(T):\n      first_row_index = int(f.readline())\n      first_row = []\n      for ii in range(4):\n          if (ii + 1) == first_row_index:\n              first_row = f.readline().strip().split()\n          else:\n              f.readline()\n      second_row_index = int(f.readline())\n      second_row = []\n      for ii in range(4):\n          if (ii + 1) == second_row_index:\n              second_row = f.readline().strip().split()\n          else:\n              f.readline()\n      combined = [val for val in first_row if val in second_row]\n  \n      print \"Case #%d:\" % (test + 1), \"Bad magician!\" if len(combined) > 1 else \"Volunteer cheated!\" if len(combined) == 0 else combined[0]\n  \n  \n ", "Adversarial Code": " \n  f = open(sys.argv[1])\n  StopIteration = int(f.readline())\n  for test in range(StopIteration):\n      first_row_index = int(f.readline())\n      first_row = []\n      for ii in range(4):\n          if (ii + 1) == first_row_index:\n              first_row = f.readline().strip().split()\n          else:\n              f.readline()\n      second_row_index = int(f.readline())\n      second_row = []\n      for ii in range(4):\n          if (ii + 1) == second_row_index:\n              second_row = f.readline().strip().split()\n          else:\n              f.readline()\n      combined = [val for val in first_row if val in second_row]\n  \n      print \"Case #%d:\" % (test + 1), \"Bad magician!\" if len(combined) > 1 else \"Volunteer cheated!\" if len(combined) == 0 else combined[0]\n  \n  \n ", "Program Length": 179, "Identifier Num": 10, "Replaced Identifiers": "T:StopIteration,", "Query Times": 66, "Time Cost": 0.04733335574467977, "Type": "wir"}
{"Index": 46, "Original Code": null, "Adversarial Code": null, "Program Length": 436, "Identifier Num": 19, "Replaced Identifiers": null, "Query Times": 593, "Time Cost": 0.31281050443649294, "Type": "0"}
{"Index": 47, "Original Code": null, "Adversarial Code": null, "Program Length": 202, "Identifier Num": 13, "Replaced Identifiers": null, "Query Times": 389, "Time Cost": 0.20480626821517944, "Type": "0"}
{"Index": 49, "Original Code": " if len(sys.argv) == 1:\n      sys.stdin = open(\"A.in\")\n  else:\n      sys.stdin = open(sys.argv[1])\n  \n  def to_ints(s):\n      return map(int, s.split())\n  \n  def get_ints():\n      return to_ints(raw_input())\n  \n  n_cases = input()\n  \n  for case in xrange(1, n_cases + 1):\n      a_row, = get_ints()\n      a_layout = [get_ints() for _ in range(4)]\n      b_row, = get_ints()\n      b_layout = [get_ints() for _ in range(4)]\n  \n      poss = set(a_layout[a_row - 1])\n      poss.intersection_update(b_layout[b_row - 1])\n  \n      result = 'Bad magician!'\n  \n      if len(poss) == 0:\n          result = 'Volunteer cheated!'\n      elif len(poss) == 1:\n          result = poss.pop()\n  \n      print \"Case #%d: %s\" % (case, result)\n ", "Adversarial Code": " if len(readlines.argv) == 1:\n      readlines.answer1 = open(\"A.in\")\n  else:\n      readlines.answer1 = open(readlines.argv[1])\n  \n  def to_ints(s):\n      return map(int, s.split())\n  \n  def get_ints():\n      return to_ints(raw_input())\n  \n  all_grids = input()\n  \n  for case in xrange(1, all_grids + 1):\n      mines_cnt, = get_ints()\n      makeBoard0 = [get_ints() for CLICK in range(4)]\n      numTests, = get_ints()\n      new_board = [get_ints() for CLICK in range(4)]\n  \n      seen = set(makeBoard0[mines_cnt - 1])\n      seen.intersection_update(new_board[numTests - 1])\n  \n      StopIteration = 'Bad magician!'\n  \n      if len(seen) == 0:\n          StopIteration = 'Volunteer cheated!'\n      elif len(seen) == 1:\n          StopIteration = seen.pop()\n  \n      print \"Case #%d: %s\" % (case, StopIteration)\n ", "Program Length": 178, "Identifier Num": 14, "Replaced Identifiers": "n_cases:all_grids,stdin:answer1,a_layout:makeBoard0,b_layout:new_board,b_row:numTests,a_row:mines_cnt,poss:seen,sys:readlines,result:StopIteration,_:CLICK,", "Query Times": 335, "Time Cost": 0.17689013083775837, "Type": "wir"}
{"Index": 50, "Original Code": " \n  NEIGHBOURS = [\n      (-1, -1), (-1, 0), (-1, 1),\n      ( 0, -1),          ( 0, 1),\n      ( 1, -1), ( 1, 0), ( 1, 1),\n  ]\n  \n  MOVES = [(-1, 0), (1, 0), (0, 1), (0, -1)]\n  \n  def valid(size, location, changes):\n      y, x = location\n      for y1, x1 in changes:\n          y1 += y\n          x1 += x\n          if y1 < 0 or y1 >= size[0]:\n              continue\n          if x1 < 0 or x1 >= size[1]:\n              continue\n          yield (y1, x1)\n  \n  def click(size, grid, location):\n      y, x = location\n      if grid[y][x] is 0:\n          return None\n  \n      grid = [row[:] for row in grid]\n      grid[y][x] = 0\n  \n      for y, x in valid(size, location, NEIGHBOURS):\n          if grid[y][x]:\n              grid[y][x] = False\n  \n      return grid\n  \n  def sweep(R, C, M):\n      grid = [[True] * C for _ in range(R)]\n      size = (R, C)\n  \n      if M + 1 == R * C:\n          grid[0][0] = False\n          return grid, (0, 0)\n  \n      states = []\n      for y in range(R):\n          for x in range(C):\n              location = (y, x)\n              states.append((click(size, grid, location), location))\n  \n      while states:\n          grid, location = states.pop(0)\n  \n          mines_count = sum([sum(row) for row in grid])\n          if mines_count == M:\n              return grid, location\n  \n          if mines_count < M:\n              continue\n  \n          for new_location in valid(size, location, NEIGHBOURS):\n              new_grid = click(size, grid, new_location)\n              if new_grid:\n                  states.insert(0, (new_grid, new_location))\n  \n      return None\n  \n  def validate(size, grid, location):\n  \n      result = [row[:] for row in grid]\n  \n      y, x = location\n      result[y][x] = sum([\n          grid[y1][x1]\n          for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n      ])\n      assert result[y][x] == 0\n  \n      seen = set([location])\n      locations = set([location])\n  \n      while locations:\n          location = locations.pop()\n          for y, x in valid(size, location, NEIGHBOURS):\n              assert grid[y][x] is not True\n              result[y][x] = sum([\n                  grid[y1][x1]\n                  for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n              ])\n              if result[y][x] == 0 and (y, x) not in seen:\n                  locations.add((y, x))\n                  seen.add((y, x))\n  \n      for row in result:\n          for col in row:\n              assert col is not False\n  \n      for y, row in enumerate(result):\n          output = ''\n          for x, col in enumerate(row):\n              if col is True:\n                  output += '*'\n              else:\n                  output += str(col)\n          print output\n  \n  \n  def process(case, R, C, M):\n      result = sweep(R, C, M)\n  \n      print 'Case #%d:' % (case + 1)\n      if not result:\n          print 'Impossible'\n          return\n  \n      grid, location = result\n      for y, row in enumerate(grid):\n          output = ''\n          for x, col in enumerate(row):\n              if (y, x) == location:\n                  output += 'c'\n              elif col:\n                  output += '*'\n              else:\n                  output += '.'\n          print output\n  \n  \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for case in range(cases):\n          R, C, M = map(int, sys.stdin.readline().split())\n          process(case, R, C, M)\n  \n      return\n      for case in range(100):\n          R = random.randrange(51) + 1\n          C = random.randrange(51) + 1\n          M = random.randrange(R * C - 1) + 1\n          process(case * 100000 + M - 1, R, C, M)\n  \n  \n  if __name__ == '__main__':\n      main()\n ", "Adversarial Code": " \n  NEIGHBOURS = [\n      (-1, -1), (-1, 0), (-1, 1),\n      ( 0, -1),          ( 0, 1),\n      ( 1, -1), ( 1, 0), ( 1, 1),\n  ]\n  \n  MOVES = [(-1, 0), (1, 0), (0, 1), (0, -1)]\n  \n  def valid(size, TEST_CASES, changes):\n      y, x = TEST_CASES\n      for y1, x1 in changes:\n          y1 += y\n          x1 += x\n          if y1 < 0 or y1 >= size[0]:\n              continue\n          if x1 < 0 or x1 >= size[1]:\n              continue\n          yield (y1, x1)\n  \n  def click(size, True, TEST_CASES):\n      y, x = TEST_CASES\n      if True[y][x] is 0:\n          return None\n  \n      True = [row[:] for row in True]\n      True[y][x] = 0\n  \n      for y, x in valid(size, TEST_CASES, NEIGHBOURS):\n          if True[y][x]:\n              True[y][x] = False\n  \n      return True\n  \n  def sweep(R, C, M):\n      True = [[True] * C for _ in range(R)]\n      size = (R, C)\n  \n      if M + 1 == R * C:\n          True[0][0] = False\n          return True, (0, 0)\n  \n      states = []\n      for y in range(R):\n          for x in range(C):\n              TEST_CASES = (y, x)\n              states.append((click(size, True, TEST_CASES), TEST_CASES))\n  \n      while states:\n          True, TEST_CASES = states.pop(0)\n  \n          mines_count = sum([sum(row) for row in True])\n          if mines_count == M:\n              return True, TEST_CASES\n  \n          if mines_count < M:\n              continue\n  \n          for new_location in valid(size, TEST_CASES, NEIGHBOURS):\n              new_grid = click(size, True, new_location)\n              if new_grid:\n                  states.insert(0, (new_grid, new_location))\n  \n      return None\n  \n  def validate(size, True, TEST_CASES):\n  \n      result = [row[:] for row in True]\n  \n      y, x = TEST_CASES\n      result[y][x] = sum([\n          True[y1][x1]\n          for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n      ])\n      assert result[y][x] == 0\n  \n      seen = set([TEST_CASES])\n      locations = set([TEST_CASES])\n  \n      while locations:\n          TEST_CASES = locations.pop()\n          for y, x in valid(size, TEST_CASES, NEIGHBOURS):\n              assert True[y][x] is not True\n              result[y][x] = sum([\n                  True[y1][x1]\n                  for y1, x1 in valid(size, (y, x), NEIGHBOURS)\n              ])\n              if result[y][x] == 0 and (y, x) not in seen:\n                  locations.add((y, x))\n                  seen.add((y, x))\n  \n      for row in result:\n          for col in row:\n              assert col is not False\n  \n      for y, row in enumerate(result):\n          output = ''\n          for x, col in enumerate(row):\n              if col is True:\n                  output += '*'\n              else:\n                  output += str(col)\n          print output\n  \n  \n  def process(case, R, C, M):\n      result = sweep(R, C, M)\n  \n      print 'Case #%d:' % (case + 1)\n      if not result:\n          print 'Impossible'\n          return\n  \n      True, TEST_CASES = result\n      for y, row in enumerate(True):\n          output = ''\n          for x, col in enumerate(row):\n              if (y, x) == TEST_CASES:\n                  output += 'c'\n              elif col:\n                  output += '*'\n              else:\n                  output += '.'\n          print output\n  \n  \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for case in range(cases):\n          R, C, M = map(int, sys.stdin.readline().split())\n          process(case, R, C, M)\n  \n      return\n      for case in range(100):\n          R = random.randrange(51) + 1\n          C = random.randrange(51) + 1\n          M = random.randrange(R * C - 1) + 1\n          process(case * 100000 + M - 1, R, C, M)\n  \n  \n  if __name__ == '__main__':\n      main()\n ", "Program Length": 887, "Identifier Num": 24, "Replaced Identifiers": "grid:True,location:TEST_CASES,", "Query Times": 274, "Time Cost": 0.11703545252482096, "Type": "wir"}
{"Index": 51, "Original Code": " \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for case in range(cases):\n          row1 = int(sys.stdin.readline())\n          arrangement1 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen1 = set(arrangement1[row1 - 1])\n  \n          row2 = int(sys.stdin.readline())\n          arrangement2 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen2 = set(arrangement2[row2 - 1])\n  \n          chosen = chosen1 & chosen2\n  \n          if not chosen:\n              print 'Case #%d: Volunteer cheated!' % (case + 1)\n          elif len(chosen) != 1:\n              print 'Case #%d: Bad magician!' % (case + 1)\n          else:\n              print 'Case #%d: %d' % (case + 1, chosen.pop())\n  \n  if __name__ == '__main__':\n      main()\n ", "Adversarial Code": " \n  \n  def main():\n      cases = int(sys.stdin.readline())\n  \n      for Solver in range(cases):\n          row1 = int(sys.stdin.readline())\n          arrangement1 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen1 = set(arrangement1[row1 - 1])\n  \n          row2 = int(sys.stdin.readline())\n          arrangement2 = [\n              map(int, sys.stdin.readline().split())\n              for _ in range(4)\n          ]\n          chosen2 = set(arrangement2[row2 - 1])\n  \n          chosen = chosen1 & chosen2\n  \n          if not chosen:\n              print 'Case #%d: Volunteer cheated!' % (Solver + 1)\n          elif len(chosen) != 1:\n              print 'Case #%d: Bad magician!' % (Solver + 1)\n          else:\n              print 'Case #%d: %d' % (Solver + 1, chosen.pop())\n  \n  if __name__ == '__main__':\n      main()\n ", "Program Length": 182, "Identifier Num": 11, "Replaced Identifiers": "case:Solver,", "Query Times": 57, "Time Cost": 0.04940223693847656, "Type": "wir"}
{"Index": 52, "Original Code": " \n  T = int(raw_input())\n  \n  def generate(R, C, a, sw):\n      if sw:\n          R, C = C, R\n      res = [['*']*C for i in xrange(R)]\n      for i in xrange(len(a)):\n          for j in xrange(a[i]):\n              if sw:\n                  res[j][i] = '.'\n              else:\n                  res[i][j] = '.'\n      res[0][0] = 'c'\n      return str(res)[2:-2].replace(' ', '').replace(\"'\",'').replace('[', '').replace('],','\n').replace(',', '')\n  \n  \n  def solveEq(k, s, x1):\n      if 2*(x1 + k - 2) > s or k*x1 < s:\n          return None\n      r = [0]*k\n      r[0] = r[1] = x1\n      s -= 2*x1\n      for i in xrange(k-2, 0, -1):\n          t = min(x1, s - 2*i + 2)\n          r[k-i] = t\n          s -= t\n      return r\n  \n  def solve(R, C, M):\n      S = R*C\n      nm = S - M\n      if R == 1 or C == 1:\n          if R == 1:\n              return '*'*M + '.'*(S-M-1) + 'c'\n          else:\n              return '*\n'*M + '.\n'*(S-M-1) + 'c'\n      else:\n          sw = False\n          if R > C:\n              R, C = C, R\n              sw = True\n          if nm == 2 or nm == 3 or nm == 5 or nm == 7 or (R == 2 and nm%2 == 1 and nm > 1):\n              return \"Impossible\"\n          if nm == 1:\n              return generate(R, C, [1], sw)\n          for k in xrange(2, R+1):\n              for x1 in xrange(2, C+1):\n                  r = solveEq(k, nm, x1)\n                  if r != None:\n                      return generate(R, C, r, sw)\n          return \"Something wrong\"\n  \n  for z in xrange(T):\n      c, f, x = map(int, raw_input().split())\n      print \"Case #%d:\n%s\" % (z+1, solve(c, f, x))\n ", "Adversarial Code": " \n  T = int(raw_input())\n  \n  def generate(R, C, a, sw):\n      if sw:\n          R, C = C, R\n      res = [['*']*C for i in xrange(R)]\n      for i in xrange(len(a)):\n          for j in xrange(a[i]):\n              if sw:\n                  res[j][i] = '.'\n              else:\n                  res[i][j] = '.'\n      res[0][0] = 'c'\n      return str(res)[2:-2].replace(' ', '').replace(\"'\",'').replace('[', '').replace('],','\n').replace(',', '')\n  \n  \n  def solveEq(k, s, problem_output):\n      if 2*(problem_output + k - 2) > s or k*problem_output < s:\n          return None\n      r = [0]*k\n      r[0] = r[1] = problem_output\n      s -= 2*problem_output\n      for i in xrange(k-2, 0, -1):\n          t = min(problem_output, s - 2*i + 2)\n          r[k-i] = t\n          s -= t\n      return r\n  \n  def solve(R, C, M):\n      S = R*C\n      nm = S - M\n      if R == 1 or C == 1:\n          if R == 1:\n              return '*'*M + '.'*(S-M-1) + 'c'\n          else:\n              return '*\n'*M + '.\n'*(S-M-1) + 'c'\n      else:\n          sw = False\n          if R > C:\n              R, C = C, R\n              sw = True\n          if nm == 2 or nm == 3 or nm == 5 or nm == 7 or (R == 2 and nm%2 == 1 and nm > 1):\n              return \"Impossible\"\n          if nm == 1:\n              return generate(R, C, [1], sw)\n          for k in xrange(2, R+1):\n              for problem_output in xrange(2, C+1):\n                  r = solveEq(k, nm, problem_output)\n                  if r != None:\n                      return generate(R, C, r, sw)\n          return \"Something wrong\"\n  \n  for z in xrange(T):\n      c, f, x = map(int, raw_input().split())\n      print \"Case #%d:\n%s\" % (z+1, solve(c, f, x))\n ", "Program Length": 475, "Identifier Num": 23, "Replaced Identifiers": "x1:problem_output,", "Query Times": 148, "Time Cost": 0.06575496594111124, "Type": "wir"}
{"Index": 53, "Original Code": "T = int(raw_input())\n  \n  def readSq(n):\n      res = []\n      for i in xrange(n):\n          res.append(set(map(int, raw_input().split())))\n      return res\n  \n  def solve():\n      a1 = int(raw_input())\n      s1 = readSq(4)\n      a2 = int(raw_input())\n      s2 = readSq(4)\n      ans = s1[a1-1] & s2[a2-1]\n      if len(ans) == 0:\n          return \"Volunteer cheated!\"\n      if len(ans) > 1:\n          return \"Bad magician!\"\n      return str(list(ans)[0])\n  \n  for z in xrange(T):\n      print \"Case #%d: %s\" % (z+1, solve())\n ", "Adversarial Code": "case_index = int(raw_input())\n  \n  def readSq(n):\n      res = []\n      for i in xrange(n):\n          res.append(set(map(int, raw_input().split())))\n      return res\n  \n  def solve():\n      a1 = int(raw_input())\n      s1 = readSq(4)\n      a2 = int(raw_input())\n      s2 = readSq(4)\n      ans = s1[a1-1] & s2[a2-1]\n      if len(ans) == 0:\n          return \"Volunteer cheated!\"\n      if len(ans) > 1:\n          return \"Bad magician!\"\n      return str(list(ans)[0])\n  \n  for z in xrange(case_index):\n      print \"Case #%d: %s\" % (z+1, solve())\n ", "Program Length": 147, "Identifier Num": 12, "Replaced Identifiers": "T:case_index,", "Query Times": 55, "Time Cost": 0.04576410452524821, "Type": "wir"}
{"Index": 54, "Original Code": " \n  T = int(input())\n  \n  for n in range(1, T+1):\n      print(\"Case #%d:\" % n)\n      (R, C, M) = (int(x) for x in input().split())\n      dots = R*C - M\n      if M == 0:\n          print(\"\n\".join([\"c\"+(C-1)*\".\"] + (R-1)*[C*\".\"]))\n      elif dots == 0:\n          print(\"Impossible\")\n      elif R == 1:\n          assert C - M > 0\n          print(\"c\"+(C-M-1)*\".\"+M*\"*\")\n      elif C == 1:\n          assert R - M > 0\n          print(\"c\n\"+(R-M-1)*\".\n\"+M*\"*\n\", end='')\n      elif dots == 1:\n          print(\"\n\".join([\"c\"+ (C-1)*\"*\"] + (R-1)*[C*\"*\"]))\n      elif dots > 3:\n          if (dots == 5) or (dots == 7):\n              print(\"Impossible\")\n              continue\n          if (R == 2) or (C == 2):\n              if dots%2 != 0 :\n                  print(\"Impossible\")\n                  continue\n              elif R == 2:\n                  l = int(dots/2)\n                  print(\"c\"+(l-1)*\".\"+(C-l)*\"*\")\n                  print(l*\".\"+(C-l)*\"*\")\n                  continue\n              elif C == 2:\n                  l = int(dots/2)\n                  print(\"c.\")\n                  print((l-1)*\"..\n\", end='')\n                  print(int(M/2)*\"**\n\", end='')\n                  continue\n          (lines, extra) = divmod(dots, C)\n          temp = []\n          if (lines >= 2) and (extra != 1):\n              temp.append(\"c\"+(C-1)*\".\")\n              temp.extend((lines-1)*[C*\".\"])\n              temp.append(extra*\".\"+(C-extra)*\"*\")\n              temp.extend((R-lines-1)*[C*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif (lines > 2) and (extra == 1):\n              temp.append(\"c\"+(C-1)*\".\")\n              temp.extend((lines-2)*[C*\".\"])\n              temp.append((C-1)*\".\"+\"*\")\n              temp.append(\"..\"+ (C-2)*\"*\")\n              temp.extend((R-lines-1)*[C*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif (lines == 2) and (extra == 1):\n              temp.append(\"c\"+(C-2)*\".\"+\"*\")\n              temp.append((C-1)*\".\"+\"*\")\n              temp.append(3*\".\"+(C-3)*\"*\")\n              temp.extend((R-3)*[C*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif lines < 2:\n              (l, rem) = divmod(dots, 2)\n              if rem == 1:\n                  l -= 1\n                  rem += 2\n              temp.append(\"c\"+(l-1)*\".\"+(C-l)*\"*\")\n              temp.append(l*\".\"+(C-l)*\"*\")\n              temp.append(rem*\".\"+(C-rem)*\"*\")\n              temp.extend( (R-3)*[ C*\"*\" ])\n              print(\"\n\".join(temp))\n              continue\n      else:\n          print(\"Impossible\")\n  \n ", "Adversarial Code": " \n  printed_sol = int(input())\n  \n  for n in range(1, printed_sol+1):\n      print(\"Case #%d:\" % n)\n      (R, process_case, M) = (int(x) for x in input().split())\n      dots = R*process_case - M\n      if M == 0:\n          print(\"\n\".join([\"c\"+(process_case-1)*\".\"] + (R-1)*[process_case*\".\"]))\n      elif dots == 0:\n          print(\"Impossible\")\n      elif R == 1:\n          assert process_case - M > 0\n          print(\"c\"+(process_case-M-1)*\".\"+M*\"*\")\n      elif process_case == 1:\n          assert R - M > 0\n          print(\"c\n\"+(R-M-1)*\".\n\"+M*\"*\n\", a_layout='')\n      elif dots == 1:\n          print(\"\n\".join([\"c\"+ (process_case-1)*\"*\"] + (R-1)*[process_case*\"*\"]))\n      elif dots > 3:\n          if (dots == 5) or (dots == 7):\n              print(\"Impossible\")\n              continue\n          if (R == 2) or (process_case == 2):\n              if dots%2 != 0 :\n                  print(\"Impossible\")\n                  continue\n              elif R == 2:\n                  l = int(dots/2)\n                  print(\"c\"+(l-1)*\".\"+(process_case-l)*\"*\")\n                  print(l*\".\"+(process_case-l)*\"*\")\n                  continue\n              elif process_case == 2:\n                  l = int(dots/2)\n                  print(\"c.\")\n                  print((l-1)*\"..\n\", a_layout='')\n                  print(int(M/2)*\"**\n\", a_layout='')\n                  continue\n          (lines, extra) = divmod(dots, process_case)\n          temp = []\n          if (lines >= 2) and (extra != 1):\n              temp.append(\"c\"+(process_case-1)*\".\")\n              temp.extend((lines-1)*[process_case*\".\"])\n              temp.append(extra*\".\"+(process_case-extra)*\"*\")\n              temp.extend((R-lines-1)*[process_case*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif (lines > 2) and (extra == 1):\n              temp.append(\"c\"+(process_case-1)*\".\")\n              temp.extend((lines-2)*[process_case*\".\"])\n              temp.append((process_case-1)*\".\"+\"*\")\n              temp.append(\"..\"+ (process_case-2)*\"*\")\n              temp.extend((R-lines-1)*[process_case*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif (lines == 2) and (extra == 1):\n              temp.append(\"c\"+(process_case-2)*\".\"+\"*\")\n              temp.append((process_case-1)*\".\"+\"*\")\n              temp.append(3*\".\"+(process_case-3)*\"*\")\n              temp.extend((R-3)*[process_case*\"*\"])\n              print(\"\n\".join(temp))\n              continue\n          elif lines < 2:\n              (l, rem) = divmod(dots, 2)\n              if rem == 1:\n                  l -= 1\n                  rem += 2\n              temp.append(\"c\"+(l-1)*\".\"+(process_case-l)*\"*\")\n              temp.append(l*\".\"+(process_case-l)*\"*\")\n              temp.append(rem*\".\"+(process_case-rem)*\"*\")\n              temp.extend( (R-3)*[ process_case*\"*\" ])\n              print(\"\n\".join(temp))\n              continue\n      else:\n          print(\"Impossible\")\n  \n ", "Program Length": 742, "Identifier Num": 10, "Replaced Identifiers": "end:a_layout,T:printed_sol,l:l,temp:temp,C:process_case,", "Query Times": 259, "Time Cost": 0.1359469493230184, "Type": "wir"}
{"Index": 55, "Original Code": " ncases = int(input())\n  \n  for n in range(1, ncases+1):\n      row = int(input())\n      for m in range(1, 5):\n          if m == row:\n              r1list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              tmp = input()\n      row = int(input())\n      for m in range(1,5):\n          if m == row:\n              r2list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              tmp = input()\n      nset = set(r1list) & set(r2list)\n      if len(nset) == 1:\n          print(\"Case #%d:\" % n, nset.pop())\n      elif len(nset) > 1:\n          print(\"Case #%d:\" % n, \"Bad magician!\")\n      else:\n          print(\"Case #%d:\" % n, \"Volunteer cheated!\")\n ", "Adversarial Code": " ncases = int(input())\n  \n  for n in range(1, ncases+1):\n      row = int(input())\n      for m in range(1, 5):\n          if m == row:\n              r1list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              solve_inputs = input()\n      row = int(input())\n      for m in range(1,5):\n          if m == row:\n              r2list = [int(x) for x in input().split()]\n              assert len(r1list) == 4\n          else:\n              solve_inputs = input()\n      nset = set(r1list) & set(r2list)\n      if len(nset) == 1:\n          print(\"Case #%d:\" % n, nset.pop())\n      elif len(nset) > 1:\n          print(\"Case #%d:\" % n, \"Bad magician!\")\n      else:\n          print(\"Case #%d:\" % n, \"Volunteer cheated!\")\n ", "Program Length": 187, "Identifier Num": 9, "Replaced Identifiers": "ncases:ncases,tmp:solve_inputs,", "Query Times": 93, "Time Cost": 0.06877297163009644, "Type": "wir"}
{"Index": 57, "Original Code": " \n  \n  def read_row(fin, n):\n      rows = [set(map(int, fin.readline().strip().split())) for i in xrange(4)]\n      return rows[n-1]\n  \n  def solve(rowa, rowb):\n      both = rowa & rowb\n      if len(both) == 1:\n          return list(both)[0]\n      elif len(both) > 1:\n          return \"Bad magician!\"\n      elif not both:\n          return \"Volunteer cheated!\"\n  \n  if __name__ == '__main__':\n      fin = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n      fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n      with fin, fout:\n          T = int(fin.readline())\n          for case in xrange(1, T+1):\n              n = int(fin.readline())\n              rowa = read_row(fin, n)\n              n = int(fin.readline())\n              rowb = read_row(fin, n)\n              soln = solve(rowa, rowb)\n              print >> fout, \"Case #{0}: {1}\".format(case, soln)\n  \n ", "Adversarial Code": " \n  \n  def read_row(fin, case_number):\n      rows = [set(map(int, fin.readline().strip().split())) for i in xrange(4)]\n      return rows[case_number-1]\n  \n  def solve(rowa, rowb):\n      both = rowa & rowb\n      if len(both) == 1:\n          return list(both)[0]\n      elif len(both) > 1:\n          return \"Bad magician!\"\n      elif not both:\n          return \"Volunteer cheated!\"\n  \n  if __name__ == '__main__':\n      fin = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n      fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n      with fin, fout:\n          problem_input = int(fin.readline())\n          for case in xrange(1, problem_input+1):\n              case_number = int(fin.readline())\n              rowa = read_row(fin, case_number)\n              case_number = int(fin.readline())\n              rowb = read_row(fin, case_number)\n              soln = solve(rowa, rowb)\n              print >> fout, \"Case #{0}: {1}\".format(case, soln)\n  \n ", "Program Length": 230, "Identifier Num": 13, "Replaced Identifiers": "T:problem_input,n:case_number,", "Query Times": 104, "Time Cost": 0.06571073134740193, "Type": "wir"}
{"Index": 58, "Original Code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n   \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      RR, CC, M = map(int, fin.readline().split())\n      R, C = None, None\n      blocks = RR*CC - M\n      inverse = False\n      if RR > CC:\n          inverse = True\n          R, C = CC, RR\n      else:\n          R, C = RR, CC\n      result = None\n      if R == 1:\n          result = [('.' * blocks) + ('*' * M)]\n      elif R == 2:\n          if blocks == 1:\n              result = ['.' + ('*' * (C-1)), '*' * C]\n          elif blocks % 2 == 0 and blocks != 2:\n              cc = blocks // 2\n              result = [('.' * cc) + ('*' * (C - cc)), ('.' * cc) + ('*' * (C - cc))] \n          else:\n              result = None\n      else:\n          if blocks == 1:\n              result = ['*' * C] * R\n          elif blocks == 4:\n              result = ['..' + (C-2)*'*']*2\n              result += ['*'*C] * (R-2)\n          elif blocks == 6:\n              result = ['...' + (C-3)*'*']*2\n              result += ['*'*C] * (R-2)\n          for rows in range(3, R+1):\n              for columns in range(rows, C+1):\n                  size = rows * columns\n                  if size - blocks >= 0:\n                      if size - blocks <= columns - 2: \n                          result = []\n                          for r in range(rows):\n                              if r < rows - 1:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              else:\n                                  cc = columns - (size - blocks)\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      elif size - blocks == columns - 1 and rows >= 4:\n                          result = []\n                          for r in range(rows):\n                              if r < rows - 2:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              elif r == rows - 2:\n                                  cc = columns - 1\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                              else:\n                                  cc = 2\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      \n  \n  \n  \n      print(\"Case #%d: \" % (case))\n      if result is None:\n          debug('impossible', blocks, RR, CC)\n          print(\"Impossible\")\n      else:\n          mines = 0\n          for r in range(RR):\n              row = ''\n              for c in range(CC):\n                  rr, cc = r, c\n                  if inverse:\n                      rr, cc = c, r\n                  if rr == 0 and cc == 0:\n                      row += 'c'\n                  else:\n                      row += result[rr][cc]\n                      if result[rr][cc] == '*':\n                          mines += 1\n              print(row)\n          if mines != M:\n              raise Exception(\"%d != %d %d x %d\" % (mines, M, RR, CC))\n              \n  \n  \n ", "Adversarial Code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n   \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  clickCol = sys.stdin\n  T = int(clickCol.readline())\n  for case in range(1, T + 1):\n      RR, CC, M = map(int, clickCol.readline().split())\n      R, C = None, None\n      blocks = RR*CC - M\n      inverse = False\n      if RR > CC:\n          inverse = True\n          R, C = CC, RR\n      else:\n          R, C = RR, CC\n      result = None\n      if R == 1:\n          result = [('.' * blocks) + ('*' * M)]\n      elif R == 2:\n          if blocks == 1:\n              result = ['.' + ('*' * (C-1)), '*' * C]\n          elif blocks % 2 == 0 and blocks != 2:\n              cc = blocks // 2\n              result = [('.' * cc) + ('*' * (C - cc)), ('.' * cc) + ('*' * (C - cc))] \n          else:\n              result = None\n      else:\n          if blocks == 1:\n              result = ['*' * C] * R\n          elif blocks == 4:\n              result = ['..' + (C-2)*'*']*2\n              result += ['*'*C] * (R-2)\n          elif blocks == 6:\n              result = ['...' + (C-3)*'*']*2\n              result += ['*'*C] * (R-2)\n          for rows in range(3, R+1):\n              for columns in range(rows, C+1):\n                  size = rows * columns\n                  if size - blocks >= 0:\n                      if size - blocks <= columns - 2: \n                          result = []\n                          for r in range(rows):\n                              if r < rows - 1:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              else:\n                                  cc = columns - (size - blocks)\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      elif size - blocks == columns - 1 and rows >= 4:\n                          result = []\n                          for r in range(rows):\n                              if r < rows - 2:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              elif r == rows - 2:\n                                  cc = columns - 1\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                              else:\n                                  cc = 2\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      \n  \n  \n  \n      print(\"Case #%d: \" % (case))\n      if result is None:\n          debug('impossible', blocks, RR, CC)\n          print(\"Impossible\")\n      else:\n          mines = 0\n          for r in range(RR):\n              row = ''\n              for c in range(CC):\n                  rr, cc = r, c\n                  if inverse:\n                      rr, cc = c, r\n                  if rr == 0 and cc == 0:\n                      row += 'c'\n                  else:\n                      row += result[rr][cc]\n                      if result[rr][cc] == '*':\n                          mines += 1\n              print(row)\n          if mines != M:\n              raise Exception(\"%d != %d %d x %d\" % (mines, M, RR, CC))\n              \n  \n  \n ", "Program Length": 685, "Identifier Num": 17, "Replaced Identifiers": "fin:clickCol,", "Query Times": 186, "Time Cost": 0.07756948868433634, "Type": "wir"}
{"Index": 59, "Original Code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      answer1 = int(fin.readline())\n      rows1 = []\n      for i in range(4):\n          rows1.append(set(map(int, fin.readline().split())))\n      answer2 = int(fin.readline())\n      rows2 = []\n      for i in range(4):\n          rows2.append(set(map(int, fin.readline().split())))\n  \n      possibilities1 = rows1[answer1-1]\n      possibilities2 = rows2[answer2-1]\n  \n      numbers = possibilities1.intersection(possibilities2)\n      result = None\n      if len(numbers) == 1:\n          result = list(numbers)[0]\n      elif len(numbers) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n  \n  \n      print(\"Case #%d: %s\" % (case, result))\n  \n ", "Adversarial Code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  solveit = sys.stdin\n  T = int(solveit.readline())\n  for case in range(1, T + 1):\n      answer1 = int(solveit.readline())\n      rows1 = []\n      for i in range(4):\n          rows1.append(set(map(int, solveit.readline().split())))\n      answer2 = int(solveit.readline())\n      rows2 = []\n      for i in range(4):\n          rows2.append(set(map(int, solveit.readline().split())))\n  \n      possibilities1 = rows1[answer1-1]\n      possibilities2 = rows2[answer2-1]\n  \n      numbers = possibilities1.intersection(possibilities2)\n      result = None\n      if len(numbers) == 1:\n          result = list(numbers)[0]\n      elif len(numbers) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n  \n  \n      print(\"Case #%d: %s\" % (case, result))\n  \n ", "Program Length": 203, "Identifier Num": 13, "Replaced Identifiers": "fin:solveit,", "Query Times": 68, "Time Cost": 0.0473923921585083, "Type": "wir"}
{"Index": 61, "Original Code": " \n  def read_row():\n  \ta = int(sys.stdin.readline().strip())\n  \tfor j in range(a - 1):\n  \t\tsys.stdin.readline()\n  \tread_set = set(sys.stdin.readline().strip().split(\" \"))\n  \tfor j in range(5 - a - 1):\n  \t\tsys.stdin.readline()\n  \t\t\n  \treturn read_set\n  \n  \n  t = int(sys.stdin.readline().strip())\n  \n  for i in range(t):\n  \tprint \"Case #\" + str(i + 1) + \":\",\n  \n  \tset1 = read_row()\n  \tset2 = read_row()\n  \t\n  \tintersect = set1.intersection(set2)\n  \t\n  \tif 1 == len(intersect):\n  \t\tprint intersect.pop()\n  \telif 0 == len(intersect):\n  \t\tprint \"Volunteer cheated!\"\n  \telse:\n  \t\tprint \"Bad magician!\"\n ", "Adversarial Code": " \n  def read_row():\n  \tshowCase = int(sys.stdin.readline().strip())\n  \tfor parse_single in range(showCase - 1):\n  \t\tsys.stdin.readline()\n  \tread_set = set(sys.stdin.readline().strip().split(\" \"))\n  \tfor parse_single in range(5 - showCase - 1):\n  \t\tsys.stdin.readline()\n  \t\t\n  \treturn read_set\n  \n  \n  fi = int(sys.stdin.readline().strip())\n  \n  for i in range(fi):\n  \tprint \"Case #\" + str(i + 1) + \":\",\n  \n  \tStopIteration = read_row()\n  \tset2 = read_row()\n  \t\n  \tintersect = StopIteration.intersection(set2)\n  \t\n  \tif 1 == len(intersect):\n  \t\tprint intersect.pop()\n  \telif 0 == len(intersect):\n  \t\tprint \"Volunteer cheated!\"\n  \telse:\n  \t\tprint \"Bad magician!\"\n ", "Program Length": 162, "Identifier Num": 9, "Replaced Identifiers": "set1:StopIteration,j:parse_single,t:fi,a:showCase,", "Query Times": 143, "Time Cost": 0.08731167713801066, "Type": "wir"}
{"Index": 62, "Original Code": null, "Adversarial Code": null, "Program Length": 835, "Identifier Num": 24, "Replaced Identifiers": null, "Query Times": 1010, "Time Cost": 0.5970701575279236, "Type": "0"}
{"Index": 63, "Original Code": null, "Adversarial Code": null, "Program Length": 363, "Identifier Num": 21, "Replaced Identifiers": null, "Query Times": 647, "Time Cost": 0.35464537938435875, "Type": "0"}
{"Index": 65, "Original Code": " \n  \n  \n  def read_grid(f):\n  \treturn [\n  \t\t[int(x) for x in line.split()]\n  \t\tfor line in [f.readline() for _ in range(4)]\n  \t]\n  \n  def read_case(f):\n  \tanswer1 = int(f.readline())\n  \tgrid1 = read_grid(f)\n  \tanswer2 = int(f.readline())\n  \tgrid2 = read_grid(f)\n  \treturn (grid1[answer1 - 1], grid2[answer2 - 1])\n  \n  \n  def solve(r1, r2):\n  \tres = set(r1) & set(r2)\n  \tif len(res) == 0:\n  \t\treturn 'Volunteer cheated!'\n  \tif len(res) == 1:\n  \t\treturn list(res)[0]\n  \treturn 'Bad magician!'\n  \n  \n  \n  def main():\n  \tfn = sys.argv[1]\n  \twith open(fn, encoding='utf-8') as f:\n  \t\tncases = int(f.readline())\n  \t\tfor case in range(1, ncases + 1):\n  \t\t\trow1, row2 = read_case(f)\n  \t\t\tsolution = solve(row1, row2)\n  \t\t\tprint('Case #{}: {}'.format(case, solution))\n  \n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Adversarial Code": " \n  \n  \n  def read_grid(get_max_array_on_index):\n  \treturn [\n  \t\t[int(x) for x in case_inputs.split()]\n  \t\tfor case_inputs in [get_max_array_on_index.readline() for _ in range(4)]\n  \t]\n  \n  def read_case(get_max_array_on_index):\n  \tanswer1 = int(get_max_array_on_index.readline())\n  \tgrid1 = read_grid(get_max_array_on_index)\n  \tanswer2 = int(get_max_array_on_index.readline())\n  \tgrid2 = read_grid(get_max_array_on_index)\n  \treturn (grid1[answer1 - 1], grid2[answer2 - 1])\n  \n  \n  def solve(r1, r2):\n  \tres = set(r1) & set(r2)\n  \tif len(res) == 0:\n  \t\treturn 'Volunteer cheated!'\n  \tif len(res) == 1:\n  \t\treturn list(res)[0]\n  \treturn 'Bad magician!'\n  \n  \n  \n  def main():\n  \tfn = sys.argv[1]\n  \twith open(fn, encoding='utf-8') as get_max_array_on_index:\n  \t\tnum_of_cases = int(get_max_array_on_index.readline())\n  \t\tfor inputFileName in range(1, num_of_cases + 1):\n  \t\t\tclickRow, row2 = read_case(get_max_array_on_index)\n  \t\t\tsolution = solve(clickRow, row2)\n  \t\t\tprint('Case #{}: {}'.format(inputFileName, solution))\n  \n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Program Length": 223, "Identifier Num": 21, "Replaced Identifiers": "f:get_max_array_on_index,case:inputFileName,row2:row2,ncases:num_of_cases,row1:clickRow,line:case_inputs,", "Query Times": 227, "Time Cost": 0.12860826253890992, "Type": "wir"}
{"Index": 66, "Original Code": " \n  lines = [line.strip() for line in open(sys.argv[1])]\n  count = int(lines[0])\n  \n  for i in xrange(count):\n      R,C,M = map(int, lines[i+1].split())\n      print \"Case #%s:\" % (i+1)\n  \n      w = max(R,C)\n      h = min(R,C)\n      X = R*C - M\n      assert X > 0\n  \n      if X == 1:\n          rows = ['c' + ('*' * (w-1))] + (h-1) * ['*' * w]\n      elif h == 1:\n          rows = ['c' + '.' * (X-1) + '*' * M]\n      elif X == 4:\n              rows = [\n                  'c.' + '*' * (w-2),\n                  '..' + '*' * (w-2),\n              ] + ['*' * w] * (h-2)\n      elif h == 2:\n          if X%2 == 1 or X == 2:\n              rows = None\n          else:\n              rows = [\n                  'c' + '.' * (X/2-1) + '*' * (M/2),\n                  '.' + '.' * (X/2-1) + '*' * (M/2)\n              ]\n      elif X <= 5 or X == 7:\n          rows = None\n  \n      elif X%2 == 0 and X <= w*2:\n          r = X/2\n          rows = [\n              'c' + '.' * (r - 1) + '*' * (w-r),\n                    '.' * r       + '*' * (w-r),\n          ] + ['*' * w] * (h-2)\n  \n      elif X <= w*3 and (X % 3) != 1:\n          n = (X+1) / 3\n          t = X - 2*n\n          rows = [\n              'c' + '.' * (n-1) + '*' * (w-n),\n                    '.' * n     + '*' * (w-n),\n                    '.' * t     + '*' * (w-t)\n          ] + ['*' * w] * (h-3)\n      else:\n          n = X / w\n          t = X % w\n          if t == 1:\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-2)\n                  +   ['.' * (w-1) + '*']\n                  +   ['..' + '*' * (w-2)]\n                  +   ['*' * w] * (h - n - 1)\n              )\n          else:\n              k = 1 if t == 0 else 0\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-1)\n                  +   ['.' * t + '*' * (w-t)] * (1 - k)\n                  +   ['*' * w] * (h - n - 1 + k)\n              )\n  \n      if rows:\n          if R > C:\n              rows = [\"\".join(row[i] for row in rows) for i in xrange(R)]\n  \n          for row in rows:\n              print row\n  \n          assert len(rows) == R\n          assert len(rows[0]) == C\n          assert sum(1 for row in rows for col in row if col == '*') == M\n  \n      else:\n          print \"Impossible\"\n  \n ", "Adversarial Code": " \n  lines = [num_of_cases.strip() for num_of_cases in open(sys.argv[1])]\n  count = int(lines[0])\n  \n  for i in xrange(count):\n      R,C,M = map(int, lines[i+1].split())\n      print \"Case #%s:\" % (i+1)\n  \n      w = max(R,C)\n      h = min(R,C)\n      X = R*C - M\n      assert X > 0\n  \n      if X == 1:\n          rows = ['c' + ('*' * (w-1))] + (h-1) * ['*' * w]\n      elif h == 1:\n          rows = ['c' + '.' * (X-1) + '*' * M]\n      elif X == 4:\n              rows = [\n                  'c.' + '*' * (w-2),\n                  '..' + '*' * (w-2),\n              ] + ['*' * w] * (h-2)\n      elif h == 2:\n          if X%2 == 1 or X == 2:\n              rows = None\n          else:\n              rows = [\n                  'c' + '.' * (X/2-1) + '*' * (M/2),\n                  '.' + '.' * (X/2-1) + '*' * (M/2)\n              ]\n      elif X <= 5 or X == 7:\n          rows = None\n  \n      elif X%2 == 0 and X <= w*2:\n          r = X/2\n          rows = [\n              'c' + '.' * (r - 1) + '*' * (w-r),\n                    '.' * r       + '*' * (w-r),\n          ] + ['*' * w] * (h-2)\n  \n      elif X <= w*3 and (X % 3) != 1:\n          n = (X+1) / 3\n          t = X - 2*n\n          rows = [\n              'c' + '.' * (n-1) + '*' * (w-n),\n                    '.' * n     + '*' * (w-n),\n                    '.' * t     + '*' * (w-t)\n          ] + ['*' * w] * (h-3)\n      else:\n          n = X / w\n          t = X % w\n          if t == 1:\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-2)\n                  +   ['.' * (w-1) + '*']\n                  +   ['..' + '*' * (w-2)]\n                  +   ['*' * w] * (h - n - 1)\n              )\n          else:\n              k = 1 if t == 0 else 0\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-1)\n                  +   ['.' * t + '*' * (w-t)] * (1 - k)\n                  +   ['*' * w] * (h - n - 1 + k)\n              )\n  \n      if rows:\n          if R > C:\n              rows = [\"\".join(row[i] for row in rows) for i in xrange(R)]\n  \n          for row in rows:\n              print row\n  \n          assert len(rows) == R\n          assert len(rows[0]) == C\n          assert sum(1 for row in rows for col in row if col == '*') == M\n  \n      else:\n          print \"Impossible\"\n  \n ", "Program Length": 652, "Identifier Num": 14, "Replaced Identifiers": "line:num_of_cases,", "Query Times": 163, "Time Cost": 0.07367979685465495, "Type": "wir"}
{"Index": 67, "Original Code": " \n  \n  lines = [map(int, line.strip().split(\" \")) for line in open(sys.argv[1]).readlines()]\n  [count] = lines[0]\n  assert count * 10 + 1 == len(lines)\n  \n  for i in xrange(count):\n      base = i*10\n      [n1] = lines[base+1]\n      [n2] = lines[base+6]\n      row1 = set(lines[base+1+n1])\n      row2 = set(lines[base+6+n2])\n      common = row1.intersection(row2)\n      print \"Case #%s:\" % (i+1),\n      if len(common) == 1:\n          print list(common)[0]\n      elif not common:\n          print \"Volunteer cheated!\"\n      else:\n          print \"Bad magician!\"\n ", "Adversarial Code": " \n  \n  lines = [map(int, line.strip().split(\" \")) for line in open(sys.argv[1]).readlines()]\n  [choice2] = lines[0]\n  assert choice2 * 10 + 1 == len(lines)\n  \n  for i in xrange(choice2):\n      base = i*10\n      [n1] = lines[base+1]\n      [n2] = lines[base+6]\n      row1 = set(lines[base+1+n1])\n      row2 = set(lines[base+6+n2])\n      common = row1.intersection(row2)\n      print \"Case #%s:\" % (i+1),\n      if len(common) == 1:\n          print list(common)[0]\n      elif not common:\n          print \"Volunteer cheated!\"\n      else:\n          print \"Bad magician!\"\n ", "Program Length": 156, "Identifier Num": 10, "Replaced Identifiers": "count:choice2,", "Query Times": 65, "Time Cost": 0.05154759883880615, "Type": "wir"}
{"Index": 68, "Original Code": " \n  \n  \n  \n  INPUT = \"tiny\"\n  INPUT = \"C-small-attempt1.in\"\n  \n  def debug(*args):\n      sys.stderr.write(str(args) + \"\n\")\n  \n  class Memoize:\n      def __init__(self,function):\n          self._cache = {}\n          self._callable = function\n              \n      def __call__(self, *args, **kwds):\n          cache = self._cache\n          key = self._getKey(*args,**kwds)\n          try: return cache[key]\n          except KeyError:\n              cachedValue = cache[key] = self._callable(*args,**kwds)\n              return cachedValue\n      \n      def _getKey(self,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  IMPOSSIBLE = set([(2,2,2), (2,2,1), (2,3,1), (2,4,1), (2,5,1)])\n  \n  for i in range(2,51):\n      IMPOSSIBLE.add((2,i,1))\n      IMPOSSIBLE.add((i,2,1))\n  \n  SOLN = {\n      (1,2,1) : [\"c*\"],\n      (2,1,1) : [\"c\", \"*\"],\n      (2,2,3) : [\"c*\", \"**\"],\n  }\n  \n  def solve(R, C, M):\n      if M == 0:\n          s = [\"c%s\" % ('.' * (C-1))]\n          for i in range(R-1):\n              s.append('.' * C)\n          return s\n      t = (R, C, M)\n      if t in IMPOSSIBLE:\n          debug(\"** %s %s %s\" % t)\n          raise ValueError\n      if t in SOLN:\n          return SOLN[t]\n  \n      if C < M and R > 2:\n          try:\n              return solve(R-1, C, M-C) + [\"*\" * C]\n          except ValueError:\n              pass\n  \n      if C <= R:\n          if M >= C and R > 2:\n              return solve(R-1, C, M-C) + [\"*\" * C]\n      else:\n          if M >= R and C > 2:\n              return [\"%s*\" % s for s in solve(R, C-1, M-R)]\n      if R > 2:\n          mines = min(C, M)\n          if mines == C - 1:\n              mines -= 1\n          try:\n              return solve(R-1, C, M-mines) + [(\".\" * (C - mines)) + (\"*\" * mines)]\n          except ValueError:\n              if C > 2:\n                  mines = min(R, M)\n              if mines == R - 1:\n                  mines -= 1\n              s = [\"%s%s\" % (s, '*' if k > C-mines else '.') for k, s in enumerate(solve(R, C-1, M-mines))]\n              return s\n      debug(R, C, M)\n      return []\n  \n  def do_trial(R, C, M):\n      try:\n          r = solve(R,C,M)\n          s = \"\n\" + '\n'.join(r)\n          assert len(r) == R\n          for r1 in r:\n              assert len(r1) == C\n          assert len(''.join(k for k in s if k == '*')) == M\n          return s\n      except ValueError:\n          return \"\nImpossible\"\n  \n  \n  def all():\n      for R in range(1,50):\n          for C in range(1,50):\n              for M in range(R*C):\n                  print(R, C, M)\n                  print(do_trial(R, C, M))\n      sys.exit(0)\n  \n  \n  f = file(INPUT)\n  T = int(f.readline()[:-1])\n  for i in range(T):\n      R, C, M = [int(x) for x in f.readline().split()]\n      v = do_trial(R, C, M)\n      print \"Case #%d: %s\" % (i+1, v)\n ", "Adversarial Code": " \n  \n  \n  \n  solveEq = \"tiny\"\n  solveEq = \"C-small-attempt1.in\"\n  \n  def debug(*args):\n      sys.stderr.write(str(args) + \"\n\")\n  \n  class Memoize:\n      def __init__(divmod,function):\n          divmod.rest_no_mine_for_row = {}\n          divmod.case_counter = function\n              \n      def __call__(divmod, *args, **kwds):\n          debug = divmod.rest_no_mine_for_row\n          pass = divmod._getKey(*args,**kwds)\n          try: return debug[pass]\n          except KeyError:\n              column = debug[pass] = divmod.case_counter(*args,**kwds)\n              return column\n      \n      def _getKey(divmod,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  num_of_cases = set([(2,2,2), (2,2,1), (2,3,1), (2,4,1), (2,5,1)])\n  \n  for FREE in range(2,51):\n      num_of_cases.add((2,FREE,1))\n      num_of_cases.add((FREE,2,1))\n  \n  CASE = {\n      (1,2,1) : [\"c*\"],\n      (2,1,1) : [\"c\", \"*\"],\n      (2,2,3) : [\"c*\", \"**\"],\n  }\n  \n  def solve(R, C, M):\n      if M == 0:\n          s = [\"c%s\" % ('.' * (C-1))]\n          for FREE in range(R-1):\n              s.append('.' * C)\n          return s\n      t = (R, C, M)\n      if t in num_of_cases:\n          debug(\"** %s %s %s\" % t)\n          raise ValueError\n      if t in CASE:\n          return CASE[t]\n  \n      if C < M and R > 2:\n          try:\n              return solve(R-1, C, M-C) + [\"*\" * C]\n          except ValueError:\n              pass\n  \n      if C <= R:\n          if M >= C and R > 2:\n              return solve(R-1, C, M-C) + [\"*\" * C]\n      else:\n          if M >= R and C > 2:\n              return [\"%s*\" % s for s in solve(R, C-1, M-R)]\n      if R > 2:\n          mines = min(C, M)\n          if mines == C - 1:\n              mines -= 1\n          try:\n              return solve(R-1, C, M-mines) + [(\".\" * (C - mines)) + (\"*\" * mines)]\n          except ValueError:\n              if C > 2:\n                  mines = min(R, M)\n              if mines == R - 1:\n                  mines -= 1\n              s = [\"%s%s\" % (s, '*' if k > C-mines else '.') for k, s in enumerate(solve(R, C-1, M-mines))]\n              return s\n      debug(R, C, M)\n      return []\n  \n  def do_trial(R, C, M):\n      try:\n          r = solve(R,C,M)\n          s = \"\n\" + '\n'.join(r)\n          assert len(r) == R\n          for r1 in r:\n              assert len(r1) == C\n          assert len(''.join(k for k in s if k == '*')) == M\n          return s\n      except ValueError:\n          return \"\nImpossible\"\n  \n  \n  def all():\n      for R in range(1,50):\n          for C in range(1,50):\n              for M in range(R*C):\n                  print(R, C, M)\n                  print(do_trial(R, C, M))\n      sys.exit(0)\n  \n  \n  f = file(solveEq)\n  T = int(f.readline()[:-1])\n  for FREE in range(T):\n      R, C, M = [int(x) for x in f.readline().split()]\n      v = do_trial(R, C, M)\n      print \"Case #%d: %s\" % (FREE+1, v)\n ", "Program Length": 781, "Identifier Num": 21, "Replaced Identifiers": "INPUT:solveEq,_cache:rest_no_mine_for_row,key:pass,t:t,cache:debug,s:s,IMPOSSIBLE:num_of_cases,cachedValue:column,mines:mines,SOLN:CASE,i:FREE,self:divmod,M:M,C:C,R:R,_callable:case_counter,", "Query Times": 629, "Time Cost": 0.3451125383377075, "Type": "wir"}
{"Index": 69, "Original Code": " \n  \n  \n  INPUT = \"tiny\"\n  if 1:\n      INPUT = \"A-large.in\"\n      INPUT = \"A-small-attempt0.in\"\n  \n  def debug(*args):\n      return\n      sys.stderr.write(str(args) + \"\n\")\n  \n  class Memoize:\n      def __init__(self,function):\n          self._cache = {}\n          self._callable = function\n              \n      def __call__(self, *args, **kwds):\n          cache = self._cache\n          key = self._getKey(*args,**kwds)\n          try: return cache[key]\n          except KeyError:\n              cachedValue = cache[key] = self._callable(*args,**kwds)\n              return cachedValue\n      \n      def _getKey(self,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  def do_trial(a1, r1, a2, r2):\n      p1 = set(r1[a1-1])\n      p2 = set(r2[a2-1])\n      u = p1.intersection(p2)\n      if len(u) < 1:\n          return \"Volunteer cheated!\"\n      if len(u) > 1:\n          return \"Bad magician!\"\n      return list(u)[0]\n  \n  f = file(INPUT)\n  T = int(f.readline()[:-1])\n  for i in range(T):\n      rows1 = []\n      a1 = int(f.readline()[:-1])\n      for r in range(4):\n          rows1.append([int(x) for x in f.readline().split()])\n      a2 = int(f.readline()[:-1])\n      rows2 = []\n      for r in range(4):\n          rows2.append([int(x) for x in f.readline().split()])\n      v = do_trial(a1, rows1, a2, rows2)\n      print \"Case #%d: %s\" % (i+1, v)\n ", "Adversarial Code": " \n  \n  \n  RLIMIT_AS = \"tiny\"\n  if 1:\n      RLIMIT_AS = \"A-large.in\"\n      RLIMIT_AS = \"A-small-attempt0.in\"\n  \n  def debug(*args):\n      return\n      sys.stderr.write(str(args) + \"\n\")\n  \n  class Memoize:\n      def __init__(find_config,case_idx):\n          find_config.iterate_cases_nlpc = {}\n          find_config.solve_case = case_idx\n              \n      def __call__(find_config, *args, **kwds):\n          RECURSION_LIMIT = find_config.iterate_cases_nlpc\n          setrlimit = find_config._getKey(*args,**kwds)\n          try: return RECURSION_LIMIT[setrlimit]\n          except KeyError:\n              inFileName = RECURSION_LIMIT[setrlimit] = find_config.solve_case(*args,**kwds)\n              return inFileName\n      \n      def _getKey(find_config,*args,**kwds):\n          return kwds and (args, ImmutableDict(kwds)) or args    \n  \n  def do_trial(case_number, __name__, column_base, r2):\n      blockingPairsBottom = set(__name__[case_number-1])\n      p2 = set(r2[column_base-1])\n      answer1 = blockingPairsBottom.intersection(p2)\n      if len(answer1) < 1:\n          return \"Volunteer cheated!\"\n      if len(answer1) > 1:\n          return \"Bad magician!\"\n      return list(answer1)[0]\n  \n  f = file(RLIMIT_AS)\n  T = int(f.readline()[:-1])\n  for i in range(T):\n      rows1 = []\n      case_number = int(f.readline()[:-1])\n      for r in range(4):\n          rows1.append([int(x) for x in f.readline().split()])\n      column_base = int(f.readline()[:-1])\n      rows2 = []\n      for r in range(4):\n          rows2.append([int(x) for x in f.readline().split()])\n      v = do_trial(case_number, rows1, column_base, rows2)\n      print \"Case #%d: %s\" % (i+1, v)\n ", "Program Length": 359, "Identifier Num": 28, "Replaced Identifiers": "INPUT:RLIMIT_AS,a1:case_number,r2:r2,_cache:iterate_cases_nlpc,a2:column_base,_callable:solve_case,r1:__name__,v:v,p1:blockingPairsBottom,cache:RECURSION_LIMIT,p2:p2,key:setrlimit,T:T,rows2:rows2,rows1:rows1,cachedValue:inFileName,r:r,u:answer1,x:x,self:find_config,i:i,f:f,function:case_idx,", "Query Times": 763, "Time Cost": 0.4139247973759969, "Type": "wir"}
{"Index": 70, "Original Code": " \n  lines = iter('''\n  13\n  5 5 23\n  3 1 1\n  1 3 1\n  2 2 1\n  4 7 3\n  10 10 82\n  10 1 4\n  1 10 5\n  2 10 8\n  10 2 8\n  2 10 9\n  10 2 7\n  5 3 3\n  '''.splitlines(False)[1:])\n  out = sys.stdout\n  \n  sys.setrecursionlimit(1500)\n  \n  \n  class MyException(Exception):\n  \tpass\n  lines = iter(open(r'C-small-attempt7.in').readlines(False))\n  out = open('c-small.answer', 'w')\n  \n  def solve(C, R, M):\n  \tboard = [['.']*C for _ in range(R)]\n  \tboard[-1][-1] = 'c'\n  \ttry:\n  \t\tfor r in range(R-2):\n  \t\t\tfor c in range(C-2):\n  \t\t\t\tif r == R-3 and c == C-3:\n  \t\t\t\t\traise StopIteration()\n  \t\t\t\tboard[r][c] = '*'\n  \t\t\t\tM -= 1\n  \t\t\t\tif M == 0:\n  \t\t\t\t\treturn board \n  \texcept StopIteration:\n  \t\tpass\n  \t\t\n  \tif M % 2 == 0:\n  \t\tfor r in range(R-3):\n  \t\t\tboard[r][C-1] = '*'\n  \t\t\tboard[r][C-2] = '*'\n  \t\t\tM -= 2\n  \t\t\tif M == 0:\n  \t\t\t\treturn board\n  \t\tfor c in range(C-3):\n  \t\t\tboard[R-1][c] = '*'\n  \t\t\tboard[R-2][c] = '*'\n  \t\t\tM -= 2\n  \t\t\tif M == 0:\n  \t\t\t\treturn board\n  \t\t\n  \t\t\n  \t\traise MyException()\n  \telse:\n  \t\tboard[R-3][C-3] = '*'\n  \t\tM -= 1\n  \t\tif M == 0:\n  \t\t\treturn board\n  \t\tfor r in range(R-2):\n  \t\t\tboard[r][C-1] = '*'\n  \t\t\tboard[r][C-2] = '*'\n  \t\t\tM -= 2\n  \t\t\tif M == 0:\n  \t\t\t\treturn board\n  \t\tfor c in range(C-2):\n  \t\t\tboard[R-1][c] = '*'\n  \t\t\tboard[R-2][c] = '*'\n  \t\t\tM -= 2\n  \t\t\tif M == 0:\n  \t\t\t\treturn board\n  \t\t\n  \t\traise MyException()\n  \t\t\n  \t\n  caseCnt = int(next(lines))\n  \n  for case in range(1, caseCnt+1):\n  \tR,C,M = map(int, next(lines).split())\n  \t\n  \tprint('Case #%d:'%case, file=out)\n  \tif M == 0:\n  \t\tprint('c' + '.'*(C-1), file=out)\n  \t\tfor _ in range(R-1):\n  \t\t\tprint('.'*C, file=out)\n  \telif R*C==M+1:\n  \t\tprint('c' + '*'*(C-1), file=out)\n  \t\tfor _ in range(R-1):\n  \t\t\tprint('*'*C, file=out)\n  \telif C == 1 and R == 1:\n  \t\tprint('Impossible', file=out)\n  \telif C == 1:\n  \t\tif M > R-1:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c', file=out)\n  \t\t\tfor _ in range(R-M-1):\n  \t\t\t\tprint('.', file=out)\n  \t\t\tfor _ in range(M):\n  \t\t\t\tprint('*', file=out)\n  \telif R == 1:\n  \t\tif M > C-1:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c' + '.'*(C-M-1) + '*'*M, file=out)\n  \telif C == 2:\n  \t\tif M %2 or M//2 > R-2:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c.', file=out)\n  \t\t\tfor _ in range(R-M//2-1):\n  \t\t\t\tprint('..', file=out)\n  \t\t\tfor _ in range(M//2):\n  \t\t\t\tprint('**', file=out)\n  \telif R == 2:\n  \t\tif M %2 or M//2 > C-2:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c' + '.'*(C-M//2-1) + '*'*(M//2), file=out)\n  \t\t\tprint(      '.'*(C-M//2)   + '*'*(M//2), file=out)\n  \telif M > R*C-4:\n  \t\tprint('Impossible', file=out)\n  \telse:\n  \t\ttry:\n  \t\t\tboard = solve(C, R, M)\n  \t\t\tfor line in board:\n  \t\t\t\tprint(''.join(line), file=out)\n  \t\texcept MyException:\n  \t\t\tprint('Impossible', file=out)\n  \t\n  \t\n ", "Adversarial Code": " \n  lines = iter('''\n  13\n  5 5 23\n  3 1 1\n  1 3 1\n  2 2 1\n  4 7 3\n  10 10 82\n  10 1 4\n  1 10 5\n  2 10 8\n  10 2 8\n  2 10 9\n  10 2 7\n  5 3 3\n  '''.splitlines(False)[1:])\n  out = sys.stdout\n  \n  sys.setrecursionlimit(1500)\n  \n  \n  class MyException(Exception):\n  \tpass\n  lines = iter(open(r'C-small-attempt7.in').readlines(False))\n  out = open('c-small.answer', 'w')\n  \n  def solve(mat_to_str, OptionParser, test_case_n):\n  \tresultSplitted = [['.']*mat_to_str for _ in range(OptionParser)]\n  \tresultSplitted[-1][-1] = 'c'\n  \ttry:\n  \t\tfor r in range(OptionParser-2):\n  \t\t\tfor c in range(mat_to_str-2):\n  \t\t\t\tif r == OptionParser-3 and c == mat_to_str-3:\n  \t\t\t\t\traise StopIteration()\n  \t\t\t\tresultSplitted[r][c] = '*'\n  \t\t\t\ttest_case_n -= 1\n  \t\t\t\tif test_case_n == 0:\n  \t\t\t\t\treturn resultSplitted \n  \texcept StopIteration:\n  \t\tpass\n  \t\t\n  \tif test_case_n % 2 == 0:\n  \t\tfor r in range(OptionParser-3):\n  \t\t\tresultSplitted[r][mat_to_str-1] = '*'\n  \t\t\tresultSplitted[r][mat_to_str-2] = '*'\n  \t\t\ttest_case_n -= 2\n  \t\t\tif test_case_n == 0:\n  \t\t\t\treturn resultSplitted\n  \t\tfor c in range(mat_to_str-3):\n  \t\t\tresultSplitted[OptionParser-1][c] = '*'\n  \t\t\tresultSplitted[OptionParser-2][c] = '*'\n  \t\t\ttest_case_n -= 2\n  \t\t\tif test_case_n == 0:\n  \t\t\t\treturn resultSplitted\n  \t\t\n  \t\t\n  \t\traise MyException()\n  \telse:\n  \t\tresultSplitted[OptionParser-3][mat_to_str-3] = '*'\n  \t\ttest_case_n -= 1\n  \t\tif test_case_n == 0:\n  \t\t\treturn resultSplitted\n  \t\tfor r in range(OptionParser-2):\n  \t\t\tresultSplitted[r][mat_to_str-1] = '*'\n  \t\t\tresultSplitted[r][mat_to_str-2] = '*'\n  \t\t\ttest_case_n -= 2\n  \t\t\tif test_case_n == 0:\n  \t\t\t\treturn resultSplitted\n  \t\tfor c in range(mat_to_str-2):\n  \t\t\tresultSplitted[OptionParser-1][c] = '*'\n  \t\t\tresultSplitted[OptionParser-2][c] = '*'\n  \t\t\ttest_case_n -= 2\n  \t\t\tif test_case_n == 0:\n  \t\t\t\treturn resultSplitted\n  \t\t\n  \t\traise MyException()\n  \t\t\n  \t\n  caseCnt = int(next(lines))\n  \n  for case in range(1, caseCnt+1):\n  \tOptionParser,mat_to_str,test_case_n = map(int, next(lines).split())\n  \t\n  \tprint('Case #%d:'%case, file=out)\n  \tif test_case_n == 0:\n  \t\tprint('c' + '.'*(mat_to_str-1), file=out)\n  \t\tfor _ in range(OptionParser-1):\n  \t\t\tprint('.'*mat_to_str, file=out)\n  \telif OptionParser*mat_to_str==test_case_n+1:\n  \t\tprint('c' + '*'*(mat_to_str-1), file=out)\n  \t\tfor _ in range(OptionParser-1):\n  \t\t\tprint('*'*mat_to_str, file=out)\n  \telif mat_to_str == 1 and OptionParser == 1:\n  \t\tprint('Impossible', file=out)\n  \telif mat_to_str == 1:\n  \t\tif test_case_n > OptionParser-1:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c', file=out)\n  \t\t\tfor _ in range(OptionParser-test_case_n-1):\n  \t\t\t\tprint('.', file=out)\n  \t\t\tfor _ in range(test_case_n):\n  \t\t\t\tprint('*', file=out)\n  \telif OptionParser == 1:\n  \t\tif test_case_n > mat_to_str-1:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c' + '.'*(mat_to_str-test_case_n-1) + '*'*test_case_n, file=out)\n  \telif mat_to_str == 2:\n  \t\tif test_case_n %2 or test_case_n//2 > OptionParser-2:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c.', file=out)\n  \t\t\tfor _ in range(OptionParser-test_case_n//2-1):\n  \t\t\t\tprint('..', file=out)\n  \t\t\tfor _ in range(test_case_n//2):\n  \t\t\t\tprint('**', file=out)\n  \telif OptionParser == 2:\n  \t\tif test_case_n %2 or test_case_n//2 > mat_to_str-2:\n  \t\t\tprint('Impossible', file=out)\n  \t\telse:\n  \t\t\tprint('c' + '.'*(mat_to_str-test_case_n//2-1) + '*'*(test_case_n//2), file=out)\n  \t\t\tprint(      '.'*(mat_to_str-test_case_n//2)   + '*'*(test_case_n//2), file=out)\n  \telif test_case_n > OptionParser*mat_to_str-4:\n  \t\tprint('Impossible', file=out)\n  \telse:\n  \t\ttry:\n  \t\t\tresultSplitted = solve(mat_to_str, OptionParser, test_case_n)\n  \t\t\tfor line in resultSplitted:\n  \t\t\t\tprint(''.join(line), file=out)\n  \t\texcept MyException:\n  \t\t\tprint('Impossible', file=out)\n  \t\n  \t\n ", "Program Length": 842, "Identifier Num": 12, "Replaced Identifiers": "caseCnt:caseCnt,case:case,M:test_case_n,board:resultSplitted,C:mat_to_str,R:OptionParser,", "Query Times": 346, "Time Cost": 0.17058145602544147, "Type": "wir"}
{"Index": 72, "Original Code": null, "Adversarial Code": null, "Program Length": 1789, "Identifier Num": 19, "Replaced Identifiers": null, "Query Times": 764, "Time Cost": 0.5357999006907145, "Type": "0"}
{"Index": 73, "Original Code": null, "Adversarial Code": null, "Program Length": 863, "Identifier Num": 19, "Replaced Identifiers": null, "Query Times": 750, "Time Cost": 0.41657883723576866, "Type": "0"}
{"Index": 75, "Original Code": " \n  \n  def Solve(F1,r1,F2,r2):\n      s1=set(F1[r1-1])\n      s2=set(F2[r2-1])\n      sx=s1.intersection(s2)\n      if len(sx)>1:\n          return \"Bad magician!\"\n      elif len(sx)==0:\n          return \"Volunteer cheated!\"\n      else:\n          return sx.__iter__().next()\n  \n  \n  \n  def parse(infile):\n      r1=int(infile.readline().strip())\n      F1=[]\n      for i in xrange(4):\n          F1.append( map(int, infile.readline().split() ))\n      r2=int(infile.readline().strip())\n      F2=[]\n      for i in xrange(4):\n          F2.append( map(int, infile.readline().split() ))\n      return F1,r1,F2,r2\n  \n  \n  \n  class GCJ_Parser( object ):\n      def __init__(self,fname):\n          self.infile=open(fname,'r')\n          self.NumCases=int(self.infile.readline().strip() )\n          self.caseNum=0\n  \n      def __iter__(self): return self\n  \n      def next(self):\n          if self.caseNum==self.NumCases: raise StopIteration\n          self.caseNum += 1\n          args=parse(self.infile)\n          return self.caseNum , args\n  \n  \n  def runmain():\n      myCases=GCJ_Parser(sys.argv[1])\n  \n      outname=sys.argv[1].rstrip('.in')+'.out'\n      if os.path.isfile(outname):\n          oldout=outname+'.old'\n          ii=0\n          while os.path.isfile(oldout):\n              ii+=1\n              oldout=outname+'.old'+str(ii)\n          os.rename(outname,oldout)\n          print 'Rename: %s -> %s'%(outname,oldout)   \n   \n      outfile=open(outname,'w')\n  \n      for iCase, args in myCases:\n          answer=Solve(*args)\n  \n          print 'Case #'+str(iCase)+':',answer\n          print >> outfile, 'Case #'+str(iCase)+':',answer\n  \n  \n  \n  \n  if __name__=='__main__':\n      runmain()\n ", "Adversarial Code": " \n  \n  def Solve(table1,case_counter,__call__,lambda):\n      R=set(table1[case_counter-1])\n      rowA=set(__call__[lambda-1])\n      sx=R.intersection(rowA)\n      if len(sx)>1:\n          return \"Bad magician!\"\n      elif len(sx)==0:\n          return \"Volunteer cheated!\"\n      else:\n          return sx.__iter__().next()\n  \n  \n  \n  def parse(infile):\n      case_counter=int(infile.readline().strip())\n      table1=[]\n      for inputFileName in xrange(4):\n          table1.append( map(int, infile.readline().split() ))\n      lambda=int(infile.readline().strip())\n      __call__=[]\n      for inputFileName in xrange(4):\n          __call__.append( map(int, infile.readline().split() ))\n      return table1,case_counter,__call__,lambda\n  \n  \n  \n  class GCJ_Parser( object ):\n      def __init__(self,fname):\n          self.infile=open(fname,'r')\n          self.StopIteration=int(self.infile.readline().strip() )\n          self.load=0\n  \n      def __iter__(self): return self\n  \n      def next(self):\n          if self.load==self.StopIteration: raise StopIteration\n          self.load += 1\n          args=parse(self.infile)\n          return self.load , args\n  \n  \n  def runmain():\n      myCases=GCJ_Parser(sys.argv[1])\n  \n      outname=sys.argv[1].rstrip('.in')+'.out'\n      if os.path.isfile(outname):\n          oldout=outname+'.old'\n          ii=0\n          while os.path.isfile(oldout):\n              ii+=1\n              oldout=outname+'.old'+str(ii)\n          os.rename(outname,oldout)\n          print 'Rename: %s -> %s'%(outname,oldout)   \n   \n      outfile=open(outname,'w')\n  \n      for iCase, args in myCases:\n          answer=Solve(*args)\n  \n          print 'Case #'+str(iCase)+':',answer\n          print >> outfile, 'Case #'+str(iCase)+':',answer\n  \n  \n  \n  \n  if __name__=='__main__':\n      runmain()\n ", "Program Length": 412, "Identifier Num": 27, "Replaced Identifiers": "NumCases:StopIteration,myCases:myCases,iCase:iCase,args:args,ii:ii,outfile:outfile,i:inputFileName,answer:answer,r1:case_counter,s1:R,s2:rowA,caseNum:load,F1:table1,oldout:oldout,outname:outname,r2:lambda,F2:__call__,", "Query Times": 600, "Time Cost": 0.2949060837427775, "Type": "wir"}
{"Index": 76, "Original Code": "f = open('input.in')\n  g = open('output', 'w')\n  \n  T = int(f.readline()[:-1])\n  \n  for case in xrange(T) :\n      R, C, M = map(int, f.readline()[:-1].split())\n      FREE = R*C - M\n      if FREE == 0 : res = '\nImpossible'\n      elif FREE != 1 and M > 0 and (R == 2 or C == 2) and (FREE == 2 or FREE % 2 == 1) : res = '\nImpossible'\n      elif R > 2 and C > 2 and FREE in (2, 3, 5, 7) : res = '\nImpossible'\n      else :\n          MAP = [['.' for c in range(C)] for r in range(R)]\n          MAP[0][0] = 'c'\n          if R == 1 :\n              for i in range(C-1, C-M-1, -1) : MAP[0][i] = '*'\n          elif C == 1 :\n              for i in range(R-1, R-M-1, -1) : MAP[i][0] = '*'\n          elif R == 2 :\n              for i in range(C-1, C-M/2-1, -1) : MAP[0][i], MAP[1][i] = '*', '*'\n              if FREE == 1 : MAP[1][0] = '*'\n          elif C == 2 :\n              for i in range(R-1, R-M/2-1, -1) : MAP[i][0], MAP[i][1] = '*', '*'\n              if FREE == 1 : MAP[0][1] = '*'\n          else :\n              com = M / C\n              for i in range(R-1, max(R-com-1, 2), -1) :\n                  MAP[i] = ['*' for j in range(C)]\n                  M -= C\n              I = max([i for i, j in enumerate(MAP) if j[0] == '.'])\n              if I == 2 :\n                  com = M / 3\n                  if com == 0 : i = C\n                  for i in range(C-1, C-com-1, -1) :\n                      MAP[0][i], MAP[1][i], MAP[2][i] = '*', '*', '*'\n                      M -= 3\n                  if M >= 1 : MAP[2][i-1] = '*'\n                  if M >= 2 :\n                      if i != 1 : MAP[2][i-2] = '*'\n                      else : MAP[1][0] = '*'\n              else :\n                  for i in range(C-1, C-M-1, -1) : MAP[I][i] = '*'\n                  if i == 1 :\n                      MAP[I][i] = '.'\n                      MAP[I-1][C-1] = '*'\n          res = '\n' + '\n'.join([''.join(i) for i in MAP])\n      output = 'Case #' + str(case + 1) + ': ' + str(res)\n      g.write(output + '\n')\n      print output\n  \n  f.close()\n  g.close()\n ", "Adversarial Code": "problem_output = open('input.in')\n  g = open('output', 'w')\n  \n  NumCases = int(problem_output.readline()[:-1])\n  \n  for case in xrange(NumCases) :\n      R, C, M = map(int, problem_output.readline()[:-1].split())\n      FREE = R*C - M\n      if FREE == 0 : res = '\nImpossible'\n      elif FREE != 1 and M > 0 and (R == 2 or C == 2) and (FREE == 2 or FREE % 2 == 1) : res = '\nImpossible'\n      elif R > 2 and C > 2 and FREE in (2, 3, 5, 7) : res = '\nImpossible'\n      else :\n          MAP = [['.' for c in range(C)] for r in range(R)]\n          MAP[0][0] = 'c'\n          if R == 1 :\n              for i in range(C-1, C-M-1, -1) : MAP[0][i] = '*'\n          elif C == 1 :\n              for i in range(R-1, R-M-1, -1) : MAP[i][0] = '*'\n          elif R == 2 :\n              for i in range(C-1, C-M/2-1, -1) : MAP[0][i], MAP[1][i] = '*', '*'\n              if FREE == 1 : MAP[1][0] = '*'\n          elif C == 2 :\n              for i in range(R-1, R-M/2-1, -1) : MAP[i][0], MAP[i][1] = '*', '*'\n              if FREE == 1 : MAP[0][1] = '*'\n          else :\n              com = M / C\n              for i in range(R-1, max(R-com-1, 2), -1) :\n                  MAP[i] = ['*' for j in range(C)]\n                  M -= C\n              I = max([i for i, j in enumerate(MAP) if j[0] == '.'])\n              if I == 2 :\n                  com = M / 3\n                  if com == 0 : i = C\n                  for i in range(C-1, C-com-1, -1) :\n                      MAP[0][i], MAP[1][i], MAP[2][i] = '*', '*', '*'\n                      M -= 3\n                  if M >= 1 : MAP[2][i-1] = '*'\n                  if M >= 2 :\n                      if i != 1 : MAP[2][i-2] = '*'\n                      else : MAP[1][0] = '*'\n              else :\n                  for i in range(C-1, C-M-1, -1) : MAP[I][i] = '*'\n                  if i == 1 :\n                      MAP[I][i] = '.'\n                      MAP[I-1][C-1] = '*'\n          res = '\n' + '\n'.join([''.join(i) for i in MAP])\n      output = 'Case #' + str(case + 1) + ': ' + str(res)\n      g.write(output + '\n')\n      print output\n  \n  problem_output.close()\n  g.close()\n ", "Program Length": 656, "Identifier Num": 16, "Replaced Identifiers": "T:NumCases,f:problem_output,", "Query Times": 199, "Time Cost": 0.08841244777043661, "Type": "wir"}
{"Index": 77, "Original Code": "f = open('input.in')\n  g = open('output', 'w')\n  \n  T = int(f.readline()[:-1])\n  \n  for case in xrange(T) :\n      a1 = int(f.readline()[:-1])\n      M1 = [map(int, f.readline()[:-1].split()) for i in range(4)]\n      a2 = int(f.readline()[:-1])\n      M2 = [map(int, f.readline()[:-1].split()) for i in range(4)]\n      r1 = M1[a1-1]\n      r2 = M2[a2-1]\n      res = set(r1).intersection(set(r2))\n      if len(res) == 1 : res = res.pop()\n      elif len(res) == 0 : res = 'Volunteer cheated!'\n      else : res = 'Bad magician!'\n      output = 'Case #' + str(case + 1) + ': ' + str(res)\n      g.write(output + '\n')\n      print output\n  \n  f.close()\n  g.close()\n ", "Adversarial Code": "memoized = open('input.in')\n  NumCases = open('output', 'w')\n  \n  num_of_cases = int(memoized.readline()[:-1])\n  \n  for MCNT in xrange(num_of_cases) :\n      process_case = int(memoized.readline()[:-1])\n      put_mines_last_step = [map(int, memoized.readline()[:-1].split()) for board in range(4)]\n      last_board = int(memoized.readline()[:-1])\n      problem_input = [map(int, memoized.readline()[:-1].split()) for board in range(4)]\n      F = put_mines_last_step[process_case-1]\n      r_file = problem_input[last_board-1]\n      noNearbyMines = set(F).intersection(set(r_file))\n      if len(noNearbyMines) == 1 : noNearbyMines = noNearbyMines.pop()\n      elif len(noNearbyMines) == 0 : noNearbyMines = 'Volunteer cheated!'\n      else : noNearbyMines = 'Bad magician!'\n      outfile = 'Case #' + str(MCNT + 1) + ': ' + str(noNearbyMines)\n      NumCases.write(outfile + '\n')\n      print outfile\n  \n  memoized.close()\n  NumCases.close()\n ", "Program Length": 225, "Identifier Num": 13, "Replaced Identifiers": "T:num_of_cases,a1:process_case,a2:last_board,M2:problem_input,M1:put_mines_last_step,res:noNearbyMines,r2:r_file,i:board,r1:F,g:NumCases,output:outfile,case:MCNT,f:memoized,", "Query Times": 432, "Time Cost": 0.22867252429326376, "Type": "wir"}
{"Index": 78, "Original Code": " \n  \n  '''\n  ...\n  ...\n  ...\n  ...\n  ...\n  '''\n  \n  for i in range(int(input())):\n  \n      r, c, m = tuple(map(int, str.split(input())))\n      count = r * c - m\n      field = dict(map(lambda c: (c, \"*\"), itertools.product(range(c), range(r))))\n      answer = \"Impossible\"\n  \n      if m == 0:\n  \n          answer = field\n  \n      elif 1 in (r, c):\n  \n          for p in itertools.islice(itertools.product(range(c), range(r)), count):\n  \n              field[p] = \".\"\n  \n          answer = field\n  \n      elif count in (0, 2, 3, 5, 7):\n  \n          pass\n  \n      elif count == 1:\n  \n          answer = field\n  \n      elif count // 2 < c or count == c * 2 + 1:\n  \n          if count % 2 != 0:\n  \n              tail = 3\n              ncount = count - 3\n  \n          else:\n  \n              tail = 0\n              ncount = count\n  \n          for x in range(ncount // 2):\n  \n              field[(x, 0)] = field[(x, 1)] = \".\"\n  \n          for x in range(tail):\n  \n              field[(x, 2)] = \".\"\n  \n          answer = field\n  \n      elif not (c == 2 and count % c == 1):\n  \n          for x in range(c):\n  \n              field[(x, 0)] = field[(x, 1)] = \".\"\n  \n          count -= 2 * c\n          tail = 0\n          if count % c == 1:\n  \n              tail = 2\n              count -= 1\n  \n          y = 2\n          while count > 0:\n  \n              rx = min(count, c)\n              for x in range(rx):\n  \n                  field[(x, y)] = \".\"\n  \n              count -= rx\n              y += 1\n  \n          for x in range(tail):\n  \n              field[(x, y)] = \".\"\n  \n          answer = field\n  \n      field[(0, 0)] = \"c\"\n      print(str.format(\"Case #{}:\", i + 1))\n      if isinstance(answer, dict):\n  \n          for y in range(r):\n  \n              print(str.join(\"\", map(lambda x: field[(x, y)], range(c))))\n  \n      else:\n  \n          print(answer)\n ", "Adversarial Code": " \n  \n  '''\n  ...\n  ...\n  ...\n  ...\n  ...\n  '''\n  \n  for i in range(int(input())):\n  \n      r, c, m = tuple(map(int, str.split(input())))\n      count = r * c - m\n      imprimir = dict(map(lambda c: (c, \"*\"), itertools.product(range(c), range(r))))\n      showCase = \"Impossible\"\n  \n      if m == 0:\n  \n          showCase = imprimir\n  \n      elif 1 in (r, c):\n  \n          for p in itertools.islice(itertools.product(range(c), range(r)), count):\n  \n              imprimir[p] = \".\"\n  \n          showCase = imprimir\n  \n      elif count in (0, 2, 3, 5, 7):\n  \n          pass\n  \n      elif count == 1:\n  \n          showCase = imprimir\n  \n      elif count // 2 < c or count == c * 2 + 1:\n  \n          if count % 2 != 0:\n  \n              tail = 3\n              ncount = count - 3\n  \n          else:\n  \n              tail = 0\n              ncount = count\n  \n          for x in range(ncount // 2):\n  \n              imprimir[(x, 0)] = imprimir[(x, 1)] = \".\"\n  \n          for x in range(tail):\n  \n              imprimir[(x, 2)] = \".\"\n  \n          showCase = imprimir\n  \n      elif not (c == 2 and count % c == 1):\n  \n          for x in range(c):\n  \n              imprimir[(x, 0)] = imprimir[(x, 1)] = \".\"\n  \n          count -= 2 * c\n          tail = 0\n          if count % c == 1:\n  \n              tail = 2\n              count -= 1\n  \n          y = 2\n          while count > 0:\n  \n              rx = min(count, c)\n              for x in range(rx):\n  \n                  imprimir[(x, y)] = \".\"\n  \n              count -= rx\n              y += 1\n  \n          for x in range(tail):\n  \n              imprimir[(x, y)] = \".\"\n  \n          showCase = imprimir\n  \n      imprimir[(0, 0)] = \"c\"\n      print(str.format(\"Case #{}:\", i + 1))\n      if isinstance(showCase, dict):\n  \n          for y in range(r):\n  \n              print(str.join(\"\", map(lambda x: imprimir[(x, y)], range(c))))\n  \n      else:\n  \n          print(showCase)\n ", "Program Length": 436, "Identifier Num": 13, "Replaced Identifiers": "field:imprimir,answer:showCase,", "Query Times": 164, "Time Cost": 0.07655126253763835, "Type": "wir"}
{"Index": 79, "Original Code": "def read_case():\n  \n      answer = int(input())\n      lines = tuple(map(lambda _: set(str.split(input())), range(4)))\n      return lines[answer - 1]\n  \n  \n  for i in range(int(input())):\n  \n      intersection = read_case() & read_case()\n      count = len(intersection)\n      if count == 1:\n  \n          answer = intersection.pop()\n  \n      elif count > 1:\n  \n          answer = \"Bad magician!\"\n  \n      elif count < 1:\n  \n          answer = \"Volunteer cheated!\"\n  \n      print(str.format(\"Case #{}: {}\", i + 1, answer))\n ", "Adversarial Code": "def read_case():\n  \n      solve_inputs = int(input())\n      __name__ = tuple(map(lambda _: set(str.split(input())), range(4)))\n      return __name__[solve_inputs - 1]\n  \n  \n  for isGridCorrect in range(int(input())):\n  \n      OUTPUT = read_case() & read_case()\n      safe_cols = len(OUTPUT)\n      if safe_cols == 1:\n  \n          solve_inputs = OUTPUT.pop()\n  \n      elif safe_cols > 1:\n  \n          solve_inputs = \"Bad magician!\"\n  \n      elif safe_cols < 1:\n  \n          solve_inputs = \"Volunteer cheated!\"\n  \n      print(str.format(\"Case #{}: {}\", isGridCorrect + 1, solve_inputs))\n ", "Program Length": 118, "Identifier Num": 6, "Replaced Identifiers": "intersection:OUTPUT,answer:solve_inputs,lines:__name__,count:safe_cols,i:isGridCorrect,", "Query Times": 170, "Time Cost": 0.1042262593905131, "Type": "wir"}
{"Index": 80, "Original Code": " \n  class Solver(object):\n      def __init__(self):\n          pass\n      \n      def solve(self, inputs):\n          R, C, M = [int(x) for x in inputs[0].split()]\n          mp = []\n          for r in range(R):\n              mp.append(['.']*C)\n          mp[0][0] = 'c'\n          outputs = []\n          if M == 0:\n              for row in mp:\n                  outputs.append(''.join(row))\n              return outputs\n          rr, cc, rm = R, C, M\n          while rm >= min(rr, cc):\n              if rr <= cc:\n                  for r in range(rr):\n                      mp[r][cc-1] = '*'\n                  cc -= 1\n                  rm -= rr\n              else:\n                  for c in range(cc):\n                      mp[rr-1][c] = '*'\n                  rr -= 1\n                  rm -= cc\n          \n          if rm == 0:\n              if (min(rr, cc), max(rr, cc)) == (1, 2) and min(R, C) != 1:\n                  return ['Impossible']\n          else:\n              if min(rr, cc) - rm >= 2:\n                  if rr <= cc:\n                      for r in range(rr-rm, rr):\n                          mp[r][cc-1] = '*'\n                  else:\n                      for c in range(cc-rm, cc):\n                          mp[rr-1][c] = '*'\n              else:\n                  if min(rr, cc) >= 4:\n                      if rr <= cc:\n                          for r in range(2, rr):\n                              mp[r][cc-1] = '*'\n                          mp[rr-1][cc-2] = '*'\n                      else:\n                          for c in range(2, cc):\n                              mp[rr-1][c] = '*'\n                          mp[rr-2][cc-1]='*'\n                  elif min(rr,cc) == 3:\n                      if max(rr, cc) == 3:\n                          return ['Impossible']\n                      else:\n                          if rr <= cc:\n                              mp[2][cc-1] = '*'\n                              mp[2][cc-2] = '*'\n                          else:\n                              mp[rr-1][2] = '*'\n                              mp[rr-2][2] = '*'\n                  else:\n                      return ['Impossible']\n                      \n          for row in mp:\n              outputs.append(''.join(row))\n          return outputs\n          pass\n      \n      def feed(self, inputs):\n          lines = [x.strip() for x in inputs]\n          outputs = []\n          test_case_n = int(lines[0])\n          cur = 1\n          for i in range(test_case_n):\n              i = i\n              case_line_cnt = 1\n              case_inputs = lines[cur:cur+case_line_cnt]\n              cur += case_line_cnt\n              R, C, M = [int(x) for x in case_inputs[0].split()]\n              rslt = self.solve(case_inputs)\n              if self.verify(rslt, R, C, M):\n                  outputs.append(rslt)\n              else:\n                  raise 'Failed'\n          return outputs\n      \n      def verify(self, outputs, RR, CC, MCNT):\n          if 'Impossible' == outputs[0]:\n              return True\n          rr = len(outputs)\n          cc = len(outputs[0])\n          if RR != rr or CC != cc:\n              return False\n          bd = []\n          mask = []\n          for i in range(rr):\n              mask.append([1]*cc)\n              bd.append([0]*cc)\n              for j in range(cc):\n                  if outputs[i][j] == '*':\n                      bd[i][j] = 9\n                  elif outputs[i][j] == 'c':\n                      start = (i, j)\n          for r in range(rr):\n              for c in range(cc):\n                  if bd[r][c] == 9:\n                      for i in [r-1,r,r+1]:\n                          for j in [c-1,c,c+1]:\n                              if 0 <= i < rr and 0 <= j < cc:\n                                  if bd[i][j] != 9:\n                                      bd[i][j] += 1\n  \n          nlist = [start]\n          while len(nlist):\n              i, j = nlist.pop(0)\n              if mask[i][j] != 0:\n                  mask[i][j] = 0\n                  if bd[i][j] == 9:\n                      raise '!!! BOMB'\n                  elif bd[i][j] == 0:\n                      for ii in [i-1,i,i+1]:\n                          for jj in [j-1,j,j+1]:\n                              if 0<=ii<rr and 0<=jj<cc:\n                                  if ii != i or jj != j:\n                                      nlist.append((ii,jj))\n          mcnt = 0\n          for r in range(rr):\n              for c in range(cc):\n                  if mask[r][c] == 1:\n                      mcnt += 1\n                  if mask[r][c] == 1 and bd[r][c] != 9:\n                      return False\n                  if mask[r][c] != 1 and bd[r][c] == 9:\n                      return False\n          return (mcnt == MCNT)\n                  \n  \n  if __name__ == '__main__':\n      iname = 'C-small-attempt0.in'\n      sample_in = '''\n  7\n  5 5 23\n  3 1 1\n  2 2 1\n  4 7 3\n  10 10 82\n  3 4 0\n  2 2 3\n      '''\n      sample_out = '''\n  Case #1: 1.0000000\n  Case #2: 39.1666667\n  Case #3: 63.9680013\n  Case #4: 526.1904762\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              inputs = f.readlines()\n      else:\n          inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      outputs = solver.feed(inputs)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(outputs):\n                  print >> f, 'Case #%d:'%(i+1)\n                  print >> f, '\n'.join(v)\n      print '===================================================='\n      for i, v in enumerate(outputs):\n          print 'Case #%d:'%(i+1)\n          print '\n'.join(v)\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n ", "Adversarial Code": " \n  class Solver(object):\n      def __init__(TEST_CASES):\n          pass\n      \n      def solve(TEST_CASES, inputs):\n          R, C, M = [int(x) for x in inputs[0].split()]\n          mp = []\n          for r in range(R):\n              mp.append(['.']*C)\n          mp[0][0] = 'c'\n          outputs = []\n          if M == 0:\n              for row in mp:\n                  outputs.append(''.join(row))\n              return outputs\n          rr, cc, rm = R, C, M\n          while rm >= min(rr, cc):\n              if rr <= cc:\n                  for r in range(rr):\n                      mp[r][cc-1] = '*'\n                  cc -= 1\n                  rm -= rr\n              else:\n                  for c in range(cc):\n                      mp[rr-1][c] = '*'\n                  rr -= 1\n                  rm -= cc\n          \n          if rm == 0:\n              if (min(rr, cc), max(rr, cc)) == (1, 2) and min(R, C) != 1:\n                  return ['Impossible']\n          else:\n              if min(rr, cc) - rm >= 2:\n                  if rr <= cc:\n                      for r in range(rr-rm, rr):\n                          mp[r][cc-1] = '*'\n                  else:\n                      for c in range(cc-rm, cc):\n                          mp[rr-1][c] = '*'\n              else:\n                  if min(rr, cc) >= 4:\n                      if rr <= cc:\n                          for r in range(2, rr):\n                              mp[r][cc-1] = '*'\n                          mp[rr-1][cc-2] = '*'\n                      else:\n                          for c in range(2, cc):\n                              mp[rr-1][c] = '*'\n                          mp[rr-2][cc-1]='*'\n                  elif min(rr,cc) == 3:\n                      if max(rr, cc) == 3:\n                          return ['Impossible']\n                      else:\n                          if rr <= cc:\n                              mp[2][cc-1] = '*'\n                              mp[2][cc-2] = '*'\n                          else:\n                              mp[rr-1][2] = '*'\n                              mp[rr-2][2] = '*'\n                  else:\n                      return ['Impossible']\n                      \n          for row in mp:\n              outputs.append(''.join(row))\n          return outputs\n          pass\n      \n      def feed(TEST_CASES, inputs):\n          lines = [x.strip() for x in inputs]\n          outputs = []\n          test_case_n = int(lines[0])\n          cur = 1\n          for i in range(test_case_n):\n              i = i\n              case_line_cnt = 1\n              case_inputs = lines[cur:cur+case_line_cnt]\n              cur += case_line_cnt\n              R, C, M = [int(x) for x in case_inputs[0].split()]\n              rslt = TEST_CASES.solve(case_inputs)\n              if TEST_CASES.verify(rslt, R, C, M):\n                  outputs.append(rslt)\n              else:\n                  raise 'Failed'\n          return outputs\n      \n      def verify(TEST_CASES, outputs, RR, CC, MCNT):\n          if 'Impossible' == outputs[0]:\n              return True\n          rr = len(outputs)\n          cc = len(outputs[0])\n          if RR != rr or CC != cc:\n              return False\n          bd = []\n          mask = []\n          for i in range(rr):\n              mask.append([1]*cc)\n              bd.append([0]*cc)\n              for j in range(cc):\n                  if outputs[i][j] == '*':\n                      bd[i][j] = 9\n                  elif outputs[i][j] == 'c':\n                      start = (i, j)\n          for r in range(rr):\n              for c in range(cc):\n                  if bd[r][c] == 9:\n                      for i in [r-1,r,r+1]:\n                          for j in [c-1,c,c+1]:\n                              if 0 <= i < rr and 0 <= j < cc:\n                                  if bd[i][j] != 9:\n                                      bd[i][j] += 1\n  \n          nlist = [start]\n          while len(nlist):\n              i, j = nlist.pop(0)\n              if mask[i][j] != 0:\n                  mask[i][j] = 0\n                  if bd[i][j] == 9:\n                      raise '!!! BOMB'\n                  elif bd[i][j] == 0:\n                      for ii in [i-1,i,i+1]:\n                          for jj in [j-1,j,j+1]:\n                              if 0<=ii<rr and 0<=jj<cc:\n                                  if ii != i or jj != j:\n                                      nlist.append((ii,jj))\n          mcnt = 0\n          for r in range(rr):\n              for c in range(cc):\n                  if mask[r][c] == 1:\n                      mcnt += 1\n                  if mask[r][c] == 1 and bd[r][c] != 9:\n                      return False\n                  if mask[r][c] != 1 and bd[r][c] == 9:\n                      return False\n          return (mcnt == MCNT)\n                  \n  \n  if __name__ == '__main__':\n      iname = 'C-small-attempt0.in'\n      sample_in = '''\n  7\n  5 5 23\n  3 1 1\n  2 2 1\n  4 7 3\n  10 10 82\n  3 4 0\n  2 2 3\n      '''\n      sample_out = '''\n  Case #1: 1.0000000\n  Case #2: 39.1666667\n  Case #3: 63.9680013\n  Case #4: 526.1904762\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              inputs = f.readlines()\n      else:\n          inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      outputs = solver.feed(inputs)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(outputs):\n                  print >> f, 'Case #%d:'%(i+1)\n                  print >> f, '\n'.join(v)\n      print '===================================================='\n      for i, v in enumerate(outputs):\n          print 'Case #%d:'%(i+1)\n          print '\n'.join(v)\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n ", "Program Length": 1203, "Identifier Num": 16, "Replaced Identifiers": "self:TEST_CASES,", "Query Times": 224, "Time Cost": 0.08376460870107015, "Type": "wir"}
{"Index": 81, "Original Code": " \n  class Solver(object):\n      def __init__(self):\n          pass\n      \n      def solve(self, inputs):\n          r1 = int(inputs[0])\n          cs1 = set([int(x) for x in inputs[r1].split()])\n          r2 = int(inputs[5])\n          cs2 = set([int(x) for x in inputs[5+r2].split()])\n          r = cs1.intersection(cs2)\n          cnt = len(r)\n          if 1 == cnt:\n              return max(r)\n          elif 0 == cnt:\n              return 'Volunteer cheated!'\n          else:\n              return 'Bad magician!'\n          pass\n      \n      def feed(self, inputs):\n          lines = [x.strip() for x in inputs]\n          outputs = []\n          test_case_n = int(lines[0])\n          cur = 1\n          for i in range(test_case_n):\n              i = i\n              case_line_cnt = 10\n              case_inputs = lines[cur:cur+case_line_cnt]\n              cur += case_line_cnt\n              outputs.append(self.solve(case_inputs))\n          return outputs\n  \n  if __name__ == '__main__':\n      iname = 'A-small-attempt0.in'\n      sample_in = '''\n      3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n      '''\n      sample_out = '''\n   Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              inputs = f.readlines()\n      else:\n          inputs = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      outputs = solver.feed(inputs)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(outputs):\n                  print >> f, 'Case #%d: %s'%(i+1, str(v))\n      else:\n          ans = set([x.strip() for x in sample_out.split('\n') if x.strip()])\n          for i, v in enumerate(outputs):\n              t = 'Case #%d: %s'%(i+1, str(v))\n              if t not in ans:\n                  print '!!! Wrong:', t\n                  fail_flag = True\n      print '===================================================='\n      for i, v in enumerate(outputs):\n          print 'Case #%d: %s'%(i+1, str(v))\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n ", "Adversarial Code": " \n  class Solver(object):\n      def __init__(disp):\n          pass\n      \n      def solve(disp, range_active_cols):\n          r1 = int(range_active_cols[0])\n          cs1 = set([int(x) for x in range_active_cols[r1].split()])\n          r2 = int(range_active_cols[5])\n          cs2 = set([int(x) for x in range_active_cols[5+r2].split()])\n          r = cs1.intersection(cs2)\n          cnt = len(r)\n          if 1 == cnt:\n              return max(r)\n          elif 0 == cnt:\n              return 'Volunteer cheated!'\n          else:\n              return 'Bad magician!'\n          pass\n      \n      def feed(disp, range_active_cols):\n          lines = [x.strip() for x in range_active_cols]\n          problem_output = []\n          cachedValue = int(lines[0])\n          cur = 1\n          for i in range(cachedValue):\n              i = i\n              read_input = 10\n              inputFile = lines[cur:cur+read_input]\n              cur += read_input\n              problem_output.append(disp.solve(inputFile))\n          return problem_output\n  \n  if __name__ == '__main__':\n      iname = 'A-small-attempt0.in'\n      sample_in = '''\n      3\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 5 4\n  3 11 6 15\n  9 10 7 12\n  13 14 8 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  2\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n  3\n  1 2 3 4\n  5 6 7 8\n  9 10 11 12\n  13 14 15 16\n      '''\n      sample_out = '''\n   Case #1: 7\n  Case #2: Bad magician!\n  Case #3: Volunteer cheated!\n      '''\n      if os.path.exists(iname):\n          with open(iname) as f:\n              range_active_cols = f.readlines()\n      else:\n          range_active_cols = [x.strip() for x in sample_in.split('\n') if x.strip()]\n      solver = Solver()\n      problem_output = solver.feed(range_active_cols)\n      fail_flag = False\n      if os.path.exists(iname):\n          with open(iname+'.out', 'w') as f:\n              for i, v in enumerate(problem_output):\n                  print >> f, 'Case #%d: %s'%(i+1, str(v))\n      else:\n          ans = set([x.strip() for x in sample_out.split('\n') if x.strip()])\n          for i, v in enumerate(problem_output):\n              t = 'Case #%d: %s'%(i+1, str(v))\n              if t not in ans:\n                  print '!!! Wrong:', t\n                  fail_flag = True\n      print '===================================================='\n      for i, v in enumerate(problem_output):\n          print 'Case #%d: %s'%(i+1, str(v))\n      print '===================================================='\n      print 'done' if not fail_flag else 'fail'\n      pass\n ", "Program Length": 428, "Identifier Num": 24, "Replaced Identifiers": "case_line_cnt:read_input,sample_in:sample_in,test_case_n:cachedValue,case_inputs:inputFile,self:disp,inputs:range_active_cols,sample_out:sample_out,outputs:problem_output,", "Query Times": 338, "Time Cost": 0.16407572825749714, "Type": "wir"}
{"Index": 82, "Original Code": null, "Adversarial Code": null, "Program Length": 782, "Identifier Num": 14, "Replaced Identifiers": null, "Query Times": 480, "Time Cost": 0.2453699032465617, "Type": "0"}
{"Index": 83, "Original Code": null, "Adversarial Code": null, "Program Length": 364, "Identifier Num": 17, "Replaced Identifiers": null, "Query Times": 558, "Time Cost": 0.2812294920285543, "Type": "0"}
{"Index": 84, "Original Code": " \n  FILE_NAME_BASE = 'C-small-attempt0'\n  NUM_PROCESSES = 0\n  MEM_LIMIT_GB = 1.5 # per worker process\n  RECURSION_LIMIT = 1000\n  \n  def parse(inp):\n  \trows, cols, mines = (int(x) for x in inp.readline().split())\n  \treturn rows, cols, mines\n  \n  def search(rows, cols, mines):\n  \n  \tassert 0 <= mines < rows * cols\n  \tif mines == 0:\n  \t\treturn ['c' + '.' * (cols - 1)] + ['.' * cols] * (rows - 1)\n  \tif mines == rows * cols - 1:\n  \t\treturn ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  \tif rows == 1:\n  \t\treturn ['c' + '.' * (cols - 1 - mines) + '*' * mines]\n  \tif cols == 1:\n  \t\treturn ['c'] + ['.'] * (rows - 1 - mines) + ['*'] * mines\n  \n  \tif mines > rows * cols - 4:\n  \t\treturn None\n  \n  \n  \treturn None\n  \n  class SearchBoard(object):\n  \n  \tdef __init__(self, rows, cols):\n  \t\tself.counts = [[0] * (cols + 2) for _ in xrange(rows + 2)]\n  \t\tself.mineCount = 0\n  \n  \tdef addMine(self, row, col):\n  \t\tcounts = self.counts\n  \t\tassert counts[row + 1][col + 1] < 10\n  \t\ttop = counts[row + 0]\n  \t\ttop[col + 0] += 1\n  \t\ttop[col + 1] += 1\n  \t\ttop[col + 2] += 1\n  \t\tmid = counts[row + 1]\n  \t\tmid[col + 0] += 1\n  \t\tmid[col + 1] += 10\n  \t\tmid[col + 2] += 1\n  \t\tbot = counts[row + 2]\n  \t\tbot[col + 0] += 1\n  \t\tbot[col + 1] += 1\n  \t\tbot[col + 2] += 1\n  \t\tself.mineCount += 1\n  \n  \tdef removeMine(self, row, col):\n  \t\tcounts = self.counts\n  \t\tassert counts[row + 1][col + 1] >= 10\n  \t\ttop = counts[row + 0]\n  \t\ttop[col + 0] -= 1\n  \t\ttop[col + 1] -= 1\n  \t\ttop[col + 2] -= 1\n  \t\tmid = counts[row + 1]\n  \t\tmid[col + 0] -= 1\n  \t\tmid[col + 1] -= 10\n  \t\tmid[col + 2] -= 1\n  \t\tbot = counts[row + 2]\n  \t\tbot[col + 0] -= 1\n  \t\tbot[col + 1] -= 1\n  \t\tbot[col + 2] -= 1\n  \t\tself.mineCount -= 1\n  \n  \tdef checkConnected(self):\n  \t\tcounts = self.counts\n  \t\tcols = len(counts[0]) - 2\n  \t\trows = len(counts) - 2\n  \n  \t\tfor rowIdx, row in enumerate(counts):\n  \t\t\tif rowIdx == 0 or rowIdx > rows:\n  \t\t\t\tcontinue\n  \t\t\ttry:\n  \t\t\t\tcolIdx = row.index(0, 1, -1)\n  \t\t\texcept ValueError:\n  \t\t\t\tpass\n  \t\t\telse:\n  \t\t\t\tclick = (rowIdx, colIdx)\n  \t\t\t\tbreak\n  \t\telse:\n  \t\t\treturn None\n  \n  \t\trevealed = set()\n  \t\tdef reveal(row, col):\n  \t\t\tif 1 <= row <= rows and 1 <= col <= cols:\n  \t\t\t\tpos = (row, col)\n  \t\t\t\tif pos not in revealed:\n  \t\t\t\t\trevealed.add(pos)\n  \t\t\t\t\tcount = counts[row][col]\n  \t\t\t\t\tif count == 0:\n  \t\t\t\t\t\tfor dr in (-1, 0, 1):\n  \t\t\t\t\t\t\tfor dc in (-1, 0, 1):\n  \t\t\t\t\t\t\t\tif dr != 0 or dc != 0:\n  \t\t\t\t\t\t\t\t\treveal(row + dr, col + dc)\n  \t\t\t\t\telse:\n  \t\t\t\t\t\tassert count < 10\n  \t\treveal(*click)\n  \t\tnumNonMines = rows * cols - self.mineCount\n  \t\tif len(revealed) != numNonMines:\n  \t\t\tassert len(revealed) < numNonMines\n  \t\t\treturn None\n  \n  \t\tboard = [\n  \t\t\t\t['.' if cell < 10 else '*' for cell in row[1 : -1]]\n  \t\t\t\tfor row in counts[1 : -1]\n  \t\t\t\t]\n  \t\tboard[click[0] - 1][click[1] - 1] = 'c'\n  \t\treturn [''.join(row) for row in board]\n  \n  def searchBruteForce(rows, cols, mines):\n  \tif mines == rows * cols - 1:\n  \t\treturn ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  \tsearchBoard = SearchBoard(rows, cols)\n  \n  \tdef searchRec(idx, remaining):\n  \t\tif remaining == 0:\n  \t\t\treturn searchBoard.checkConnected()\n  \t\telif idx < remaining:\n  \t\t\treturn None\n  \t\telse:\n  \t\t\tpos = divmod(idx, cols)\n  \t\t\tsearchBoard.addMine(*pos)\n  \t\t\tfound = searchRec(idx - 1, remaining - 1)\n  \t\t\tsearchBoard.removeMine(*pos)\n  \t\t\tif found is not None:\n  \t\t\t\treturn found\n  \t\t\treturn searchRec(idx - 1, remaining)\n  \n  \treturn searchRec(rows * cols - 1, mines)\n  \n  def solve(rows, cols, mines):\n  \tboard = search(rows, cols, mines)\n  \n  \tif board is None:\n  \t\tboard = searchBruteForce(rows, cols, mines)\n  \t\tif board is None:\n  \t\t\treturn '\n' + 'Impossible'\n  \t\tprint 'ERROR: fast search missed solution for %dx%d board, %d mines:' \\\n  \t\t\t\t% (rows, cols, mines)\n  \t\tfor row in board:\n  \t\t\tprint row\n  \t\tprint\n  \n  \tassert len(board) == rows\n  \tassert all(len(row) == cols for row in board)\n  \tcounts = { 'c': 0, '.': 0, '*': 0 }\n  \tfor row in board:\n  \t\tfor cell in row:\n  \t\t\tcounts[cell] += 1\n  \tassert counts['c'] == 1\n  \tassert counts['*'] == mines\n  \n  \tflowBoard = [\n  \t\t\t['.' if cell == 'c' else cell for cell in row]\n  \t\t\tfor row in board\n  \t\t\t]\n  \tdef countMinesOn(row, col):\n  \t\tif 0 <= row < rows and 0 <= col < cols:\n  \t\t\treturn 1 if flowBoard[row][col] == '*' else 0\n  \t\telse:\n  \t\t\treturn 0\n  \tdef countMinesNear(row, col):\n  \t\treturn sum(\n  \t\t\tcountMinesOn(row + dr, col + dc)\n  \t\t\tfor dr in (-1, 0, 1)\n  \t\t\tfor dc in (-1, 0, 1)\n  \t\t\t)\n  \tdef reveal(row, col):\n  \t\tif 0 <= row < rows and 0 <= col < cols:\n  \t\t\tassert flowBoard[row][col] != '*'\n  \t\t\tif flowBoard[row][col] == '.':\n  \t\t\t\tcount = countMinesNear(row, col)\n  \t\t\t\tflowBoard[row][col] = str(count)\n  \t\t\t\tif count == 0:\n  \t\t\t\t\tfor dr in (-1, 0, 1):\n  \t\t\t\t\t\tfor dc in (-1, 0, 1):\n  \t\t\t\t\t\t\treveal(row + dr, col + dc)\n  \tclickRow, = [i for i, row in enumerate(board) if 'c' in row]\n  \tclickCol = board[clickRow].index('c')\n  \treveal(clickRow, clickCol)\n  \tassert all('.' not in row for row in flowBoard), flowBoard\n  \n  \tassert all(type(row) == str for row in board)\n  \treturn '\n' + ''.join('\n' + ''.join(row) for row in board)\n  \n  def main():\n  \tsys.setrecursionlimit(RECURSION_LIMIT)\n  \n  \tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  \tresource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n  \n  \tinp = open(FILE_NAME_BASE + '.in', 'r')\n  \tnumCases = int(inp.readline())\n  \tif NUM_PROCESSES == 0:\n  \t\tresults = [\n  \t\t\tsolve(*parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \telse:\n  \t\tpool = Pool(NUM_PROCESSES)\n  \t\tresults = [\n  \t\t\tpool.apply_async(solve, parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \tinp.close()\n  \tout = open(FILE_NAME_BASE + '.out', 'w')\n  \tfor case, result in enumerate(results):\n  \t\tvalue = result if NUM_PROCESSES == 0 else result.get()\n  \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n  \t\tout.flush()\n  \tout.close()\n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Adversarial Code": " \n  StopIteration = 'C-small-attempt0'\n  INPUT = 0\n  MEM_LIMIT_GB = 1.5 # per worker process\n  xr = 1000\n  \n  def parse(inp):\n  \trows, cols, mines = (int(x) for x in inp.readline().split())\n  \treturn rows, cols, mines\n  \n  def search(rows, cols, mines):\n  \n  \tassert 0 <= mines < rows * cols\n  \tif mines == 0:\n  \t\treturn ['c' + '.' * (cols - 1)] + ['.' * cols] * (rows - 1)\n  \tif mines == rows * cols - 1:\n  \t\treturn ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  \tif rows == 1:\n  \t\treturn ['c' + '.' * (cols - 1 - mines) + '*' * mines]\n  \tif cols == 1:\n  \t\treturn ['c'] + ['.'] * (rows - 1 - mines) + ['*'] * mines\n  \n  \tif mines > rows * cols - 4:\n  \t\treturn None\n  \n  \n  \treturn None\n  \n  class SearchBoard(object):\n  \n  \tdef __init__(self, rows, cols):\n  \t\tself.counts = [[0] * (cols + 2) for _ in xrange(rows + 2)]\n  \t\tself.mineCount = 0\n  \n  \tdef addMine(self, row, col):\n  \t\tcounts = self.counts\n  \t\tassert counts[row + 1][col + 1] < 10\n  \t\ttop = counts[row + 0]\n  \t\ttop[col + 0] += 1\n  \t\ttop[col + 1] += 1\n  \t\ttop[col + 2] += 1\n  \t\tmid = counts[row + 1]\n  \t\tmid[col + 0] += 1\n  \t\tmid[col + 1] += 10\n  \t\tmid[col + 2] += 1\n  \t\tbot = counts[row + 2]\n  \t\tbot[col + 0] += 1\n  \t\tbot[col + 1] += 1\n  \t\tbot[col + 2] += 1\n  \t\tself.mineCount += 1\n  \n  \tdef removeMine(self, row, col):\n  \t\tcounts = self.counts\n  \t\tassert counts[row + 1][col + 1] >= 10\n  \t\ttop = counts[row + 0]\n  \t\ttop[col + 0] -= 1\n  \t\ttop[col + 1] -= 1\n  \t\ttop[col + 2] -= 1\n  \t\tmid = counts[row + 1]\n  \t\tmid[col + 0] -= 1\n  \t\tmid[col + 1] -= 10\n  \t\tmid[col + 2] -= 1\n  \t\tbot = counts[row + 2]\n  \t\tbot[col + 0] -= 1\n  \t\tbot[col + 1] -= 1\n  \t\tbot[col + 2] -= 1\n  \t\tself.mineCount -= 1\n  \n  \tdef checkConnected(self):\n  \t\tcounts = self.counts\n  \t\tcols = len(counts[0]) - 2\n  \t\trows = len(counts) - 2\n  \n  \t\tfor rowIdx, row in enumerate(counts):\n  \t\t\tif rowIdx == 0 or rowIdx > rows:\n  \t\t\t\tcontinue\n  \t\t\ttry:\n  \t\t\t\tcolIdx = row.index(0, 1, -1)\n  \t\t\texcept ValueError:\n  \t\t\t\tpass\n  \t\t\telse:\n  \t\t\t\tclick = (rowIdx, colIdx)\n  \t\t\t\tbreak\n  \t\telse:\n  \t\t\treturn None\n  \n  \t\trevealed = set()\n  \t\tdef reveal(row, col):\n  \t\t\tif 1 <= row <= rows and 1 <= col <= cols:\n  \t\t\t\tpos = (row, col)\n  \t\t\t\tif pos not in revealed:\n  \t\t\t\t\trevealed.add(pos)\n  \t\t\t\t\tcount = counts[row][col]\n  \t\t\t\t\tif count == 0:\n  \t\t\t\t\t\tfor dr in (-1, 0, 1):\n  \t\t\t\t\t\t\tfor dc in (-1, 0, 1):\n  \t\t\t\t\t\t\t\tif dr != 0 or dc != 0:\n  \t\t\t\t\t\t\t\t\treveal(row + dr, col + dc)\n  \t\t\t\t\telse:\n  \t\t\t\t\t\tassert count < 10\n  \t\treveal(*click)\n  \t\tnumNonMines = rows * cols - self.mineCount\n  \t\tif len(revealed) != numNonMines:\n  \t\t\tassert len(revealed) < numNonMines\n  \t\t\treturn None\n  \n  \t\tboard = [\n  \t\t\t\t['.' if cell < 10 else '*' for cell in row[1 : -1]]\n  \t\t\t\tfor row in counts[1 : -1]\n  \t\t\t\t]\n  \t\tboard[click[0] - 1][click[1] - 1] = 'c'\n  \t\treturn [''.join(row) for row in board]\n  \n  def searchBruteForce(rows, cols, mines):\n  \tif mines == rows * cols - 1:\n  \t\treturn ['c' + '*' * (cols - 1)] + ['*' * cols] * (rows - 1)\n  \n  \tsearchBoard = SearchBoard(rows, cols)\n  \n  \tdef searchRec(idx, remaining):\n  \t\tif remaining == 0:\n  \t\t\treturn searchBoard.checkConnected()\n  \t\telif idx < remaining:\n  \t\t\treturn None\n  \t\telse:\n  \t\t\tpos = divmod(idx, cols)\n  \t\t\tsearchBoard.addMine(*pos)\n  \t\t\tfound = searchRec(idx - 1, remaining - 1)\n  \t\t\tsearchBoard.removeMine(*pos)\n  \t\t\tif found is not None:\n  \t\t\t\treturn found\n  \t\t\treturn searchRec(idx - 1, remaining)\n  \n  \treturn searchRec(rows * cols - 1, mines)\n  \n  def solve(rows, cols, mines):\n  \tboard = search(rows, cols, mines)\n  \n  \tif board is None:\n  \t\tboard = searchBruteForce(rows, cols, mines)\n  \t\tif board is None:\n  \t\t\treturn '\n' + 'Impossible'\n  \t\tprint 'ERROR: fast search missed solution for %dx%d board, %d mines:' \\\n  \t\t\t\t% (rows, cols, mines)\n  \t\tfor row in board:\n  \t\t\tprint row\n  \t\tprint\n  \n  \tassert len(board) == rows\n  \tassert all(len(row) == cols for row in board)\n  \tcounts = { 'c': 0, '.': 0, '*': 0 }\n  \tfor row in board:\n  \t\tfor cell in row:\n  \t\t\tcounts[cell] += 1\n  \tassert counts['c'] == 1\n  \tassert counts['*'] == mines\n  \n  \tflowBoard = [\n  \t\t\t['.' if cell == 'c' else cell for cell in row]\n  \t\t\tfor row in board\n  \t\t\t]\n  \tdef countMinesOn(row, col):\n  \t\tif 0 <= row < rows and 0 <= col < cols:\n  \t\t\treturn 1 if flowBoard[row][col] == '*' else 0\n  \t\telse:\n  \t\t\treturn 0\n  \tdef countMinesNear(row, col):\n  \t\treturn sum(\n  \t\t\tcountMinesOn(row + dr, col + dc)\n  \t\t\tfor dr in (-1, 0, 1)\n  \t\t\tfor dc in (-1, 0, 1)\n  \t\t\t)\n  \tdef reveal(row, col):\n  \t\tif 0 <= row < rows and 0 <= col < cols:\n  \t\t\tassert flowBoard[row][col] != '*'\n  \t\t\tif flowBoard[row][col] == '.':\n  \t\t\t\tcount = countMinesNear(row, col)\n  \t\t\t\tflowBoard[row][col] = str(count)\n  \t\t\t\tif count == 0:\n  \t\t\t\t\tfor dr in (-1, 0, 1):\n  \t\t\t\t\t\tfor dc in (-1, 0, 1):\n  \t\t\t\t\t\t\treveal(row + dr, col + dc)\n  \tclickRow, = [i for i, row in enumerate(board) if 'c' in row]\n  \tclickCol = board[clickRow].index('c')\n  \treveal(clickRow, clickCol)\n  \tassert all('.' not in row for row in flowBoard), flowBoard\n  \n  \tassert all(type(row) == str for row in board)\n  \treturn '\n' + ''.join('\n' + ''.join(row) for row in board)\n  \n  def main():\n  \tsys.setrecursionlimit(xr)\n  \n  \tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  \tresource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n  \n  \tinp = open(StopIteration + '.in', 'r')\n  \tnumCases = int(inp.readline())\n  \tif INPUT == 0:\n  \t\tresults = [\n  \t\t\tsolve(*parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \telse:\n  \t\tpool = Pool(INPUT)\n  \t\tresults = [\n  \t\t\tpool.apply_async(solve, parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \tinp.close()\n  \tout = open(StopIteration + '.out', 'w')\n  \tfor case, result in enumerate(results):\n  \t\tvalue = result if INPUT == 0 else result.get()\n  \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n  \t\tout.flush()\n  \tout.close()\n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Program Length": 1529, "Identifier Num": 23, "Replaced Identifiers": "NUM_PROCESSES:INPUT,FILE_NAME_BASE:StopIteration,RECURSION_LIMIT:xr,", "Query Times": 346, "Time Cost": 0.14577392339706421, "Type": "wir"}
{"Index": 85, "Original Code": " \n  FILE_NAME_BASE = 'A-small-attempt0'\n  NUM_PROCESSES = 0\n  MEM_LIMIT_GB = 1.5 # per worker process\n  RECURSION_LIMIT = 1000\n  \n  def parseBoard(inp):\n  \trowSel, = (int(x) for x in inp.readline().split())\n  \tboard = tuple(\n  \t\ttuple(int(x) for x in inp.readline().split())\n  \t\tfor _ in xrange(4)\n  \t\t)\n  \treturn board, rowSel - 1\n  \n  def parse(inp):\n  \tbefore, beforeSel = parseBoard(inp)\n  \tafter, afterSel = parseBoard(inp)\n  \treturn before, beforeSel, after, afterSel\n  \n  def solve(before, beforeSel, after, afterSel):\n  \tcandidates = set(before[beforeSel]) & set(after[afterSel])\n  \n  \tif len(candidates) == 0:\n  \t\treturn \"Volunteer cheated!\"\n  \telif len(candidates) == 1:\n  \t\treturn candidates.pop()\n  \telse:\n  \t\treturn \"Bad magician!\"\n  \n  def main():\n  \tsys.setrecursionlimit(RECURSION_LIMIT)\n  \n  \tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  \tresource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n  \n  \tinp = open(FILE_NAME_BASE + '.in', 'r')\n  \tnumCases = int(inp.readline())\n  \tif NUM_PROCESSES == 0:\n  \t\tresults = [\n  \t\t\tsolve(*parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \telse:\n  \t\tpool = Pool(NUM_PROCESSES)\n  \t\tresults = [\n  \t\t\tpool.apply_async(solve, parse(inp))\n  \t\t\tfor _ in range(numCases)\n  \t\t\t]\n  \tinp.close()\n  \tout = open(FILE_NAME_BASE + '.out', 'w')\n  \tfor case, result in enumerate(results):\n  \t\tvalue = result if NUM_PROCESSES == 0 else result.get()\n  \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n  \t\tout.flush()\n  \tout.close()\n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Adversarial Code": " \n  test_case_n = 'A-small-attempt0'\n  all_pass = 0\n  dict = 1.5 # per worker process\n  p = 1000\n  \n  def parseBoard(dict):\n  \tendx, = (int(x) for x in dict.readline().split())\n  \tCase = tuple(\n  \t\ttuple(int(x) for x in dict.readline().split())\n  \t\tfor _ in xrange(4)\n  \t\t)\n  \treturn Case, endx - 1\n  \n  def parse(dict):\n  \tbefore, remaining = parseBoard(dict)\n  \tafter, popleft = parseBoard(dict)\n  \treturn before, remaining, after, popleft\n  \n  def solve(before, remaining, after, popleft):\n  \tcandidates = set(before[remaining]) & set(after[popleft])\n  \n  \tif len(candidates) == 0:\n  \t\treturn \"Volunteer cheated!\"\n  \telif len(candidates) == 1:\n  \t\treturn candidates.pop()\n  \telse:\n  \t\treturn \"Bad magician!\"\n  \n  def main():\n  \tsys.setrecursionlimit(p)\n  \n  \tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n  \tresource.setrlimit(resource.RLIMIT_AS, (dict * 1024 ** 3, hard))\n  \n  \tdict = open(test_case_n + '.in', 'r')\n  \tIA = int(dict.readline())\n  \tif all_pass == 0:\n  \t\tresults = [\n  \t\t\tsolve(*parse(dict))\n  \t\t\tfor _ in range(IA)\n  \t\t\t]\n  \telse:\n  \t\tpool = Pool(all_pass)\n  \t\tresults = [\n  \t\t\tpool.apply_async(solve, parse(dict))\n  \t\t\tfor _ in range(IA)\n  \t\t\t]\n  \tdict.close()\n  \tout = open(test_case_n + '.out', 'w')\n  \tfor case, result in enumerate(results):\n  \t\tvalue = result if all_pass == 0 else result.get()\n  \t\tout.write('Case #%d: %s\n' % (case + 1, value))\n  \t\tout.flush()\n  \tout.close()\n  \n  if __name__ == '__main__':\n  \tmain()\n ", "Program Length": 350, "Identifier Num": 27, "Replaced Identifiers": "FILE_NAME_BASE:test_case_n,NUM_PROCESSES:all_pass,RECURSION_LIMIT:p,inp:MEM_LIMIT_GB,MEM_LIMIT_GB:dict,beforeSel:remaining,numCases:IA,afterSel:popleft,rowSel:endx,out:out,case:case,board:Case,", "Query Times": 438, "Time Cost": 0.21494405666987101, "Type": "wir"}
{"Index": 86, "Original Code": "T = int(raw_input().strip())\n  misses = set()\n  \n  for i in xrange(T):\n  \tR, C, M = map(int, raw_input().strip().split(' '))\n  \tF = R * C - M\n  \timpossible = False\n  \tif F == 1:\n  \t\tmatrix = [\"c\" + \"*\" * (C - 1)]\n  \t\tfor _ in xrange(R - 1):\n  \t\t\tmatrix.append(\"*\" * C)\n  \telif R == 1:\n  \t\tmatrix = [\"c\" + \".\" * (F - 1) + \"*\" * (C - F)]\n  \telif C == 1:\n  \t\tmatrix = [\"c\"]\n  \t\tfor _ in xrange(F - 1):\n  \t\t\tmatrix.append(\".\")\n  \t\tfor _ in xrange(R - F):\n  \t\t\tmatrix.append(\"*\")\n  \telif R == 2:\n  \t\tif F % 2 == 0 and (C > 1 and F != 2 or C == 1 and F <= 2):\n  \t\t\tmatrix = [\n  \t\t\t\t\"c\" + \".\" * (F / 2 - 1) + \"*\" * (C - F / 2),\t\n  \t\t\t\t\".\" * (F / 2) + \"*\" * (C - F / 2)\n  \t\t\t]\n  \t\telse:\n  \t\t\tmatrix = []\n  \t\t\timpossible = True\n  \telse:\n  \t\tstack = []\n  \t\tmatrix = []\n  \t\tfor j in xrange(C, 1, -1):\n  \t\t\tif F - 2 * j >= 0 and (R - 2) * j >= F - 2 * j:\n  \t\t\t\tstack.append([j, j])\n  \n  \t\twhile stack:\n  \t\t\telems = stack.pop()\n  \t\t\tse = sum(elems)\n  \t\t\tif se == F:\n  \t\t\t\tfor count in elems:\n  \t\t\t\t\tmatrix.append(\".\" * count + \"*\" * (C - count))\n  \t\t\t\tfor _ in xrange(R - len(elems)):\n  \t\t\t\t\tmatrix.append(\"*\" * C)\n  \t\t\t\tmatrix[0] = \"c\" + matrix[0][1:]\n  \t\t\t\tbreak\n  \t\t\telif len(elems) < R:\n  \t\t\t\tfor j in xrange(elems[-1], 1, -1):\n  \t\t\t\t\tif F - se - j >= 0 and (R - len(elems)) * j >= F - se:\n  \t\t\t\t\t\tstack.append(elems[::] + [j])\n  \n  \t\tif matrix == []:\n  \t\t\timpossible =True\n  \n  \tprint \"Case #%s:\" % (i + 1)\n  \tif impossible:\n  \t\tprint \"Impossible\"\n  \telse:\n  \t\tfor row in matrix:\n  \t\t\tprint row\n ", "Adversarial Code": "T = int(raw_input().strip())\n  totalPairs = set()\n  \n  for i in xrange(T):\n  \tR, C, write_case = map(int, raw_input().strip().split(' '))\n  \tF = R * C - write_case\n  \timpossible = False\n  \tif F == 1:\n  \t\tmatrix = [\"c\" + \"*\" * (C - 1)]\n  \t\tfor read_string in xrange(R - 1):\n  \t\t\tmatrix.append(\"*\" * C)\n  \telif R == 1:\n  \t\tmatrix = [\"c\" + \".\" * (F - 1) + \"*\" * (C - F)]\n  \telif C == 1:\n  \t\tmatrix = [\"c\"]\n  \t\tfor read_string in xrange(F - 1):\n  \t\t\tmatrix.append(\".\")\n  \t\tfor read_string in xrange(R - F):\n  \t\t\tmatrix.append(\"*\")\n  \telif R == 2:\n  \t\tif F % 2 == 0 and (C > 1 and F != 2 or C == 1 and F <= 2):\n  \t\t\tmatrix = [\n  \t\t\t\t\"c\" + \".\" * (F / 2 - 1) + \"*\" * (C - F / 2),\t\n  \t\t\t\t\".\" * (F / 2) + \"*\" * (C - F / 2)\n  \t\t\t]\n  \t\telse:\n  \t\t\tmatrix = []\n  \t\t\timpossible = True\n  \telse:\n  \t\tstack = []\n  \t\tmatrix = []\n  \t\tfor readSq in xrange(C, 1, -1):\n  \t\t\tif F - 2 * readSq >= 0 and (R - 2) * readSq >= F - 2 * readSq:\n  \t\t\t\tstack.append([readSq, readSq])\n  \n  \t\twhile stack:\n  \t\t\telems = stack.pop()\n  \t\t\tse = sum(elems)\n  \t\t\tif se == F:\n  \t\t\t\tfor count in elems:\n  \t\t\t\t\tmatrix.append(\".\" * count + \"*\" * (C - count))\n  \t\t\t\tfor read_string in xrange(R - len(elems)):\n  \t\t\t\t\tmatrix.append(\"*\" * C)\n  \t\t\t\tmatrix[0] = \"c\" + matrix[0][1:]\n  \t\t\t\tbreak\n  \t\t\telif len(elems) < R:\n  \t\t\t\tfor readSq in xrange(elems[-1], 1, -1):\n  \t\t\t\t\tif F - se - readSq >= 0 and (R - len(elems)) * readSq >= F - se:\n  \t\t\t\t\t\tstack.append(elems[::] + [readSq])\n  \n  \t\tif matrix == []:\n  \t\t\timpossible =True\n  \n  \tprint \"Case #%s:\" % (i + 1)\n  \tif impossible:\n  \t\tprint \"Impossible\"\n  \telse:\n  \t\tfor row in matrix:\n  \t\t\tprint row\n ", "Program Length": 475, "Identifier Num": 14, "Replaced Identifiers": "misses:totalPairs,se:se,row:row,count:count,_:read_string,j:readSq,M:write_case,", "Query Times": 311, "Time Cost": 0.15307801564534504, "Type": "wir"}
{"Index": 87, "Original Code": "T = int(raw_input().strip())\n  \n  for j in xrange(T):\n  \trow_num1 = int(raw_input().strip())\n  \tfor i in xrange(4):\n  \t\tif i + 1 == row_num1:\n  \t\t\trow1 = set(map(int, raw_input().strip().split(' ')))\n  \t\telse:\n  \t\t\traw_input()\n  \trow_num2 = int(raw_input().strip())\n  \tfor i in xrange(4):\n  \t\tif i + 1 == row_num2:\n  \t\t\trow2 = set(map(int, raw_input().strip().split(' ')))\n  \t\telse:\n  \t\t\traw_input()\n  \tcommon = row1 & row2\n  \tlc = len(common)\n  \tif lc == 1:\n  \t\tstuff = list(common)[0]\n  \telif lc > 1:\n  \t\tstuff = \"Bad magician!\"\n  \telse:\n  \t\tstuff = \"Volunteer cheated!\"\n  \n  \tprint \"Case #%s: %s\" % (j + 1, stuff)\n ", "Adversarial Code": "myCases = int(raw_input().strip())\n  \n  for testcase in xrange(myCases):\n  \trow_num1 = int(raw_input().strip())\n  \tfor inFileName in xrange(4):\n  \t\tif inFileName + 1 == row_num1:\n  \t\t\trow1 = set(map(int, raw_input().strip().split(' ')))\n  \t\telse:\n  \t\t\traw_input()\n  \trow_num2 = int(raw_input().strip())\n  \tfor inFileName in xrange(4):\n  \t\tif inFileName + 1 == row_num2:\n  \t\t\trow2 = set(map(int, raw_input().strip().split(' ')))\n  \t\telse:\n  \t\t\traw_input()\n  \trest_no_mine_for_column = row1 & row2\n  \tlc = len(rest_no_mine_for_column)\n  \tif lc == 1:\n  \t\tstuff = list(rest_no_mine_for_column)[0]\n  \telif lc > 1:\n  \t\tstuff = \"Bad magician!\"\n  \telse:\n  \t\tstuff = \"Volunteer cheated!\"\n  \n  \tprint \"Case #%s: %s\" % (testcase + 1, stuff)\n ", "Program Length": 176, "Identifier Num": 8, "Replaced Identifiers": "T:myCases,j:testcase,common:rest_no_mine_for_column,i:inFileName,", "Query Times": 145, "Time Cost": 0.08572630484898885, "Type": "wir"}
{"Index": 88, "Original Code": " \n  \n  f = open(sys.argv[1],'r')\n  \n  num = int(f.readline())\n  \n  def count(z, r, c):\n      return len(z_and_nei(z,r,c))\n  \n  def nei(z, r, c):\n      s = z_and_nei(z, r, c)\n      s -= set(z)\n      return s\n  \n  def z_and_nei(z, r, c):\n      s = set()\n      for x in z:\n          s.add(x)\n          s.add((x[0]-1,x[1]-1))\n          s.add((x[0]-1,x[1]))\n          s.add((x[0]-1,x[1]+1))\n          s.add((x[0],x[1]-1))\n          s.add((x[0],x[1]+1))\n          s.add((x[0]+1,x[1]-1))\n          s.add((x[0]+1,x[1]))\n          s.add((x[0]+1,x[1]+1))\n      o = set()\n      for x in s:\n          if x[0] < 0 or x[0] > r-1 or x[1] < 0 or x[1] > c-1:\n              o.add(x)\n      s-=o\n      return s\n  \n  def find_config(z, r, c, t):\n      if count(z,r,c) == t:\n          return z\n      if count(z,r,c) > t:\n          return []\n      n = nei(z,r,c)\n      for x in n:\n          z.append(x)\n          if find_config(z,r,c,t) != []:\n              return z\n          z.pop()\n      return []\n  \n  for i in range(num):\n      print 'Case #{}:'.format(i+1)\n      r, c, m = [int(x) for x in f.readline().split()]\n      if r*c-m == 1:\n          print 'c' + '*'*(c-1)\n          for i in range(r-1):\n              print '*'*c\n      else:\n          z = find_config([(0,0)], c, r, c*r-m)\n          if z == []:\n              print \"Impossible\"\n          else:\n              s = z_and_nei(z, c, r)\n              for j in range(r):\n                  for k in range(c):\n                      if j == 0 and k == 0:\n                          print 'c',\n                      elif (k,j) in s:\n                          print '.',\n                      else:\n                          print '*',\n                  print\n  \n  \n ", "Adversarial Code": " \n  \n  NumCases = open(sys.argv[1],'r')\n  \n  num = int(NumCases.readline())\n  \n  def count(z, r, c):\n      return len(z_and_nei(z,r,c))\n  \n  def nei(z, r, c):\n      s = z_and_nei(z, r, c)\n      s -= set(z)\n      return s\n  \n  def z_and_nei(z, r, c):\n      s = set()\n      for x in z:\n          s.add(x)\n          s.add((x[0]-1,x[1]-1))\n          s.add((x[0]-1,x[1]))\n          s.add((x[0]-1,x[1]+1))\n          s.add((x[0],x[1]-1))\n          s.add((x[0],x[1]+1))\n          s.add((x[0]+1,x[1]-1))\n          s.add((x[0]+1,x[1]))\n          s.add((x[0]+1,x[1]+1))\n      o = set()\n      for x in s:\n          if x[0] < 0 or x[0] > r-1 or x[1] < 0 or x[1] > c-1:\n              o.add(x)\n      s-=o\n      return s\n  \n  def find_config(z, r, c, t):\n      if count(z,r,c) == t:\n          return z\n      if count(z,r,c) > t:\n          return []\n      n = nei(z,r,c)\n      for x in n:\n          z.append(x)\n          if find_config(z,r,c,t) != []:\n              return z\n          z.pop()\n      return []\n  \n  for i in range(num):\n      print 'Case #{}:'.format(i+1)\n      r, c, m = [int(x) for x in NumCases.readline().split()]\n      if r*c-m == 1:\n          print 'c' + '*'*(c-1)\n          for i in range(r-1):\n              print '*'*c\n      else:\n          z = find_config([(0,0)], c, r, c*r-m)\n          if z == []:\n              print \"Impossible\"\n          else:\n              s = z_and_nei(z, c, r)\n              for j in range(r):\n                  for k in range(c):\n                      if j == 0 and k == 0:\n                          print 'c',\n                      elif (k,j) in s:\n                          print '.',\n                      else:\n                          print '*',\n                  print\n  \n  \n ", "Program Length": 556, "Identifier Num": 16, "Replaced Identifiers": "f:NumCases,", "Query Times": 155, "Time Cost": 0.06303018728892008, "Type": "wir"}
{"Index": 89, "Original Code": " \n  \n  f = open(sys.argv[1],'r')\n  \n  num = int(f.readline())\n  \n  for i in range(num):\n      q1 = int(f.readline())\n      for j in range(4):\n          if j+1 == q1:\n              line1 = f.readline()\n          else:\n              f.readline()\n      q2 = int(f.readline())\n      for j in range(4):\n          if j+1 == q2:\n              line2 = f.readline()\n          else:\n              f.readline()\n      line1 = [int(x) for x in line1.split()]\n      line2 = [int(x) for x in line2.split()]\n      count = 0\n      for x in line1:\n          if x in line2:\n              count += 1\n              y = x\n      if count == 0:\n          print 'Case #{}: Volunteer cheated!'.format(i+1)\n      elif count == 1:\n          print 'Case #{}: {}'.format(i+1, y)\n      else:\n          print 'Case #{}: Bad magician!'.format(i+1)\n ", "Adversarial Code": " \n  \n  problem_input = open(sys.argv[1],'r')\n  \n  num = int(problem_input.readline())\n  \n  for i in range(num):\n      case_counter = int(problem_input.readline())\n      for j in range(4):\n          if j+1 == case_counter:\n              line1 = problem_input.readline()\n          else:\n              problem_input.readline()\n      q2 = int(problem_input.readline())\n      for j in range(4):\n          if j+1 == q2:\n              process_case = problem_input.readline()\n          else:\n              problem_input.readline()\n      line1 = [int(x) for x in line1.split()]\n      process_case = [int(x) for x in process_case.split()]\n      count = 0\n      for x in line1:\n          if x in process_case:\n              count += 1\n              inputFile = x\n      if count == 0:\n          print 'Case #{}: Volunteer cheated!'.format(i+1)\n      elif count == 1:\n          print 'Case #{}: {}'.format(i+1, inputFile)\n      else:\n          print 'Case #{}: Bad magician!'.format(i+1)\n ", "Program Length": 201, "Identifier Num": 11, "Replaced Identifiers": "y:inputFile,f:problem_input,line2:process_case,q1:case_counter,", "Query Times": 166, "Time Cost": 0.08783804575602214, "Type": "wir"}
{"Index": 91, "Original Code": " \n  filename = \"A-small-attempt0.in\"\n  \n  inp = open(filename, \"rU\")\n  \n  n = int(inp.readline().strip())\n  \n  for case in range(1, n+1):\n      gr = lambda x: [list(map(int, inp.readline().strip().split(\" \"))) for p in range(4)][x-1]\n      ans1 = int(inp.readline().strip())\n      row1 = set(gr(ans1))\n      ans2 = int(inp.readline().strip())\n      row2 = set(gr(ans2))\n      sect = row1 & row2\n      if len(sect) <= 0:\n          print(\"Case #{}: Volunteer cheated!\".format(case))\n      elif len(sect) == 1:\n          print(\"Case #{}: {}\".format(case, sect.pop()))\n      elif len(sect) > 1:\n          print(\"Case #{}: Bad magician!\".format(case))\n      else:\n          print(\"ERROR\")\n ", "Adversarial Code": " \n  readlines = \"A-small-attempt0.in\"\n  \n  f = open(readlines, \"rU\")\n  \n  StopIteration = int(f.readline().strip())\n  \n  for case in range(1, StopIteration+1):\n      gr = lambda x: [list(map(int, f.readline().strip().split(\" \"))) for T in range(4)][x-1]\n      ans1 = int(f.readline().strip())\n      row1 = set(gr(ans1))\n      ans2 = int(f.readline().strip())\n      row2 = set(gr(ans2))\n      sect = row1 & row2\n      if len(sect) <= 0:\n          print(\"Case #{}: Volunteer cheated!\".format(case))\n      elif len(sect) == 1:\n          print(\"Case #{}: {}\".format(case, sect.pop()))\n      elif len(sect) > 1:\n          print(\"Case #{}: Bad magician!\".format(case))\n      else:\n          print(\"ERROR\")\n ", "Program Length": 192, "Identifier Num": 11, "Replaced Identifiers": "inp:f,filename:readlines,p:T,n:StopIteration,", "Query Times": 154, "Time Cost": 0.08910664319992065, "Type": "wir"}
{"Index": 92, "Original Code": " \n  def transpose(result, R, C):\n  \tresultSplitted = result.split(\"\n\")\n  \taux = R*[\"\"]\n  \tfor i in xrange(R):\n  \t\tfor j in xrange(C):\n  \t\t    aux[i] += resultSplitted[j][i]\n  \t\taux[i] += \"\n\"\n  \tresult = \"\"\n  \tfor item in aux:\n  \t\tresult += item + \"\n\"\n  \treturn result.strip()\n  \n  \n  inputFileName = sys.argv[1]\n  \n  f = file(inputFileName)\n  fout = file(\"output.txt\", \"w\")\n  \n  T = int(f.readline())\n  \n  for case in xrange(T):\n  \tdata = f.readline().strip().split(\" \")\n  \tR = int(data[0])\n  \tC = int(data[1])\n  \tM = int(data[2])\n  \n  \tresult = \"\"\n  \n  \tx = min(R,C)\n  \ty = max(R,C)\n  \n  \tif M > (y - 2)*x and M != y*x - 1:\n  \t\tN = M - (y-2)*x\n  \t\tif N%2 == 1 or y*x - M == 2:\n  \t\t\tresult = \"Impossible\"\n  \tif result != \"Impossible\":\n  \t\ti = 0\n  \t\twhile M > 0: # 2\n  \t\t\tif i < y - 2:\n  \t\t\t\tif M >= x:\n  \t\t\t\t\tresult += x*\"*\" + \"\n\"\n  \t\t\t\t\tM -= x\n  \t\t\t\t\ti += 1\n  \t\t\t\telif M <= x - 2:\n  \t\t\t\t\tresult += M*\"*\" + (x - M) * \".\" + \"\n\"\n  \t\t\t\t\tM = 0\n  \t\t\t\t\ti += 1\n  \t\t\t\telif i + 2 < y - 1:\n  \t\t\t\t\tresult += (M-1)*\"*\" + (x - M + 1) * \".\" + \"\n\" + \"*\" + (x-1)*\".\" + \"\n\"\n  \t\t\t\t\tM = 0\n  \t\t\t\t\ti += 2\n  \t\t\t\telse:\n  \t\t\t\t\tresult = \"Impossible\"\n  \t\t\t\t\tbreak\n  \t\t\telse:\n  \t\t\t\tif M%2 != 0:\n  \t\t\t\t\tresult += x*\"*\" + \"\n\"\n  \t\t\t\t\tresult += (x-1)*\"*\" + \"c\"\n  \t\t\t\telse:\n  \t\t\t\t\tn = M/2\n  \t\t\t\t\tresult += n*\"*\" + (x-n)*\".\" + \"\n\"\n  \t\t\t\t\tresult += n*\"*\" + (x-n-1)*\".\" + \"c\"\n  \t\t\t\tM = 0\n  \t\t\t\ti += 2\n  \t\t\t\t\t\n  \t\twhile i <= y - 1 and result != \"Impossible\":\n  \t\t\tif i == y - 1:\n  \t\t\t\tresult += (x-1)*\".\" + \"c\"\n  \t\t\telse:\n  \t\t\t\tresult += x*\".\" + \"\n\"\n  \t\t\ti += 1\n  \t\n  \tif R < C and result != \"Impossible\":\n  \t\tresult = transpose(result, R, C)\n  \n  \tfout.write(\"Case #%d:\n%s\n\" %(case + 1, result))\n ", "Adversarial Code": " \n  def transpose(test_case, R, C):\n  \tsolve_problem = test_case.split(\"\n\")\n  \tnum_zeroes = R*[\"\"]\n  \tfor line_of_numbers in xrange(R):\n  \t\tfor iterate_cases_nlpc in xrange(C):\n  \t\t    num_zeroes[line_of_numbers] += solve_problem[iterate_cases_nlpc][line_of_numbers]\n  \t\tnum_zeroes[line_of_numbers] += \"\n\"\n  \ttest_case = \"\"\n  \tfor NUM_PROCESSES in num_zeroes:\n  \t\ttest_case += NUM_PROCESSES + \"\n\"\n  \treturn test_case.strip()\n  \n  \n  put_mines_last_step = sys.argv[1]\n  \n  f = file(put_mines_last_step)\n  check_empty_neighbours = file(\"output.txt\", \"w\")\n  \n  CodeJamProblem = int(f.readline())\n  \n  for transcribe in xrange(CodeJamProblem):\n  \tcase_index = f.readline().strip().split(\" \")\n  \tR = int(case_index[0])\n  \tC = int(case_index[1])\n  \tM = int(case_index[2])\n  \n  \ttest_case = \"\"\n  \n  \tproblem_input = min(R,C)\n  \tSm = max(R,C)\n  \n  \tif M > (Sm - 2)*problem_input and M != Sm*problem_input - 1:\n  \t\tCASE_PRFX = M - (Sm-2)*problem_input\n  \t\tif CASE_PRFX%2 == 1 or Sm*problem_input - M == 2:\n  \t\t\ttest_case = \"Impossible\"\n  \tif test_case != \"Impossible\":\n  \t\tline_of_numbers = 0\n  \t\twhile M > 0: # 2\n  \t\t\tif line_of_numbers < Sm - 2:\n  \t\t\t\tif M >= problem_input:\n  \t\t\t\t\ttest_case += problem_input*\"*\" + \"\n\"\n  \t\t\t\t\tM -= problem_input\n  \t\t\t\t\tline_of_numbers += 1\n  \t\t\t\telif M <= problem_input - 2:\n  \t\t\t\t\ttest_case += M*\"*\" + (problem_input - M) * \".\" + \"\n\"\n  \t\t\t\t\tM = 0\n  \t\t\t\t\tline_of_numbers += 1\n  \t\t\t\telif line_of_numbers + 2 < Sm - 1:\n  \t\t\t\t\ttest_case += (M-1)*\"*\" + (problem_input - M + 1) * \".\" + \"\n\" + \"*\" + (problem_input-1)*\".\" + \"\n\"\n  \t\t\t\t\tM = 0\n  \t\t\t\t\tline_of_numbers += 2\n  \t\t\t\telse:\n  \t\t\t\t\ttest_case = \"Impossible\"\n  \t\t\t\t\tbreak\n  \t\t\telse:\n  \t\t\t\tif M%2 != 0:\n  \t\t\t\t\ttest_case += problem_input*\"*\" + \"\n\"\n  \t\t\t\t\ttest_case += (problem_input-1)*\"*\" + \"c\"\n  \t\t\t\telse:\n  \t\t\t\t\tn = M/2\n  \t\t\t\t\ttest_case += n*\"*\" + (problem_input-n)*\".\" + \"\n\"\n  \t\t\t\t\ttest_case += n*\"*\" + (problem_input-n-1)*\".\" + \"c\"\n  \t\t\t\tM = 0\n  \t\t\t\tline_of_numbers += 2\n  \t\t\t\t\t\n  \t\twhile line_of_numbers <= Sm - 1 and test_case != \"Impossible\":\n  \t\t\tif line_of_numbers == Sm - 1:\n  \t\t\t\ttest_case += (problem_input-1)*\".\" + \"c\"\n  \t\t\telse:\n  \t\t\t\ttest_case += problem_input*\".\" + \"\n\"\n  \t\t\tline_of_numbers += 1\n  \t\n  \tif R < C and test_case != \"Impossible\":\n  \t\ttest_case = transpose(test_case, R, C)\n  \n  \tcheck_empty_neighbours.write(\"Case #%d:\n%s\n\" %(transcribe + 1, test_case))\n ", "Program Length": 498, "Identifier Num": 20, "Replaced Identifiers": "resultSplitted:solve_problem,T:CodeJamProblem,j:iterate_cases_nlpc,data:case_index,item:NUM_PROCESSES,n:n,result:test_case,N:CASE_PRFX,i:line_of_numbers,aux:num_zeroes,y:Sm,case:transcribe,x:problem_input,inputFileName:put_mines_last_step,fout:check_empty_neighbours,", "Query Times": 582, "Time Cost": 0.2823725978533427, "Type": "wir"}
{"Index": 93, "Original Code": " \n  inputFileName = sys.argv[1]\n  \n  f = file(inputFileName)\n  fout = file(\"output.txt\", \"w\")\n  \n  T = eval(f.readline())\n  \n  for case in xrange(T):\n  \n  \tA1 = int(f.readline().strip())\n  \n  \tfor i in xrange(4):\n  \t\tif i == A1 - 1:\n  \t\t\tpossibles1 = f.readline().strip().split(\" \")\n  \t\telse:\n  \t\t\tf.readline().strip().split(\" \")\n  \n  \tA2 = int(f.readline().strip())\n  \n  \tfor i in xrange(4):\n  \t\tif i == A2 - 1:\n  \t\t\tpossibles2 = f.readline().strip().split(\" \")\n  \t\telse:\n  \t\t\tf.readline().strip().split(\" \")\n  \n  \tfinal = []\n  \tfor item in possibles2:\n  \t\tif item in possibles1:\n  \t\t\tfinal.append(item)\n  \n  \tif len(final) == 0:\t\n  \t\tfout.write(\"Case #%d: Volunteer cheated!\n\" %(case + 1))\n  \telif len(final) == 1:\n  \t\tfout.write(\"Case #%d: %s\n\" %(case + 1, final[0]))\n  \telse:\n  \t\tfout.write(\"Case #%d: Bad magician!\n\" %(case + 1))\n ", "Adversarial Code": " \n  TestCase = sys.argv[1]\n  \n  f = file(TestCase)\n  fout = file(\"output.txt\", \"w\")\n  \n  T = eval(f.readline())\n  \n  for case_counter in xrange(T):\n  \n  \tA1 = int(f.readline().strip())\n  \n  \tfor i in xrange(4):\n  \t\tif i == A1 - 1:\n  \t\t\tpossibles1 = f.readline().strip().split(\" \")\n  \t\telse:\n  \t\t\tf.readline().strip().split(\" \")\n  \n  \tA2 = int(f.readline().strip())\n  \n  \tfor i in xrange(4):\n  \t\tif i == A2 - 1:\n  \t\t\tpossibles2 = f.readline().strip().split(\" \")\n  \t\telse:\n  \t\t\tf.readline().strip().split(\" \")\n  \n  \tfinal = []\n  \tfor item in possibles2:\n  \t\tif item in possibles1:\n  \t\t\tfinal.append(item)\n  \n  \tif len(final) == 0:\t\n  \t\tfout.write(\"Case #%d: Volunteer cheated!\n\" %(case_counter + 1))\n  \telif len(final) == 1:\n  \t\tfout.write(\"Case #%d: %s\n\" %(case_counter + 1, final[0]))\n  \telse:\n  \t\tfout.write(\"Case #%d: Bad magician!\n\" %(case_counter + 1))\n ", "Program Length": 248, "Identifier Num": 10, "Replaced Identifiers": "inputFileName:TestCase,case:case_counter,", "Query Times": 99, "Time Cost": 0.06487630208333334, "Type": "wir"}
{"Index": 94, "Original Code": " \n  \n  EOL = \"\n\"\n  \n  \n  def is_equal_approx(x, y, epsilon=1e-6):\n      \"\"\"Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      \"\"\"\n      if -epsilon <= x - y <= epsilon:\n          return True\n  \n      if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:\n          return False\n  \n      return (-epsilon <= (x - y) / x <= epsilon\n          or -epsilon <= (x - y) / y <= epsilon)\n    \n  def read_syms(fd):\n      \"\"\"Read a line of whitespace separated symbols.\"\"\"\n      return fd.readline().strip().split()\n  \n  def read_ints(fd):\n      \"\"\"Read a line of whitespace separated integers.\"\"\"\n      return [int(p) for p in read_syms(fd)]\n  \n  def read_floats(fd):\n      \"\"\"Read a line of whitespace separated floats.\"\"\"\n      return [float(p) for p in read_syms(fd)]\n  \n  \n  class Mtrx(object):\n      \"\"\"A matrix object.\"\"\"\n      \n      def __init__(self, rows, cols, data):\n          assert len(data) == rows * cols\n          self.rows = rows\n          self.cols = cols\n          self.data = data\n          \n      def cell(self, r, c):\n          return self.data[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.rows)]\n      \n      @classmethod\n      def readfromfile(cls, fd, readfunc, rows=None, cols=None):\n          \"\"\"Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          \"\"\"\n          data = []\n          if rows is None:\n              assert cols is None\n              rows, cols = read_ints(fd)\n          else:\n              assert cols is not None\n          for _ in range(rows):\n              line = readfunc(fd)\n              assert len(line) == cols\n              data.extend(line)\n          return Mtrx(rows, cols, data)\n              \n      @classmethod\n      def read_int_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_ints, rows, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_syms, rows, cols)\n              \n      def __str__(self):\n          res = \"\"\n          for i in xrange(self.rows):\n              res += str(self.getrow(i)) + EOL\n          return res\n      \n      def __repr__(self):\n          return \"{}({}, {}, {})\".format(self.__class__.__name__, self.rows,\n                                         self.cols, self.data)\n  \n  \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      \"\"\"Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          \"\"\"Support instance methods.\"\"\"\n          return functools.partial(self.__call__, obj)\n  \n  \n  class timeit(object):\n      \"\"\"Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n              cachetotals else 0\n          print self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n  \n  def read_input(filename):\n      data = []\n      with open(filename, \"r\") as f:\n          cases = read_ints(f)[0]\n          for _ in xrange(cases):\n              case = {}\n              case[\"R\"], case[\"C\"], case[\"M\"] = read_ints(f)\n              data.append(case)\n      return data\n  \n  def make_output(fname, output):\n      CASE_PRFX = \"Case #%s: \"\n      fname = fname + time.strftime(\"%H%M%S\") + \".out\"\n      with open(fname, \"w\") as f:\n          restext = []\n          print \"Output content ===============\"\n          for i, outdata in enumerate(output):\n              line = CASE_PRFX % (i + 1,) + EOL + str(outdata) + EOL\n              print line,\n              restext.append(line)\n          print \"=\" * 30\n          f.writelines(restext)\n  \n  \n  MINE = \"*\"\n  CLICK = \"c\"\n  UNK = \".\"\n  \n  class Board(object):\n      \n      def __init__(self, r, c):\n          self.rows = r\n          self.cols = c\n          self.edge_row_idx = self.rows - 1\n          self.edge_col_idx = self.cols - 1\n          self.board = [[UNK for _ in xrange(c)] for _ in xrange(r)]\n          self.board[0][0] = CLICK\n  \n      def fill_edge_row(self, m):\n          i = self.edge_col_idx\n          while m > 0 and i >= 0:\n              self.board[self.edge_row_idx][i] = MINE\n              i -= 1\n              m -= 1\n          self.edge_row_idx -= 1\n  \n      def fill_edge_col(self, m):\n          i = self.edge_row_idx\n          while m > 0 and i >= 0:\n              self.board[i][self.edge_col_idx] = MINE\n              i -= 1\n              m -= 1\n          self.edge_col_idx -= 1\n  \n      def __str__(self):\n          return EOL.join([\"\".join(r) for r in self.board])\n  \n  @memoizeit\n  def is_stage_solvable(rows, cols, mines):\n      \"\"\"Return True iff stage is solvable. \n      Also return fill instruction:\n      0 if impossible/dontcare, 1 to fill row, 2 to fill column, \n      3 for row special (most in the row), 4 for col special (most in the col)\n      \"\"\"\n      rc = rows * cols\n      \n      if mines == rc:\n          return False, 0\n  \n      if rows == 1:\n          return mines <= rc - 1, 2\n      if cols == 1:\n          return mines <= rc - 1, 1\n      \n      if mines == rc - 1:\n          return True, 1  # doesn't matter what to fill\n      \n      if mines > rc - 4:\n          return False, 0\n      \n      if rows == 2:\n          return (False, 0) if mines == 1 else (True, 2)\n      if cols == 2:\n          return (False, 0) if mines == 1 else (True, 1)\n          \n      if rows <= cols:\n          if mines >= rows:\n              return True, 2\n          if mines == rows - 1:\n              if mines == cols - 1:\n                  if rows == 3:\n                      return False, 0\n                  return True, 4 # L shape fill, most in the column\n              else:\n                  return True, 1 # fill row\n          return True, 2 \n      else:\n          if mines >= cols:\n              return True, 1\n          if mines == cols - 1:\n              if mines == rows - 1:\n                  if cols == 3:\n                      return False, 0\n                  return True, 3 # L shape fill, most in the row\n              else:\n                  return True, 2 # fill column\n          return True, 1 \n  \n  @timeit\n  def solveit(case):\n      rows = case[\"R\"]\n      cols = case[\"C\"]\n      mines = case[\"M\"]\n      \n      b = Board(rows, cols)\n      r, c, m = rows, cols, mines\n      \n      while m >= 0:\n          okgo, howtofill = is_stage_solvable(r, c, m)\n          if not okgo:\n              return \"Impossible\"\n          if howtofill == 1: # fill row\n              b.fill_edge_row(m)\n              if m <= c:\n                  break # fill and done\n              m -= c\n              r -= 1\n          elif howtofill == 2: # fill column\n              b.fill_edge_col(m)\n              if m <= r:\n                  break # fill and done\n              m -= r\n              c -= 1\n          elif howtofill == 3: # L shape fill, most in the row\n              b.fill_edge_row(m - 1)\n              b.fill_edge_col(1)\n              break # fill and done\n          elif howtofill == 4: # L shape fill, most in the column\n              b.fill_edge_col(m - 1)\n              b.fill_edge_row(1)\n              break # fill and done\n          else:\n              assert False\n  \n      return str(b) \n  \n  \n  \n  @timeit\n  def main(fname):\n      data = read_input(fname)\n      output = []\n      for case in data:\n          statreset() # reset cache stats\n          res = solveit(case)\n          output.append(res)\n      make_output(fname, output)\n  \n  \n  if __name__ == '__main__':\n      main(\"C-small-attempt0.in\")\n ", "Adversarial Code": " \n  \n  TEST_CASES = \"\n\"\n  \n  \n  def is_equal_approx(x, y, readline=1e-6):\n      \"\"\"Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      \"\"\"\n      if -readline <= x - y <= readline:\n          return True\n  \n      if -readline <= x <= readline or -readline <= y <= readline:\n          return False\n  \n      return (-readline <= (x - y) / x <= readline\n          or -readline <= (x - y) / y <= readline)\n    \n  def read_syms(case_count):\n      \"\"\"Read a line of whitespace separated symbols.\"\"\"\n      return case_count.readline().strip().split()\n  \n  def read_ints(case_count):\n      \"\"\"Read a line of whitespace separated integers.\"\"\"\n      return [int(part_of_list_to_int) for part_of_list_to_int in read_syms(case_count)]\n  \n  def read_floats(case_count):\n      \"\"\"Read a line of whitespace separated floats.\"\"\"\n      return [float(part_of_list_to_int) for part_of_list_to_int in read_syms(case_count)]\n  \n  \n  class Mtrx(object):\n      \"\"\"A matrix object.\"\"\"\n      \n      def __init__(self, first_candidates, cols, case_index):\n          assert len(case_index) == first_candidates * cols\n          self.first_candidates = first_candidates\n          self.cols = cols\n          self.case_index = case_index\n          \n      def cell(self, r, c):\n          return self.case_index[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.first_candidates)]\n      \n      @classmethod\n      def readfromfile(cls, case_count, readfunc, first_candidates=None, cols=None):\n          \"\"\"Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          \"\"\"\n          case_index = []\n          if first_candidates is None:\n              assert cols is None\n              first_candidates, cols = read_ints(case_count)\n          else:\n              assert cols is not None\n          for _ in range(first_candidates):\n              line = readfunc(case_count)\n              assert len(line) == cols\n              case_index.extend(line)\n          return Mtrx(first_candidates, cols, case_index)\n              \n      @classmethod\n      def read_int_matrix(cls, case_count, first_candidates=None, cols=None):\n          return cls.readfromfile(case_count, read_ints, first_candidates, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, case_count, first_candidates=None, cols=None):\n          return cls.readfromfile(case_count, read_syms, first_candidates, cols)\n              \n      def __str__(self):\n          res = \"\"\n          for i in xrange(self.first_candidates):\n              res += str(self.getrow(i)) + TEST_CASES\n          return res\n      \n      def __repr__(self):\n          return \"{}({}, {}, {})\".format(self.__class__.__name__, self.first_candidates,\n                                         self.cols, self.case_index)\n  \n  \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      \"\"\"Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          \"\"\"Support instance methods.\"\"\"\n          return functools.partial(self.__call__, obj)\n  \n  \n  class timeit(object):\n      \"\"\"Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n              cachetotals else 0\n          print self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n  \n  def read_input(filename):\n      case_index = []\n      with open(filename, \"r\") as f:\n          cases = read_ints(f)[0]\n          for _ in xrange(cases):\n              case = {}\n              case[\"R\"], case[\"C\"], case[\"M\"] = read_ints(f)\n              case_index.append(case)\n      return case_index\n  \n  def make_output(fname, output):\n      CASE_PRFX = \"Case #%s: \"\n      fname = fname + time.strftime(\"%H%M%S\") + \".out\"\n      with open(fname, \"w\") as f:\n          restext = []\n          print \"Output content ===============\"\n          for i, outdata in enumerate(output):\n              line = CASE_PRFX % (i + 1,) + TEST_CASES + str(outdata) + TEST_CASES\n              print line,\n              restext.append(line)\n          print \"=\" * 30\n          f.writelines(restext)\n  \n  \n  MINE = \"*\"\n  CLICK = \"c\"\n  UNK = \".\"\n  \n  class Board(object):\n      \n      def __init__(self, r, c):\n          self.first_candidates = r\n          self.cols = c\n          self.edge_row_idx = self.first_candidates - 1\n          self.edge_col_idx = self.cols - 1\n          self.board = [[UNK for _ in xrange(c)] for _ in xrange(r)]\n          self.board[0][0] = CLICK\n  \n      def fill_edge_row(self, m):\n          i = self.edge_col_idx\n          while m > 0 and i >= 0:\n              self.board[self.edge_row_idx][i] = MINE\n              i -= 1\n              m -= 1\n          self.edge_row_idx -= 1\n  \n      def fill_edge_col(self, m):\n          i = self.edge_row_idx\n          while m > 0 and i >= 0:\n              self.board[i][self.edge_col_idx] = MINE\n              i -= 1\n              m -= 1\n          self.edge_col_idx -= 1\n  \n      def __str__(self):\n          return TEST_CASES.join([\"\".join(r) for r in self.board])\n  \n  @memoizeit\n  def is_stage_solvable(first_candidates, cols, mines):\n      \"\"\"Return True iff stage is solvable. \n      Also return fill instruction:\n      0 if impossible/dontcare, 1 to fill row, 2 to fill column, \n      3 for row special (most in the row), 4 for col special (most in the col)\n      \"\"\"\n      rc = first_candidates * cols\n      \n      if mines == rc:\n          return False, 0\n  \n      if first_candidates == 1:\n          return mines <= rc - 1, 2\n      if cols == 1:\n          return mines <= rc - 1, 1\n      \n      if mines == rc - 1:\n          return True, 1  # doesn't matter what to fill\n      \n      if mines > rc - 4:\n          return False, 0\n      \n      if first_candidates == 2:\n          return (False, 0) if mines == 1 else (True, 2)\n      if cols == 2:\n          return (False, 0) if mines == 1 else (True, 1)\n          \n      if first_candidates <= cols:\n          if mines >= first_candidates:\n              return True, 2\n          if mines == first_candidates - 1:\n              if mines == cols - 1:\n                  if first_candidates == 3:\n                      return False, 0\n                  return True, 4 # L shape fill, most in the column\n              else:\n                  return True, 1 # fill row\n          return True, 2 \n      else:\n          if mines >= cols:\n              return True, 1\n          if mines == cols - 1:\n              if mines == first_candidates - 1:\n                  if cols == 3:\n                      return False, 0\n                  return True, 3 # L shape fill, most in the row\n              else:\n                  return True, 2 # fill column\n          return True, 1 \n  \n  @timeit\n  def solveit(case):\n      first_candidates = case[\"R\"]\n      cols = case[\"C\"]\n      mines = case[\"M\"]\n      \n      b = Board(first_candidates, cols)\n      r, c, m = first_candidates, cols, mines\n      \n      while m >= 0:\n          okgo, howtofill = is_stage_solvable(r, c, m)\n          if not okgo:\n              return \"Impossible\"\n          if howtofill == 1: # fill row\n              b.fill_edge_row(m)\n              if m <= c:\n                  break # fill and done\n              m -= c\n              r -= 1\n          elif howtofill == 2: # fill column\n              b.fill_edge_col(m)\n              if m <= r:\n                  break # fill and done\n              m -= r\n              c -= 1\n          elif howtofill == 3: # L shape fill, most in the row\n              b.fill_edge_row(m - 1)\n              b.fill_edge_col(1)\n              break # fill and done\n          elif howtofill == 4: # L shape fill, most in the column\n              b.fill_edge_col(m - 1)\n              b.fill_edge_row(1)\n              break # fill and done\n          else:\n              assert False\n  \n      return str(b) \n  \n  \n  \n  @timeit\n  def main(fname):\n      case_index = read_input(fname)\n      output = []\n      for case in case_index:\n          statreset() # reset cache stats\n          res = solveit(case)\n          output.append(res)\n      make_output(fname, output)\n  \n  \n  if __name__ == '__main__':\n      main(\"C-small-attempt0.in\")\n ", "Program Length": 1508, "Identifier Num": 28, "Replaced Identifiers": "fd:case_count,epsilon:readline,cls:cls,readfunc:readfunc,p:part_of_list_to_int,rows:first_candidates,data:case_index,EOL:TEST_CASES,", "Query Times": 516, "Time Cost": 0.2589372038841248, "Type": "wir"}
{"Index": 95, "Original Code": " \n  \n  EOL = \"\n\"\n  \n  \n  def is_equal_approx(x, y, epsilon=1e-6):\n      \"\"\"Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      \"\"\"\n      if -epsilon <= x - y <= epsilon:\n          return True\n  \n      if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:\n          return False\n  \n      return (-epsilon <= (x - y) / x <= epsilon\n          or -epsilon <= (x - y) / y <= epsilon)\n    \n  def read_syms(fd):\n      \"\"\"Read a line of whitespace separated symbols.\"\"\"\n      return fd.readline().strip().split()\n  \n  def read_ints(fd):\n      \"\"\"Read a line of whitespace separated integers.\"\"\"\n      return [int(p) for p in read_syms(fd)]\n  \n  def read_floats(fd):\n      \"\"\"Read a line of whitespace separated floats.\"\"\"\n      return [float(p) for p in read_syms(fd)]\n  \n  class Mtrx(object):\n      \"\"\"A matrix object.\"\"\"\n      \n      def __init__(self, rows, cols, data):\n          assert len(data) == rows * cols\n          self.rows = rows\n          self.cols = cols\n          self.data = data\n          \n      def cell(self, r, c):\n          return self.data[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.rows)]\n      \n      @classmethod\n      def readfromfile(cls, fd, readfunc, rows=None, cols=None):\n          \"\"\"Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          \"\"\"\n          data = []\n          if rows is None:\n              assert cols is None\n              rows, cols = read_ints(fd)\n          else:\n              assert cols is not None\n          for _ in range(rows):\n              line = readfunc(fd)\n              assert len(line) == cols\n              data.extend(line)\n          return Mtrx(rows, cols, data)\n              \n      @classmethod\n      def read_int_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_ints, rows, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, fd, rows=None, cols=None):\n          return cls.readfromfile(fd, read_syms, rows, cols)\n              \n      def __str__(self):\n          res = \"\"\n          for i in xrange(self.rows):\n              res += str(self.getrow(i)) + EOL\n          return res\n      \n      def __repr__(self):\n          return \"{}({}, {}, {})\".format(self.__class__.__name__, self.rows,\n                                         self.cols, self.data)\n  \n               \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      \"\"\"Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          \"\"\"Support instance methods.\"\"\"\n          return functools.partial(self.__call__, obj)\n  \n  class timeit(object):\n      \"\"\"Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n              cachetotals else 0\n          print self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n ", "Adversarial Code": " \n  \n  isPossible = \"\n\"\n  \n  \n  def is_equal_approx(x, y, numTests=1e-6):\n      \"\"\"Returns True iff y is within relative or absolute 'epsilon' of x.\n      \n      By default, 'epsilon' is 1e-6.\n      \"\"\"\n      if -numTests <= x - y <= numTests:\n          return True\n  \n      if -numTests <= x <= numTests or -numTests <= y <= numTests:\n          return False\n  \n      return (-numTests <= (x - y) / x <= numTests\n          or -numTests <= (x - y) / y <= numTests)\n    \n  def read_syms(read_case):\n      \"\"\"Read a line of whitespace separated symbols.\"\"\"\n      return read_case.readline().strip().split()\n  \n  def read_ints(read_case):\n      \"\"\"Read a line of whitespace separated integers.\"\"\"\n      return [int(outFileName) for outFileName in read_syms(read_case)]\n  \n  def read_floats(read_case):\n      \"\"\"Read a line of whitespace separated floats.\"\"\"\n      return [float(outFileName) for outFileName in read_syms(read_case)]\n  \n  class Mtrx(object):\n      \"\"\"A matrix object.\"\"\"\n      \n      def __init__(self, inFileName, cols, inputFilename):\n          assert len(inputFilename) == inFileName * cols\n          self.inFileName = inFileName\n          self.cols = cols\n          self.inputFilename = inputFilename\n          \n      def cell(self, r, c):\n          return self.inputFilename[r * self.cols + c]\n      \n      def getrow(self, i):\n          return [self.cell(i, c) for c in xrange(self.cols)]\n  \n      def getcol(self, i):\n          return [self.cell(c, i) for c in xrange(self.inFileName)]\n      \n      @classmethod\n      def readfromfile(cls, read_case, readfunc, inFileName=None, cols=None):\n          \"\"\"Read matrix from file, assuming first line at location is `R C`.\n          \n          Return a new Mtrx object. Reading values is performed by the `readfunc`.\n          Pre-determined size can be passed using `rows` and `cols`.\n          \"\"\"\n          inputFilename = []\n          if inFileName is None:\n              assert cols is None\n              inFileName, cols = read_ints(read_case)\n          else:\n              assert cols is not None\n          for _ in range(inFileName):\n              line = readfunc(read_case)\n              assert len(line) == cols\n              inputFilename.extend(line)\n          return Mtrx(inFileName, cols, inputFilename)\n              \n      @classmethod\n      def read_int_matrix(cls, read_case, inFileName=None, cols=None):\n          return cls.readfromfile(read_case, read_ints, inFileName, cols)\n              \n      @classmethod\n      def read_sym_matrix(cls, read_case, inFileName=None, cols=None):\n          return cls.readfromfile(read_case, read_syms, inFileName, cols)\n              \n      def __str__(self):\n          res = \"\"\n          for i in xrange(self.inFileName):\n              res += str(self.getrow(i)) + isPossible\n          return res\n      \n      def __repr__(self):\n          return \"{}({}, {}, {})\".format(self.__class__.__name__, self.inFileName,\n                                         self.cols, self.inputFilename)\n  \n               \n  cachetotals = 0\n  cachemisses = 0\n  \n  def statreset():\n      global cachemisses, cachetotals\n      cachemisses = 0\n      cachetotals = 0\n  \n  class memoizeit(object):\n      \"\"\"Decorator. Caches a function's return value each time it is called.\n      \n      If called later with the same arguments, the cached value is returned \n      (not reevaluated).\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          self.cache = {}\n          \n      def __call__(self, *args):\n          \n          global cachetotals, cachemisses\n          cachetotals += 1\n          \n          try:\n              return self.cache[args]\n          except KeyError:\n              \n              cachemisses += 1\n              \n              value = self.func(*args)\n              self.cache[args] = value\n              return value\n          except TypeError:\n  \n              cachemisses += 1\n  \n              return self.func(*args)\n      \n      @property\n      def __name__(self):\n          return self.func.__name__\n      \n      def __get__(self, obj, objtype):\n          \"\"\"Support instance methods.\"\"\"\n          return functools.partial(self.__call__, obj)\n  \n  class timeit(object):\n      \"\"\"Decorator that times a function.\n      \n      When function ends, print name, runtime, return value and cache stats.\n      \"\"\"\n      \n      def __init__(self, func):\n          self.func = func\n          \n      def __call__(self, *args):\n          start = time.time()\n          value = self.func(*args)\n          delta = time.time() - start\n          cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n              cachetotals else 0\n          print self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n              delta, value, cachedata)\n          return value\n      \n      def __get__(self, obj, objtype):\n          return functools.partial(self.__call__, obj)\n  \n ", "Program Length": 717, "Identifier Num": 28, "Replaced Identifiers": "fd:read_case,epsilon:numTests,cls:cls,readfunc:readfunc,p:outFileName,rows:inFileName,data:inputFilename,EOL:isPossible,", "Query Times": 423, "Time Cost": 0.1950822353363037, "Type": "wir"}
{"Index": 97, "Original Code": " \n  def readint():\n      return int(sys.stdin.readline())\n  \n  def readintarray():\n      return map(int, sys.stdin.readline().strip().split())\n  \n  def readpairs(start=0):\n      elems = readintarray()[start:]\n      return [elems[i:i+2] for i in xrange(0, len(elems), 2)]\n  \n  def readstring():\n      return sys.stdin.readline()[:-1]\n  \n ", "Adversarial Code": " \n  def readint():\n      return int(sys.stdin.readline())\n  \n  def readintarray():\n      return map(int, sys.stdin.readline().strip().split())\n  \n  def readpairs(numTests=0):\n      OUTPUT = readintarray()[numTests:]\n      return [OUTPUT[input_file:input_file+2] for input_file in xrange(0, len(OUTPUT), 2)]\n  \n  def readstring():\n      return sys.stdin.readline()[:-1]\n  \n ", "Program Length": 102, "Identifier Num": 7, "Replaced Identifiers": "start:numTests,i:input_file,elems:OUTPUT,", "Query Times": 102, "Time Cost": 0.06828123728434245, "Type": "wir"}
{"Index": 98, "Original Code": " \n  \n  ncases = int(sys.stdin.readline().strip())\n  \n  def print_board(r, c, free):\n      board = {}\n      for row in range(0, r):\n          board[row] = {}\n          for col in range(0, c):\n              board[row][col] = '*'\n  \n      pending = free\n  \n      if free == 1:\n          board[0][0] = '.'\n      elif r == 1 or c == 1:\n          for row in range(0, r):\n              for col in range(0, c):\n                  if pending > 0:\n                      pending -= 1\n                      board[row][col] = '.'\n      else:\n          for row in range(0,2):\n              for col in range(0,2):\n                  board[row][col] = '.'\n          pending -= 4\n          col=2\n          row=2\n  \n          while pending >= 2 and (col<c or row<r):\n              if pending >= 2 and col<c:\n                  board[0][col] = '.'\n                  board[1][col] = '.'\n                  col += 1\n                  pending -= 2\n              if pending >= 2 and row<r:\n                  board[row][0] = '.'\n                  board[row][1] = '.'\n                  row += 1\n                  pending -= 2\n  \n          for row in range(2, r):\n              for col in range(2, c):\n                  if pending > 0:\n                      board[row][col] = '.'\n                      pending -= 1\n  \n      board[0][0] = 'c'\n  \n      for row in range(0, r):\n          line = ''\n          for col in range(0, c):\n              line += board[row][col]\n          print(line)\n  \n  \n  for t in range(1, ncases+1):\n      values = sys.stdin.readline().strip().split()\n      r = int(values[0])\n      c = int(values[1])\n      m = int(values[2])\n  \n      cells = r * c\n      free = cells - m\n  \n      possible = False\n  \n      if r == 1 or c == 1:\n          if free >= 1:\n              possible = True\n      elif r == 2 or c == 2:\n          if free == 1 or (free >= 4 and free%2 == 0):\n              possible = True\n      else:\n          if free == 1 or (free >= 4 and free != 5 and free != 7):\n              possible = True\n  \n      print(\"Case #{0}:\".format(t))\n  \n      if possible:\n          print_board(r, c, free)\n      else:\n          print(\"Impossible\")\n ", "Adversarial Code": " \n  \n  read_int = int(sys.stdin.readline().strip())\n  \n  def print_board(r, c, free):\n      board = {}\n      for row in range(0, r):\n          board[row] = {}\n          for col in range(0, c):\n              board[row][col] = '*'\n  \n      pending = free\n  \n      if free == 1:\n          board[0][0] = '.'\n      elif r == 1 or c == 1:\n          for row in range(0, r):\n              for col in range(0, c):\n                  if pending > 0:\n                      pending -= 1\n                      board[row][col] = '.'\n      else:\n          for row in range(0,2):\n              for col in range(0,2):\n                  board[row][col] = '.'\n          pending -= 4\n          col=2\n          row=2\n  \n          while pending >= 2 and (col<c or row<r):\n              if pending >= 2 and col<c:\n                  board[0][col] = '.'\n                  board[1][col] = '.'\n                  col += 1\n                  pending -= 2\n              if pending >= 2 and row<r:\n                  board[row][0] = '.'\n                  board[row][1] = '.'\n                  row += 1\n                  pending -= 2\n  \n          for row in range(2, r):\n              for col in range(2, c):\n                  if pending > 0:\n                      board[row][col] = '.'\n                      pending -= 1\n  \n      board[0][0] = 'c'\n  \n      for row in range(0, r):\n          line = ''\n          for col in range(0, c):\n              line += board[row][col]\n          print(line)\n  \n  \n  for t in range(1, read_int+1):\n      values = sys.stdin.readline().strip().split()\n      r = int(values[0])\n      c = int(values[1])\n      m = int(values[2])\n  \n      cells = r * c\n      free = cells - m\n  \n      possible = False\n  \n      if r == 1 or c == 1:\n          if free >= 1:\n              possible = True\n      elif r == 2 or c == 2:\n          if free == 1 or (free >= 4 and free%2 == 0):\n              possible = True\n      else:\n          if free == 1 or (free >= 4 and free != 5 and free != 7):\n              possible = True\n  \n      print(\"Case #{0}:\".format(t))\n  \n      if possible:\n          print_board(r, c, free)\n      else:\n          print(\"Impossible\")\n ", "Program Length": 497, "Identifier Num": 15, "Replaced Identifiers": "ncases:read_int,", "Query Times": 149, "Time Cost": 0.06244153579076131, "Type": "wir"}
{"Index": 99, "Original Code": " \n  \n  ncases = int(sys.stdin.readline().strip())\n  \n  def read_arrangement():\n      arr = []\n      for row in range(0,4):\n          arr.append(sys.stdin.readline().strip().split(' '))\n      return arr\n  \n  for t in range(1, ncases+1):\n      answer1 = int(sys.stdin.readline().strip())\n      arrang1 = read_arrangement()\n      answer2 = int(sys.stdin.readline().strip())\n      arrang2 = read_arrangement()\n  \n      row1 = arrang1[answer1-1]\n      row2 = arrang2[answer2-1]\n  \n      intersect = set(row1) & set(row2)\n  \n      if len(intersect) == 1:\n          print(\"Case #{0}: {1}\".format(t, intersect.pop()))\n      elif len(intersect) == 0:\n          print(\"Case #{0}: Volunteer cheated!\".format(t))\n      else:\n          print(\"Case #{0}: Bad magician!\".format(t))\n ", "Adversarial Code": " \n  \n  RR = int(sys.stdin.readline().strip())\n  \n  def read_arrangement():\n      arr = []\n      for row in range(0,4):\n          arr.append(sys.stdin.readline().strip().split(' '))\n      return arr\n  \n  for t in range(1, RR+1):\n      answer1 = int(sys.stdin.readline().strip())\n      arrang1 = read_arrangement()\n      answer2 = int(sys.stdin.readline().strip())\n      arrang2 = read_arrangement()\n  \n      row1 = arrang1[answer1-1]\n      row2 = arrang2[answer2-1]\n  \n      intersect = set(row1) & set(row2)\n  \n      if len(intersect) == 1:\n          print(\"Case #{0}: {1}\".format(t, intersect.pop()))\n      elif len(intersect) == 0:\n          print(\"Case #{0}: Volunteer cheated!\".format(t))\n      else:\n          print(\"Case #{0}: Bad magician!\".format(t))\n ", "Program Length": 190, "Identifier Num": 12, "Replaced Identifiers": "ncases:RR,", "Query Times": 59, "Time Cost": 0.04456816514333089, "Type": "wir"}
{"Index": 100, "Original Code": null, "Adversarial Code": null, "Program Length": 592, "Identifier Num": 30, "Replaced Identifiers": null, "Query Times": 735, "Time Cost": 0.38234125773111977, "Type": "0"}
{"Index": 101, "Original Code": null, "Adversarial Code": null, "Program Length": 426, "Identifier Num": 31, "Replaced Identifiers": null, "Query Times": 699, "Time Cost": 0.371816885471344, "Type": "0"}
{"Index": 102, "Original Code": "__author__ = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(\" \"))\n  LA = lambda: map(long, RL().split(\" \"))\n  FA = lambda: map(float, RL().split(\" \"))\n  \n  T = int(sys.stdin.readline())\n  \n  def clear(R,C,b, x, y):\n      b = b[:]\n      n = 0\n      for i in range(max(0,x-1), min(R,x+2)):\n          for j in range(max(0,y-1), min(C, y+2)):\n              if b[C*i+j] == '*':\n                  n += 1\n                  b = b[:C*i+j] + '.' + b[C*i+j+1:]\n      return b, n\n  mem = dict()\n  def pb(R,C,b):\n      for x in range(R):\n          print b[x*C:x*C+C]\n  \n  def board(R,C,b,x,y,M,m):\n      global mem\n      print x\n      key = (R,C,b,M,x,y,m)\n      if key in mem: return mem[key]\n      if x >= R or y >= C:\n          mem[key] = None\n      else:\n          lb = b\n          n = 0\n          good = False\n          for i in range(y,C):\n              nb,nn = clear(R,C, lb, x, i)\n              n += nn\n              if m - n - M == 0:\n                  mem[key] = nb\n                  good = True\n                  break\n              elif m - n - M < 0:\n                  break\n              lb = bb\n          mem[key] = board(R,C,bb,M,x+1,0,m-n)\n      return mem[key]\n  \n  for CASE in range(T):\n      R,C,M = IA()\n      IMPOSSIBLE = \"Impossible\"\n  \n      b = \"\"\n      cleared = R*C-M\n      for x in range(R):\n          b += \"*\" * C\n      if M == R*C-1:\n          b = \"c\" + b[1:]\n          answer = b\n      else:\n          good = False\n          x,y = 0,0\n          q = [(b,0,0,0)]\n          mem = {}\n          while not good and q:\n              board,total_cleared,x,y = q.pop(0)\n              if (board,total_cleared,x,y) in mem:\n                  continue\n              mem[(board,total_cleared,x,y)] = True\n              if x >= R: continue\n              if y >= C:\n                  q.append((last_board,total_cleared,x+1,0))\n                  continue\n              last_board = board\n              new_board, cleared_mines = clear(R,C,last_board,x,y)\n              total_cleared += cleared_mines\n  \n              if total_cleared == cleared:\n                  good = True\n                  last_board = new_board\n                  q = []\n                  break\n              elif total_cleared - cleared == -1:\n                  q.append((new_board,total_cleared,x,y+1))\n                  q.append((new_board,total_cleared,x+1,0))\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              elif total_cleared > cleared:\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              else:\n                  q.append((new_board,total_cleared,x,y+1))\n              last_board = new_board\n          if good:\n              answer = last_board\n          else:\n              answer = None\n      if not answer:\n          answer = \"Impossible\"\n      else:\n          b = \"\"\n          for x in range(R):\n              b += answer[x*C:x*C+C] + \"\n\"\n          answer = \"c\" + b[1:-1]\n      print \"Case #%d:\n%s\" % (CASE+1, answer)\n  \n ", "Adversarial Code": "read_integer = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(\" \"))\n  LA = lambda: map(long, RL().split(\" \"))\n  FA = lambda: map(float, RL().split(\" \"))\n  \n  T = int(sys.stdin.readline())\n  \n  def clear(R,C,b, x, y):\n      b = b[:]\n      n = 0\n      for i in range(max(0,x-1), min(R,x+2)):\n          for j in range(max(0,y-1), min(C, y+2)):\n              if b[C*i+j] == '*':\n                  n += 1\n                  b = b[:C*i+j] + '.' + b[C*i+j+1:]\n      return b, n\n  mem = dict()\n  def pb(R,C,b):\n      for x in range(R):\n          print b[x*C:x*C+C]\n  \n  def fout(R,C,b,x,y,M,m):\n      global mem\n      print x\n      key = (R,C,b,M,x,y,m)\n      if key in mem: return mem[key]\n      if x >= R or y >= C:\n          mem[key] = None\n      else:\n          lb = b\n          n = 0\n          good = False\n          for i in range(y,C):\n              nb,nn = clear(R,C, lb, x, i)\n              n += nn\n              if m - n - M == 0:\n                  mem[key] = nb\n                  good = True\n                  break\n              elif m - n - M < 0:\n                  break\n              lb = bb\n          mem[key] = fout(R,C,bb,M,x+1,0,m-n)\n      return mem[key]\n  \n  for CASE in range(T):\n      R,C,M = IA()\n      IMPOSSIBLE = \"Impossible\"\n  \n      b = \"\"\n      cleared = R*C-M\n      for x in range(R):\n          b += \"*\" * C\n      if M == R*C-1:\n          b = \"c\" + b[1:]\n          answer = b\n      else:\n          good = False\n          x,y = 0,0\n          q = [(b,0,0,0)]\n          mem = {}\n          while not good and q:\n              fout,total_cleared,x,y = q.pop(0)\n              if (fout,total_cleared,x,y) in mem:\n                  continue\n              mem[(fout,total_cleared,x,y)] = True\n              if x >= R: continue\n              if y >= C:\n                  q.append((last_board,total_cleared,x+1,0))\n                  continue\n              last_board = fout\n              new_board, cleared_mines = clear(R,C,last_board,x,y)\n              total_cleared += cleared_mines\n  \n              if total_cleared == cleared:\n                  good = True\n                  last_board = new_board\n                  q = []\n                  break\n              elif total_cleared - cleared == -1:\n                  q.append((new_board,total_cleared,x,y+1))\n                  q.append((new_board,total_cleared,x+1,0))\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              elif total_cleared > cleared:\n                  q.append((last_board,total_cleared-cleared_mines,x+1,0))\n              else:\n                  q.append((new_board,total_cleared,x,y+1))\n              last_board = new_board\n          if good:\n              answer = last_board\n          else:\n              answer = None\n      if not answer:\n          answer = \"Impossible\"\n      else:\n          b = \"\"\n          for x in range(R):\n              b += answer[x*C:x*C+C] + \"\n\"\n          answer = \"c\" + b[1:-1]\n      print \"Case #%d:\n%s\" % (CASE+1, answer)\n  \n ", "Program Length": 779, "Identifier Num": 30, "Replaced Identifiers": "__author__:read_integer,CASE:CASE,IMPOSSIBLE:IMPOSSIBLE,board:fout,", "Query Times": 345, "Time Cost": 0.13810164133707684, "Type": "wir"}
{"Index": 103, "Original Code": "__author__ = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(\" \"))\n  LA = lambda: map(long, RL().split(\" \"))\n  \n  T = int(sys.stdin.readline())\n  \n  for CASE in range(T):\n      g1 = IA()[0]-1\n      board1 = []\n      for i in range(4):\n          board1.append(IA())\n      g2 = IA()[0]-1\n      board2 = []\n      for i in range(4):\n          board2.append(IA())\n  \n      r1 = board1[g1]\n      r2 = board2[g2]\n  \n      answer = set(r1).intersection(r2)\n      if len(answer) > 1:\n          answer = \"Bad magician!\"\n      elif len(answer) == 0:\n          answer = \"Volunteer cheated!\"\n      else:\n          answer = list(answer)[0]\n  \n      print \"Case #%d: %s\" % (CASE+1, answer)\n  \n ", "Adversarial Code": "arrange_2 = 'jrokicki'\n  \n  RL = lambda: sys.stdin.readline().strip()\n  IA = lambda: map(int, RL().split(\" \"))\n  LA = lambda: map(long, RL().split(\" \"))\n  \n  T = int(sys.stdin.readline())\n  \n  for numNonMines in range(T):\n      g1 = IA()[0]-1\n      board1 = []\n      for i in range(4):\n          board1.append(IA())\n      g2 = IA()[0]-1\n      board2 = []\n      for i in range(4):\n          board2.append(IA())\n  \n      r1 = board1[g1]\n      r2 = board2[g2]\n  \n      answer = set(r1).intersection(r2)\n      if len(answer) > 1:\n          answer = \"Bad magician!\"\n      elif len(answer) == 0:\n          answer = \"Volunteer cheated!\"\n      else:\n          answer = list(answer)[0]\n  \n      print \"Case #%d: %s\" % (numNonMines+1, answer)\n  \n ", "Program Length": 198, "Identifier Num": 14, "Replaced Identifiers": "__author__:arrange_2,CASE:numNonMines,", "Query Times": 101, "Time Cost": 0.06774011452992758, "Type": "wir"}
{"Index": 105, "Original Code": null, "Adversarial Code": null, "Program Length": 191, "Identifier Num": 9, "Replaced Identifiers": null, "Query Times": 246, "Time Cost": 0.14181073904037475, "Type": "0"}
{"Index": 106, "Original Code": null, "Adversarial Code": null, "Program Length": 480, "Identifier Num": 22, "Replaced Identifiers": null, "Query Times": 490, "Time Cost": 0.2573646426200867, "Type": "0"}
{"Index": 107, "Original Code": null, "Adversarial Code": null, "Program Length": 196, "Identifier Num": 14, "Replaced Identifiers": null, "Query Times": 301, "Time Cost": 0.16066732009251913, "Type": "0"}
{"Index": 109, "Original Code": "T = int(input())\n  for case in range(1,T+1):\n      row1 = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==row1:\n              first = set(int(x) for x in l.split())\n      row2 = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==row2:\n              second = set(int(x) for x in l.split())\n      poss = first & second\n      if len(poss) ==0:\n          ans = 'Volunteer cheated!'\n      elif len(poss) >1:\n          ans = 'Bad magician!'\n      else:\n          ans = min(poss)\n      print(\"Case #\",case,\": \",ans,sep = '')\n ", "Adversarial Code": "__doc__ = int(input())\n  for NUM_PROCESSES in range(1,__doc__+1):\n      outfname = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==outfname:\n              first = set(int(x) for x in l.split())\n      row2 = int(input())\n      for i in range(1,5):\n          l = input()\n          if i==row2:\n              second = set(int(x) for x in l.split())\n      check = first & second\n      if len(check) ==0:\n          ans = 'Volunteer cheated!'\n      elif len(check) >1:\n          ans = 'Bad magician!'\n      else:\n          ans = min(check)\n      print(\"Case #\",NUM_PROCESSES,\": \",ans,sep = '')\n ", "Program Length": 159, "Identifier Num": 11, "Replaced Identifiers": "case:NUM_PROCESSES,T:__doc__,row1:outfname,poss:check,", "Query Times": 156, "Time Cost": 0.0942266345024109, "Type": "wir"}
{"Index": 110, "Original Code": "filename = raw_input(\"Name of file: \")\n  infile = open(filename, \"r\")\n  outfile = open(filename + \".out\", \"w\")\n  \n  \n  T = int(infile.readline()[:-1])\n  \n  def addMinesDiagonally(r, c, m):\n      field = []\n      for i in range (r):\n          row = []\n          for j in range(c):\n              row += [\".\"]\n          field += [row]\n          \n      for i in range (r + c):\n          ver = min (i, r - 1)\n          hor = max (0, 1 + i - r)\n          while ver >= 0 and hor <= c - 1 and m > 0:\n              if m == 1 and hor == c - 2 and ver == r - 2:\n                  ver -= 1\n                  hor += 1\n              field[ver][hor] = \"*\"\n              ver -= 1\n              hor += 1\n              m -= 1\n          \n      return field\n  \n  def isPossible(field):\n      if field[-1][-1] != \".\":\n          return False\n      up = True\n      left = True\n      diag = True\n      if len(field) > 1 and field[-2][-1] != \".\":\n              up = len(field[-1]) <= 1\n      if len(field[-1]) > 1 and field[-1][-2] != \".\":\n              left = len(field) <= 1\n      if len(field) > 1 and len(field[-1]) > 1 and field[-2][-2] != \".\":\n          diag = False\n      return (up and left and diag) or \\\n             ((not up) and (not left) and (not diag))\n      \n  \n  for t in range(1, T + 1):\n      items = infile.readline()[:-1].split(\" \")\n      r = int(items[0])\n      c = int(items[1])\n      m = int(items[2])\n      field = addMinesDiagonally(r, c, m)\n      if isPossible(field):\n          field[-1][-1] = \"c\"\n          s = \"\"\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          outfile.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      else:\n          s = \"IMPOSSIBLE!!!!\n\"\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          outfile.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      \n          \n      \n  \n  outfile.close()\n  infile.close()\n ", "Adversarial Code": "myCases = raw_input(\"Name of file: \")\n  except = open(myCases, \"r\")\n  Magic_2014_QA = open(myCases + \".out\", \"w\")\n  \n  \n  T = int(except.readline()[:-1])\n  \n  def addMinesDiagonally(CodeJamProblem, length_of_answer, myCases):\n      Col = []\n      for iCase in range (CodeJamProblem):\n          replace = []\n          for show in range(length_of_answer):\n              replace += [\".\"]\n          Col += [replace]\n          \n      for iCase in range (CodeJamProblem + length_of_answer):\n          zeros = min (iCase, CodeJamProblem - 1)\n          T = max (0, 1 + iCase - CodeJamProblem)\n          while zeros >= 0 and T <= length_of_answer - 1 and myCases > 0:\n              if myCases == 1 and T == length_of_answer - 2 and zeros == CodeJamProblem - 2:\n                  zeros -= 1\n                  T += 1\n              Col[zeros][T] = \"*\"\n              zeros -= 1\n              T += 1\n              myCases -= 1\n          \n      return Col\n  \n  def isPossible(Col):\n      if Col[-1][-1] != \".\":\n          return False\n      up = True\n      left = True\n      diag = True\n      if len(Col) > 1 and Col[-2][-1] != \".\":\n              up = len(Col[-1]) <= 1\n      if len(Col[-1]) > 1 and Col[-1][-2] != \".\":\n              left = len(Col) <= 1\n      if len(Col) > 1 and len(Col[-1]) > 1 and Col[-2][-2] != \".\":\n          diag = False\n      return (up and left and diag) or \\\n             ((not up) and (not left) and (not diag))\n      \n  \n  for t in range(1, T + 1):\n      items = except.readline()[:-1].split(\" \")\n      CodeJamProblem = int(items[0])\n      length_of_answer = int(items[1])\n      myCases = int(items[2])\n      Col = addMinesDiagonally(CodeJamProblem, length_of_answer, myCases)\n      if isPossible(Col):\n          Col[-1][-1] = \"c\"\n          s = \"\"\n          for line in Col:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          Magic_2014_QA.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      else:\n          s = \"IMPOSSIBLE!!!!\n\"\n          for line in Col:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          Magic_2014_QA.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      \n          \n      \n  \n  Magic_2014_QA.close()\n  except.close()\n ", "Program Length": 505, "Identifier Num": 23, "Replaced Identifiers": "filename:myCases,m:myCases,ver:zeros,c:length_of_answer,hor:T,row:replace,field:Col,cell:cell,r:CodeJamProblem,line:line,s:s,t:t,j:show,i:iCase,items:items,up:up,left:left,outfile:Magic_2014_QA,T:T,diag:diag,infile:except,", "Query Times": 744, "Time Cost": 0.4136836051940918, "Type": "wir"}
{"Index": 111, "Original Code": "filename = raw_input(\"Name of file: \")\n  f = open(filename, \"r\")\n  o = open(filename + \".out\", \"w\")\n  \n  \n  T = int(f.readline()[:-1])\n  \n  many_possible = \"Bad magician!\"\n  zero_possible = \"Volunteer cheated!\"\n  \n  for t in range(1, T + 1):\n      first = int(f.readline()[:-1]) - 1\n      grid1 = []\n      for i in range(4):\n          grid1 += [f.readline()[:-1].split(\" \")]\n          \n      second = int(f.readline()[:-1]) - 1\n      grid2 = []\n      for i in range(4):\n          grid2 += [f.readline()[:-1].split(\" \")]\n  \n      possible = []\n      for num in grid1[first]:\n          if num in grid2[second]:\n              possible += [num]\n  \n      if len(possible) == 1:\n          o.write(\"Case #%d: %s\n\" %(t, possible[0]))\n      elif len(possible) == 0:\n          o.write(\"Case #%d: %s\n\" %(t, zero_possible))\n      else:\n          o.write(\"Case #%d: %s\n\" %(t, many_possible))\n          \n      \n  \n  o.close()\n  f.close()\n ", "Adversarial Code": "badMagician = raw_input(\"Name of file: \")\n  f = open(badMagician, \"r\")\n  SearchBoard = open(badMagician + \".out\", \"w\")\n  \n  \n  parse_args = int(f.readline()[:-1])\n  \n  case_counter = \"Bad magician!\"\n  chosen_filename = \"Volunteer cheated!\"\n  \n  for StopIteration in range(1, parse_args + 1):\n      OptionParser = int(f.readline()[:-1]) - 1\n      __doc__ = []\n      for total_cases in range(4):\n          __doc__ += [f.readline()[:-1].split(\" \")]\n          \n      Y = int(f.readline()[:-1]) - 1\n      caseCnt = []\n      for total_cases in range(4):\n          caseCnt += [f.readline()[:-1].split(\" \")]\n  \n      IA = []\n      for mines_count in __doc__[OptionParser]:\n          if mines_count in caseCnt[Y]:\n              IA += [mines_count]\n  \n      if len(IA) == 1:\n          SearchBoard.write(\"Case #%d: %s\n\" %(StopIteration, IA[0]))\n      elif len(IA) == 0:\n          SearchBoard.write(\"Case #%d: %s\n\" %(StopIteration, chosen_filename))\n      else:\n          SearchBoard.write(\"Case #%d: %s\n\" %(StopIteration, case_counter))\n          \n      \n  \n  SearchBoard.close()\n  f.close()\n ", "Program Length": 252, "Identifier Num": 14, "Replaced Identifiers": "o:SearchBoard,t:StopIteration,T:parse_args,second:Y,zero_possible:chosen_filename,possible:IA,first:OptionParser,i:total_cases,num:mines_count,grid2:caseCnt,grid1:__doc__,many_possible:case_counter,filename:badMagician,", "Query Times": 438, "Time Cost": 0.23580259879430135, "Type": "wir"}
{"Index": 112, "Original Code": " \n  def DrawMines( R, C, M, Flip, gridMines, sideMines, bottomMines ):\n    x = []\n    numSpaces = 0\n    numMines = 0\n  \n    gridRows = max( R-2, 0 )\n    gridCols = max( C-2, 0 )\n  \n    for r in xrange( 0, R ):\n      x.append( [] )\n      for c in xrange( 0, C ):\n        x[ r ].append( '.' )\n        numSpaces += 1\n  \n    if gridMines > 0:\n      for r in xrange( 0, gridRows ):\n        if numMines >= gridMines:\n          break;\n        for c in xrange( 0, gridCols ):\n          x[ r ][ c ] = '*'\n          numMines += 1\n          numSpaces -= 1\n          if numMines >= gridMines:\n            break;\n  \n    for r in xrange( 0, R ):\n      if sideMines <= 0:\n        break\n      for c in xrange( gridCols, C ):\n        x[ r ][ c ] = '*'\n        numMines += 1\n        numSpaces -= 1\n        sideMines -= 1\n        if sideMines <= 0:\n          break\n  \n    for c in xrange( 0, C ):\n      if bottomMines <= 0:\n        break\n      for r in xrange( gridRows, R ):\n        x[ r ][ c ] = '*'\n        numMines += 1\n        numSpaces -= 1\n        bottomMines -= 1\n        if bottomMines <= 0:\n          break\n      \n    x[ R - 1][ C - 1 ] = 'c'\n    \n    if numMines != M and ( R * C ) - M != 1:\n      print \"ERROR!!!!!!!!!!!!!!!!!!!!!!!!\"\n      print ( R * C ) - M\n  \n  \n    o = \"\"\n  \n    if Flip:\n      for c in xrange( 0, C ):\n        for r in xrange( 0, R ):\n           o += x[ r ][ c ]\n        o += '\n'\n    else:\n      for r in xrange( 0, R ):\n        for c in xrange( 0, C ):\n           o += x[ r ][ c ]\n        o += '\n'\n  \n    return o[:-1] #strip the extra newline\n  \n  \n  \n  \n  numCases = input()\n  for case in xrange( 1, numCases + 1 ):\n    R, C, M = [int(x) for x in raw_input().split()]\n  \n    Output = None\n  \n    Flip = C > R\n    if Flip:\n      temp = R\n      R = C\n      C = temp\n  \n    NonMines = ( R * C ) - M\n    if ( NonMines == 0 ):\n      Output = \"Impossible\"\n    elif ( C == 1 ):\n      gridMines = 0\n      extraMines = M - gridMines\n      Output = DrawMines( R, C, M, Flip, gridMines, extraMines, 0 )\n    elif ( NonMines == 2 or  NonMines == 3 ):\n      Output = \"Impossible\"\n    else:\n      maxGridCols = max( 0, C - 2 )\n      maxGridRows = max( 0, R - 2 )\n      gridMines = min( M, maxGridCols * maxGridRows )\n      extraMines = M - gridMines\n      extraPairs = ( extraMines + 1 ) / 2\n      extraPairsSide = max( min( extraPairs, maxGridRows - 1 ), 0 )\n      extraPairsBottom = max( min( extraPairs - extraPairsSide, maxGridCols - 1 ), 0 )\n      safeExtraPairs = extraPairsSide + extraPairsBottom\n      blockingPairsSide = max( min( extraPairs - safeExtraPairs, 1 ), 0 )\n      blockingPairsBottom = max( min( extraPairs - blockingPairsSide - safeExtraPairs, 1 ), 0 )\n      blockingPairs = blockingPairsSide + blockingPairsBottom\n      totalPairs = safeExtraPairs + blockingPairs\n  \n      \n      if ( gridMines > 0 and extraMines % 2 != 0 and blockingPairs == 0 ):\n        extraMines += 1\n        gridMines -= 1\n  \n      if ( NonMines == 1 ):\n        if extraMines % 2 != 0:\n          extraMines += 1\n        blockingPairsSide += 1\n        blockingPairsBottom += 1\n      \n      if extraMines % 2 == 0:\n        sideMines = 2 * ( extraPairsSide + blockingPairsSide )\n        bottomMines = 2 * ( extraPairsBottom + blockingPairsBottom )\n        Output = DrawMines( R, C, M, Flip, gridMines, sideMines, bottomMines )\n      else:\n        Output = \"Impossible\"\n  \n    output = \"\n\" + Output\n    print 'Case #' + str( case ) + ': ' + str( output )\n ", "Adversarial Code": " \n  def DrawMines( R, tail, inputFileName, Flip, Board, clickCol, options ):\n    x = []\n    count_neighbors = 0\n    isfile = 0\n  \n    read_int_matrix = max( R-2, 0 )\n    find_grid = max( tail-2, 0 )\n  \n    for r in xrange( 0, R ):\n      x.append( [] )\n      for c in xrange( 0, tail ):\n        x[ r ].append( '.' )\n        count_neighbors += 1\n  \n    if Board > 0:\n      for r in xrange( 0, read_int_matrix ):\n        if isfile >= Board:\n          break;\n        for c in xrange( 0, find_grid ):\n          x[ r ][ c ] = '*'\n          isfile += 1\n          count_neighbors -= 1\n          if isfile >= Board:\n            break;\n  \n    for r in xrange( 0, R ):\n      if clickCol <= 0:\n        break\n      for c in xrange( find_grid, tail ):\n        x[ r ][ c ] = '*'\n        isfile += 1\n        count_neighbors -= 1\n        clickCol -= 1\n        if clickCol <= 0:\n          break\n  \n    for c in xrange( 0, tail ):\n      if options <= 0:\n        break\n      for r in xrange( read_int_matrix, R ):\n        x[ r ][ c ] = '*'\n        isfile += 1\n        count_neighbors -= 1\n        options -= 1\n        if options <= 0:\n          break\n      \n    x[ R - 1][ tail - 1 ] = 'c'\n    \n    if isfile != inputFileName and ( R * tail ) - inputFileName != 1:\n      print \"ERROR!!!!!!!!!!!!!!!!!!!!!!!!\"\n      print ( R * tail ) - inputFileName\n  \n  \n    o = \"\"\n  \n    if Flip:\n      for c in xrange( 0, tail ):\n        for r in xrange( 0, R ):\n           o += x[ r ][ c ]\n        o += '\n'\n    else:\n      for r in xrange( 0, R ):\n        for c in xrange( 0, tail ):\n           o += x[ r ][ c ]\n        o += '\n'\n  \n    return o[:-1] #strip the extra newline\n  \n  \n  \n  \n  numCases = input()\n  for case in xrange( 1, numCases + 1 ):\n    R, tail, inputFileName = [int(x) for x in raw_input().split()]\n  \n    Output = None\n  \n    Flip = tail > R\n    if Flip:\n      temp = R\n      R = tail\n      tail = temp\n  \n    NonMines = ( R * tail ) - inputFileName\n    if ( NonMines == 0 ):\n      Output = \"Impossible\"\n    elif ( tail == 1 ):\n      Board = 0\n      extraMines = inputFileName - Board\n      Output = DrawMines( R, tail, inputFileName, Flip, Board, extraMines, 0 )\n    elif ( NonMines == 2 or  NonMines == 3 ):\n      Output = \"Impossible\"\n    else:\n      maxGridCols = max( 0, tail - 2 )\n      maxGridRows = max( 0, R - 2 )\n      Board = min( inputFileName, maxGridCols * maxGridRows )\n      extraMines = inputFileName - Board\n      extraPairs = ( extraMines + 1 ) / 2\n      extraPairsSide = max( min( extraPairs, maxGridRows - 1 ), 0 )\n      extraPairsBottom = max( min( extraPairs - extraPairsSide, maxGridCols - 1 ), 0 )\n      safeExtraPairs = extraPairsSide + extraPairsBottom\n      blockingPairsSide = max( min( extraPairs - safeExtraPairs, 1 ), 0 )\n      blockingPairsBottom = max( min( extraPairs - blockingPairsSide - safeExtraPairs, 1 ), 0 )\n      blockingPairs = blockingPairsSide + blockingPairsBottom\n      totalPairs = safeExtraPairs + blockingPairs\n  \n      \n      if ( Board > 0 and extraMines % 2 != 0 and blockingPairs == 0 ):\n        extraMines += 1\n        Board -= 1\n  \n      if ( NonMines == 1 ):\n        if extraMines % 2 != 0:\n          extraMines += 1\n        blockingPairsSide += 1\n        blockingPairsBottom += 1\n      \n      if extraMines % 2 == 0:\n        clickCol = 2 * ( extraPairsSide + blockingPairsSide )\n        options = 2 * ( extraPairsBottom + blockingPairsBottom )\n        Output = DrawMines( R, tail, inputFileName, Flip, Board, clickCol, options )\n      else:\n        Output = \"Impossible\"\n  \n    output = \"\n\" + Output\n    print 'Case #' + str( case ) + ': ' + str( output )\n ", "Program Length": 721, "Identifier Num": 19, "Replaced Identifiers": "case:case,gridMines:Board,numSpaces:count_neighbors,bottomMines:options,sideMines:clickCol,numMines:isfile,C:tail,gridCols:find_grid,M:inputFileName,gridRows:read_int_matrix,", "Query Times": 472, "Time Cost": 0.24014904101689658, "Type": "wir"}
{"Index": 113, "Original Code": " \n  numCases = input()\n  for case in range( 1, numCases + 1 ):\n    row1 = input()\n    grid1 = []\n    for i in range( 0, 4 ):\n      grid1.append( raw_input().split() )\n  \n    cards = grid1[ row1 - 1 ]\n  \n    row2 = input()\n    grid2 = []\n    for i in range( 0, 4 ):\n      grid2.append( raw_input().split() )\n  \n    bad = True\n        \n    cards2 = grid2[ row2 - 1 ]\n  \n    numPossibleAnswers = 0\n    for card in cards:\n      for card2 in cards2:\n        if ( card == card2 ):\n          if numPossibleAnswers == 0:\n            output = card\n          numPossibleAnswers += 1\n          break\n  \n    if numPossibleAnswers == 0:\n      output = \"Volunteer cheated!\"\n    elif numPossibleAnswers > 1:\n      output = \"Bad magician!\"\n  \n    print 'Case #' + str( case ) + ': ' + str( output )\n ", "Adversarial Code": " \n  ans = input()\n  for M2 in range( 1, ans + 1 ):\n    is_forbidden = input()\n    grid1 = []\n    for both in range( 0, 4 ):\n      grid1.append( raw_input().split() )\n  \n    getcol = grid1[ is_forbidden - 1 ]\n  \n    elif = input()\n    hard = []\n    for both in range( 0, 4 ):\n      hard.append( raw_input().split() )\n  \n    read_line = True\n        \n    F = hard[ elif - 1 ]\n  \n    numPossibleAnswers = 0\n    for out in getcol:\n      for com in F:\n        if ( out == com ):\n          if numPossibleAnswers == 0:\n            tmp = out\n          numPossibleAnswers += 1\n          break\n  \n    if numPossibleAnswers == 0:\n      tmp = \"Volunteer cheated!\"\n    elif numPossibleAnswers > 1:\n      tmp = \"Bad magician!\"\n  \n    print 'Case #' + str( M2 ) + ': ' + str( tmp )\n ", "Program Length": 160, "Identifier Num": 14, "Replaced Identifiers": "numCases:ans,row1:is_forbidden,grid1:grid1,grid2:hard,card:out,row2:elif,cards:getcol,i:both,card2:com,bad:read_line,cards2:F,output:tmp,case:M2,", "Query Times": 428, "Time Cost": 0.2306657354036967, "Type": "wir"}
{"Index": 115, "Original Code": " \n  def process_case(row1, tab1, row2, tab2):\n      s1 = set(tab1[row1])\n      s2 = set(tab2[row2])\n      xset = s1 & s2\n      if len(xset) == 1:\n          result = xset.pop()\n      elif len(xset) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n      return result\n  \n  def result_gen(lines):\n      ncases = int(next(lines))\n      for ci in range(1,ncases+1):\n          row1 = int(next(lines)) - 1\n          tab1 = [line_of_numbers(next(lines)) for i in range(4)]\n          row2 = int(next(lines)) - 1\n          tab2 = [line_of_numbers(next(lines)) for i in range(4)]\n          result = process_case(row1, tab1, row2, tab2)\n          yield 'Case #{0}: {1}\n'.format(ci, result)\n      \n  def line_of_numbers(s):\n      return [int(sub) for sub in s.split()]\n  \n  def input_gen(f_in):\n      for line in f_in:\n          if line.endswith('\n'):\n              line = line[:-1]\n          yield line\n  \n  def start(basename):\n      infile = basename + '.in'\n      outfile = basename + '.out'\n      f_in = open(infile, 'r')\n      f_out = open(outfile, 'w')\n      f_out.writelines(result_gen(input_gen(f_in)))\n      f_in.close()\n      f_out.close()\n  \n  start('A-small-attempt0')\n ", "Adversarial Code": " \n  def process_case(case_number, tab1, row2, tab2):\n      s1 = set(tab1[case_number])\n      s2 = set(tab2[row2])\n      xset = s1 & s2\n      if len(xset) == 1:\n          choisis1 = xset.pop()\n      elif len(xset) == 0:\n          choisis1 = 'Volunteer cheated!'\n      else:\n          choisis1 = 'Bad magician!'\n      return choisis1\n  \n  def result_gen(inFileName):\n      iterate_cases_glpc = int(next(inFileName))\n      for Verify in range(1,iterate_cases_glpc+1):\n          case_number = int(next(inFileName)) - 1\n          tab1 = [line_of_numbers(next(inFileName)) for run_tests in range(4)]\n          row2 = int(next(inFileName)) - 1\n          tab2 = [line_of_numbers(next(inFileName)) for run_tests in range(4)]\n          choisis1 = process_case(case_number, tab1, row2, tab2)\n          yield 'Case #{0}: {1}\n'.format(Verify, choisis1)\n      \n  def line_of_numbers(s):\n      return [int(sub) for sub in s.split()]\n  \n  def input_gen(f_in):\n      for solve_inputs in f_in:\n          if solve_inputs.endswith('\n'):\n              solve_inputs = solve_inputs[:-1]\n          yield solve_inputs\n  \n  def start(basename):\n      infile = basename + '.in'\n      outfile = basename + '.out'\n      f_in = open(infile, 'r')\n      f_out = open(outfile, 'w')\n      f_out.writelines(result_gen(input_gen(f_in)))\n      f_in.close()\n      f_out.close()\n  \n  start('A-small-attempt0')\n ", "Program Length": 284, "Identifier Num": 25, "Replaced Identifiers": "lines:inFileName,ncases:iterate_cases_glpc,ci:Verify,i:run_tests,result:choisis1,line:solve_inputs,row1:case_number,", "Query Times": 280, "Time Cost": 0.14847917556762696, "Type": "wir"}
{"Index": 116, "Original Code": null, "Adversarial Code": null, "Program Length": 898, "Identifier Num": 27, "Replaced Identifiers": null, "Query Times": 720, "Time Cost": 0.4236457904179891, "Type": "0"}
{"Index": 117, "Original Code": " \n  \n  \n  \n  \n  \n  \n  class memoize(object):\n     \"\"\"Decorator. Caches a function's return value each time it is called.\n     If called later with the same arguments, the cached value is returned\n     (not reevaluated).\n     \"\"\"\n     def __init__(self, func):\n        self.func = func\n        self.cache = {}\n     def __call__(self, *args):\n        if not isinstance(args, collections.Hashable):\n           return self.func(*args)\n        if args in self.cache:\n           return self.cache[args]\n        else:\n           value = self.func(*args)\n           self.cache[args] = value\n           return value\n     def __repr__(self):\n        '''Return the function's docstring.'''\n        return self.func.__doc__\n     def __get__(self, obj, objtype):\n        '''Support instance methods.'''\n        return functools.partial(self.__call__, obj)\n  \n  \n  def precalculate():\n      \"\"\"Perform any calculations that need to be performed before the main path\n      (e.g., preparing lookup tables, etc.)\n      \n      N.B. Make sure you make any important variables global so that other\n      functions can access them.\n      \"\"\"\n      pass\n  \n  def read_input(infile):\n      \"\"\"This function should take an open input file, load in all of the\n      relevant information for a single case of the problem, and output it\n      as a single object.    \n      \"\"\"\n      def read_int():\n          return int(infile.readline().strip())\n      def read_ints():\n          return np.array(infile.readline().split(), dtype=int)\n      def read_bigints(): #For ints that won't fit directly in an int32 array\n          line = infile.readline().split()\n          return np.array(map(lambda x: int(x), line))\n      def read_float():\n          return float(infile.readline().strip())\n      def read_floats():\n          return np.array(infile.readline().split(), dtype=float)\n      def read_string():\n          return infile.readline().strip()\n      def read_strings():\n          return np.array(infile.readline().split(), dtype=object) #N.B. general dtype\n      \n      ans1 = read_int()\n      grid1 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid1[i] = read_ints()\n      \n      ans2 = read_int()\n      grid2 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid2[i] = read_ints()\n      \n      \n      case = (ans1, grid1, ans2, grid2)\n      \n      return case\n  \n  def solve_case(case):\n      \"\"\"Take the input data (structured in case) and perform any necessary\n      calculations to obtain the desired output, formatted as the appropriate\n      string.    \n      \"\"\"\n      \n      ans1, grid1, ans2, grid2 = case\n      \n      valid = set(grid1[ans1-1]) & set(grid2[ans2-1])\n      \n      \n      if len(valid) == 1:\n          output = valid.pop()\n      elif len(valid) > 1:\n          output = \"Bad magician!\"\n      elif len(valid) < 1:\n          output = \"Volunteer cheated!\"\n      return output\n  \n  \n  if __name__ == \"__main__\":\n      precalculate()\n      \n      assert len(sys.argv) == 2 #only one argument\n      assert sys.argv[1][-3:] == \".in\" #input must end with .in\n      infile = open(\"%s\" % sys.argv[1], 'r')\n      outfile = open(\"%s.out\" % sys.argv[1][:-3], 'w')\n      \n      cases = int(infile.readline().strip('\n'))\n      for i in range(cases):\n          \n          case = read_input(infile)\n          \n          output = solve_case(case)\n          \n          outfile.write('Case #%i: %s\n' % (i+1, output))\n          print 'Case #%i: %s\n' % (i+1, output)\n      \n      infile.close()\n      outfile.close()\n ", "Adversarial Code": " \n  \n  \n  \n  \n  \n  \n  class memoize(object):\n     \"\"\"Decorator. Caches a function's return value each time it is called.\n     If called later with the same arguments, the cached value is returned\n     (not reevaluated).\n     \"\"\"\n     def __init__(self, iterate_cases_1lpc):\n        self.iterate_cases_1lpc = iterate_cases_1lpc\n        self.cache = {}\n     def __call__(self, *generateMineSweeperCase):\n        if not isinstance(generateMineSweeperCase, collections.Hashable):\n           return self.iterate_cases_1lpc(*generateMineSweeperCase)\n        if generateMineSweeperCase in self.cache:\n           return self.cache[generateMineSweeperCase]\n        else:\n           read_string_stack = self.iterate_cases_1lpc(*generateMineSweeperCase)\n           self.cache[generateMineSweeperCase] = read_string_stack\n           return read_string_stack\n     def __repr__(self):\n        '''Return the function's docstring.'''\n        return self.iterate_cases_1lpc.__doc__\n     def __get__(self, to_ints, row_A_selected):\n        '''Support instance methods.'''\n        return functools.partial(self.__call__, to_ints)\n  \n  \n  def precalculate():\n      \"\"\"Perform any calculations that need to be performed before the main path\n      (e.g., preparing lookup tables, etc.)\n      \n      N.B. Make sure you make any important variables global so that other\n      functions can access them.\n      \"\"\"\n      pass\n  \n  def read_input(infile):\n      \"\"\"This function should take an open input file, load in all of the\n      relevant information for a single case of the problem, and output it\n      as a single object.    \n      \"\"\"\n      def read_int():\n          return int(infile.readline().strip())\n      def read_ints():\n          return np.array(infile.readline().split(), dtype=int)\n      def read_bigints(): #For ints that won't fit directly in an int32 array\n          line = infile.readline().split()\n          return np.array(map(lambda x: int(x), line))\n      def read_float():\n          return float(infile.readline().strip())\n      def read_floats():\n          return np.array(infile.readline().split(), dtype=float)\n      def read_string():\n          return infile.readline().strip()\n      def read_strings():\n          return np.array(infile.readline().split(), dtype=object) #N.B. general dtype\n      \n      ans1 = read_int()\n      grid1 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid1[i] = read_ints()\n      \n      ans2 = read_int()\n      grid2 = np.zeros((4,4), dtype=int)\n      for i in range(4):\n          grid2[i] = read_ints()\n      \n      \n      case = (ans1, grid1, ans2, grid2)\n      \n      return case\n  \n  def solve_case(case):\n      \"\"\"Take the input data (structured in case) and perform any necessary\n      calculations to obtain the desired output, formatted as the appropriate\n      string.    \n      \"\"\"\n      \n      ans1, grid1, ans2, grid2 = case\n      \n      valid = set(grid1[ans1-1]) & set(grid2[ans2-1])\n      \n      \n      if len(valid) == 1:\n          output = valid.pop()\n      elif len(valid) > 1:\n          output = \"Bad magician!\"\n      elif len(valid) < 1:\n          output = \"Volunteer cheated!\"\n      return output\n  \n  \n  if __name__ == \"__main__\":\n      precalculate()\n      \n      assert len(sys.argv) == 2 #only one argument\n      assert sys.argv[1][-3:] == \".in\" #input must end with .in\n      infile = open(\"%s\" % sys.argv[1], 'r')\n      outfile = open(\"%s.out\" % sys.argv[1][:-3], 'w')\n      \n      cases = int(infile.readline().strip('\n'))\n      for i in range(cases):\n          \n          case = read_input(infile)\n          \n          output = solve_case(case)\n          \n          outfile.write('Case #%i: %s\n' % (i+1, output))\n          print 'Case #%i: %s\n' % (i+1, output)\n      \n      infile.close()\n      outfile.close()\n ", "Program Length": 591, "Identifier Num": 30, "Replaced Identifiers": "case:case,valid:valid,ans1:ans1,i:i,ans2:ans2,grid2:grid2,line:line,output:output,outfile:outfile,value:read_string_stack,grid1:grid1,func:iterate_cases_1lpc,obj:to_ints,objtype:row_A_selected,args:generateMineSweeperCase,", "Query Times": 549, "Time Cost": 0.3068121671676636, "Type": "wir"}
{"Index": 118, "Original Code": " \n  T = int(raw_input())\n  for test_case in xrange(1, T + 1):\n      R, C, M = map(int, raw_input().split())\n      N = R * C\n      B = N - M\n  \n      W, H = (C, R) if R <= C else (R, C)\n  \n      if H == 1:\n          answer = [['c'] + ['.'] * (B - 1) + ['*'] * M]\n      elif M == N - 1:\n          answer = [['*'] * W for r in xrange(H)]\n          answer[0][0] = 'c'\n      elif B < 4 or B in (5, 7):\n          answer = None\n      elif H == 2:\n          if M % 2 == 0:\n              bw = B / 2\n              answer = [\n                  ['c'] + ['.'] * (bw - 1) + ['*'] * (W - bw),\n                  ['.'] * bw + ['*'] * (W - bw),\n              ]\n          else:\n              answer = None\n      else:\n          answer = [['*'] * W for y in xrange(H)]\n          answer[0][0] = 'c'\n          answer[0][1] = answer[1][0] = answer[1][1] = '.'\n          left = B - 4\n          if 2 <= left:\n              answer[0][2] = answer[1][2] = '.'\n              left -= 2\n          if 2 <= left:\n              answer[2][0] = answer[2][1] = '.'\n              left -= 2\n  \n          x = y = 3\n          while (x < W or y < H) and 2 <= left:\n              if x < W and 2 <= left:\n                  answer[0][x] = answer[1][x] = '.'\n                  left -= 2\n                  x += 1\n              if y < H and 2 <= left:\n                  answer[y][0] = answer[y][1] = '.'\n                  left -= 2\n                  y += 1\n  \n          y = 2\n          while 0 < left and y < H:\n              x = 2\n              while 0 < left and x < W:\n                  answer[y][x] = '.'\n                  left -= 1\n                  x += 1\n              y += 1\n  \n      if answer is None:\n          answer = 'Impossible'\n      else:\n          if W == R:\n              answer = map(list, zip(*answer))\n          assert len(answer) == R\n          assert len(answer[0]) == C\n          assert sum(row.count('*') for row in answer) == M\n          answer = '\n'.join([''.join(row) for row in answer])\n      print 'Case #{}:\n{}'.format(test_case, answer)\n ", "Adversarial Code": " \n  T = int(raw_input())\n  for generate in xrange(1, T + 1):\n      R, C, M = map(int, raw_input().split())\n      N = R * C\n      B = N - M\n  \n      W, H = (C, R) if R <= C else (R, C)\n  \n      if H == 1:\n          answer = [['c'] + ['.'] * (B - 1) + ['*'] * M]\n      elif M == N - 1:\n          answer = [['*'] * W for r in xrange(H)]\n          answer[0][0] = 'c'\n      elif B < 4 or B in (5, 7):\n          answer = None\n      elif H == 2:\n          if M % 2 == 0:\n              bw = B / 2\n              answer = [\n                  ['c'] + ['.'] * (bw - 1) + ['*'] * (W - bw),\n                  ['.'] * bw + ['*'] * (W - bw),\n              ]\n          else:\n              answer = None\n      else:\n          answer = [['*'] * W for y in xrange(H)]\n          answer[0][0] = 'c'\n          answer[0][1] = answer[1][0] = answer[1][1] = '.'\n          left = B - 4\n          if 2 <= left:\n              answer[0][2] = answer[1][2] = '.'\n              left -= 2\n          if 2 <= left:\n              answer[2][0] = answer[2][1] = '.'\n              left -= 2\n  \n          x = y = 3\n          while (x < W or y < H) and 2 <= left:\n              if x < W and 2 <= left:\n                  answer[0][x] = answer[1][x] = '.'\n                  left -= 2\n                  x += 1\n              if y < H and 2 <= left:\n                  answer[y][0] = answer[y][1] = '.'\n                  left -= 2\n                  y += 1\n  \n          y = 2\n          while 0 < left and y < H:\n              x = 2\n              while 0 < left and x < W:\n                  answer[y][x] = '.'\n                  left -= 1\n                  x += 1\n              y += 1\n  \n      if answer is None:\n          answer = 'Impossible'\n      else:\n          if W == R:\n              answer = map(list, zip(*answer))\n          assert len(answer) == R\n          assert len(answer[0]) == C\n          assert sum(row.count('*') for row in answer) == M\n          answer = '\n'.join([''.join(row) for row in answer])\n      print 'Case #{}:\n{}'.format(generate, answer)\n ", "Program Length": 534, "Identifier Num": 15, "Replaced Identifiers": "test_case:generate,", "Query Times": 156, "Time Cost": 0.06928818225860596, "Type": "wir"}
{"Index": 119, "Original Code": " \n  T = int(raw_input())\n  for test_case in xrange(1, T + 1):\n      N1 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N1:\n              R1 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      N2 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N2:\n              R2 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      assert 1 <= N1 <= 4\n      assert 1 <= N2 <= 4\n      assert len(R1) == len(R2) == 4\n  \n      num = set(R1) & set(R2)\n      if len(num) == 1:\n          answer = num.pop()\n      elif 1 < len(num):\n          answer = 'Bad magician!'\n      else:\n          answer = 'Volunteer cheated!'\n      print 'Case #{}: {}'.format(test_case, answer)\n ", "Adversarial Code": " \n  T = int(raw_input())\n  for dy in xrange(1, T + 1):\n      N1 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N1:\n              R1 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      N2 = int(raw_input())\n      for i in xrange(4):\n          if i + 1 == N2:\n              R2 = map(int, raw_input().split(' '))\n          else:\n              raw_input()\n      assert 1 <= N1 <= 4\n      assert 1 <= N2 <= 4\n      assert len(R1) == len(R2) == 4\n  \n      num = set(R1) & set(R2)\n      if len(num) == 1:\n          answer = num.pop()\n      elif 1 < len(num):\n          answer = 'Bad magician!'\n      else:\n          answer = 'Volunteer cheated!'\n      print 'Case #{}: {}'.format(dy, answer)\n ", "Program Length": 181, "Identifier Num": 9, "Replaced Identifiers": "test_case:dy,", "Query Times": 61, "Time Cost": 0.048762309551239016, "Type": "wir"}
{"Index": 121, "Original Code": " \n  \n  def process(chosen_row_1, arrange_1, chosen_row_2, arrange_2):\n  \trlt = 'Volunteer cheated!'\n  \tfound = False\n  \tfor i in arrange_1[chosen_row_1]:\n  \t\tif i in arrange_2[chosen_row_2]:\n  \t\t\tif not found:\n  \t\t\t\trlt = i\n  \t\t\t\tfound = True\n  \t\t\telse:\n  \t\t\t\trlt = 'Bad magician!'\n  \t\t\t\tbreak\n  \treturn rlt\n  \n  input_file = open(sys.argv[1], 'r')\n  T = int(input_file.readline())\n  for i in range(T):\n  \tchosen_row_1 = int(input_file.readline()) - 1\n  \tarrange_1 = []\n  \tarrange_1.append(map(int, input_file.readline().split()))\n  \tarrange_1.append(map(int, input_file.readline().split()))\n  \tarrange_1.append(map(int, input_file.readline().split()))\n  \tarrange_1.append(map(int, input_file.readline().split()))\n  \tchosen_row_2 = int(input_file.readline()) - 1\n  \tarrange_2 = []\n  \tarrange_2.append(map(int, input_file.readline().split()))\n  \tarrange_2.append(map(int, input_file.readline().split()))\n  \tarrange_2.append(map(int, input_file.readline().split()))\n  \tarrange_2.append(map(int, input_file.readline().split()))\n  \tprint 'Case #%d:' % (i + 1), process(chosen_row_1, arrange_1, chosen_row_2, arrange_2)\n ", "Adversarial Code": " \n  \n  def process(chosen_row_1, arrange_1, chosen_row_2, arrange_2):\n  \trlt = 'Volunteer cheated!'\n  \tfound = False\n  \tfor i in arrange_1[chosen_row_1]:\n  \t\tif i in arrange_2[chosen_row_2]:\n  \t\t\tif not found:\n  \t\t\t\trlt = i\n  \t\t\t\tfound = True\n  \t\t\telse:\n  \t\t\t\trlt = 'Bad magician!'\n  \t\t\t\tbreak\n  \treturn rlt\n  \n  num_of_cases = open(sys.argv[1], 'r')\n  T = int(num_of_cases.readline())\n  for i in range(T):\n  \tchosen_row_1 = int(num_of_cases.readline()) - 1\n  \tarrange_1 = []\n  \tarrange_1.append(map(int, num_of_cases.readline().split()))\n  \tarrange_1.append(map(int, num_of_cases.readline().split()))\n  \tarrange_1.append(map(int, num_of_cases.readline().split()))\n  \tarrange_1.append(map(int, num_of_cases.readline().split()))\n  \tchosen_row_2 = int(num_of_cases.readline()) - 1\n  \tarrange_2 = []\n  \tarrange_2.append(map(int, num_of_cases.readline().split()))\n  \tarrange_2.append(map(int, num_of_cases.readline().split()))\n  \tarrange_2.append(map(int, num_of_cases.readline().split()))\n  \tarrange_2.append(map(int, num_of_cases.readline().split()))\n  \tprint 'Case #%d:' % (i + 1), process(chosen_row_1, arrange_1, chosen_row_2, arrange_2)\n ", "Program Length": 286, "Identifier Num": 10, "Replaced Identifiers": "input_file:num_of_cases,", "Query Times": 84, "Time Cost": 0.05547032356262207, "Type": "wir"}
{"Index": 122, "Original Code": "inputFile = open('C-small-attempt8.in', 'r')\n  lines = inputFile.readlines()\n  inputFile.close()\n  \n  outputFile = open('C-small-attempt8.out', 'w')\n  \n  numTests = int(lines[0])\n  \n  for i in range(1, numTests+1):\n      [r, c, m] = map(lambda x: int(x), lines[i].split())\n  \n      openCells = r*c - m\n  \n      works = False\n      matrix = [['*']*c for j in range(r)]\n      if r >= 3 and c >= 3:\n          order = [(0,0), (0,1), (1,0), (1,1), (0,2), (1,2),\n                   (2,0), (2,1)]\n          if openCells == 1 or openCells == 4 or openCells == 6:\n              works = True\n              for (x,y) in order[:openCells]:\n                  matrix[x][y] = '.'\n              matrix[0][0] = 'c'\n              \n          elif openCells >= 8:\n              works = True\n              filledRows = openCells / c\n              if filledRows >= 2:\n                  if filledRows == r:\n                      matrix = [['.']*c for j in range(r)]\n                      matrix[0][0] = 'c'\n                  else:\n                      remainder = openCells%c\n                      if not remainder == 1:\n                          for j in range(filledRows):\n                              matrix[j] = ['.']*c\n                          matrix[filledRows] = ['.']*remainder + ['*'] * (c-remainder)\n                      elif filledRows > 2:\n                          for j in range(filledRows-1):\n                              matrix[j] = ['.']*c\n                          matrix[filledRows-1] = ['.']*(c-1) + ['*']\n                          matrix[filledRows] = ['.', '.'] + ['*']*(c-2)\n                      else:\n                          matrix[0] = ['.']*(c-1) + ['*']                        \n                          matrix[1] = ['.']*(c-1) + ['*']\n                          matrix[2] = ['.', '.', '.'] + ['*']*(c-3)\n                      matrix[0][0] = 'c'\n                  \n              else:\n                  for (x,y) in order:\n                      matrix[x][y] = '.'\n                  remainingOpen = openCells - 8\n                  if remainingOpen % 2 == 0:\n                      for j in range(remainingOpen/2):\n                          matrix[0][j+3] = '.'\n                          matrix[1][j+3] = '.'\n                  else:\n                      matrix[2][2] = '.'\n                      remainingOpen -= 1\n                      for j in range(remainingOpen/2):\n                          matrix[0][j+3] = '.'\n                          matrix[1][j+3] = '.'\n                  matrix[0][0] = 'c'\n  \n      elif r == 1:\n          works = True\n          matrix[0] = ['.']*(c-m) + ['*']*m\n          matrix[0][0] = 'c'\n      elif c == 1:\n          works = True\n          for j in range(r-m):\n              matrix[j][0] = '.'\n          matrix[0][0] = 'c'\n  \n      elif r == 2 and c == 2:\n          if m == 3:\n              works = True\n              matrix[0][0] = 'c'\n          elif m == 0:\n              works = True\n              matrix = [['c', '.'], ['.', '.']]\n      elif r == 2:\n          if m % 2 == 0 and r*c-m > 2:\n              works = True\n              matrix[0] = ['.']*(c-m/2) + ['*']*(m/2)\n              matrix[1] = ['.']*(c-m/2) + ['*']*(m/2)\n              matrix[0][0] = 'c'\n          elif r*c-m == 1:\n              works = True\n              matrix[0][0] = 'c'\n      elif c == 2:\n          if m % 2 == 0 and r*c-m > 2:\n              works = True\n              for j in range((r*c-m)/2):\n                  matrix[j] = ['.', '.']\n              matrix[0][0] = 'c'\n          elif r*c-m == 1:\n              works = True\n              matrix[0][0] = 'c'\n      \n  \n      outputFile.write('Case #'+str(i)+':\n')\n      '''if len(matrix) != r:\n          print i, matrix\n      count = 0\n      for j in range(len(matrix)):\n          for k in range(len(matrix[j])):\n              if matrix[j][k] == '*':\n                  count += 1\n      if count != m:\n          print i, matrix'''\n      if not works:\n          outputFile.write('Impossible\n')\n      else:\n          for x in range(len(matrix)):\n              for y in range(len(matrix[0])):\n                  outputFile.write(matrix[x][y])\n              outputFile.write('\n')\n  outputFile.close()\n              \n ", "Adversarial Code": "Solution = open('C-small-attempt8.in', 'r')\n  problem_input = Solution.readlines()\n  Solution.close()\n  \n  read_int_matrix = open('C-small-attempt8.out', 'w')\n  \n  case_counter = int(problem_input[0])\n  \n  for read_case in range(1, case_counter+1):\n      [StopIteration, TEST_CASES, arguments] = map(lambda list_to_float: int(list_to_float), problem_input[read_case].split())\n  \n      num_of_cases = StopIteration*TEST_CASES - arguments\n  \n      first_row_index = False\n      A = [['*']*TEST_CASES for do_trial in range(StopIteration)]\n      if StopIteration >= 3 and TEST_CASES >= 3:\n          lastSkip = [(0,0), (0,1), (1,0), (1,1), (0,2), (1,2),\n                   (2,0), (2,1)]\n          if num_of_cases == 1 or num_of_cases == 4 or num_of_cases == 6:\n              first_row_index = True\n              for (list_to_float,cachedValue) in lastSkip[:num_of_cases]:\n                  A[list_to_float][cachedValue] = '.'\n              A[0][0] = 'c'\n              \n          elif num_of_cases >= 8:\n              first_row_index = True\n              nmines = num_of_cases / TEST_CASES\n              if nmines >= 2:\n                  if nmines == StopIteration:\n                      A = [['.']*TEST_CASES for do_trial in range(StopIteration)]\n                      A[0][0] = 'c'\n                  else:\n                      remainder = num_of_cases%TEST_CASES\n                      if not remainder == 1:\n                          for do_trial in range(nmines):\n                              A[do_trial] = ['.']*TEST_CASES\n                          A[nmines] = ['.']*remainder + ['*'] * (TEST_CASES-remainder)\n                      elif nmines > 2:\n                          for do_trial in range(nmines-1):\n                              A[do_trial] = ['.']*TEST_CASES\n                          A[nmines-1] = ['.']*(TEST_CASES-1) + ['*']\n                          A[nmines] = ['.', '.'] + ['*']*(TEST_CASES-2)\n                      else:\n                          A[0] = ['.']*(TEST_CASES-1) + ['*']                        \n                          A[1] = ['.']*(TEST_CASES-1) + ['*']\n                          A[2] = ['.', '.', '.'] + ['*']*(TEST_CASES-3)\n                      A[0][0] = 'c'\n                  \n              else:\n                  for (list_to_float,cachedValue) in lastSkip:\n                      A[list_to_float][cachedValue] = '.'\n                  remainingOpen = num_of_cases - 8\n                  if remainingOpen % 2 == 0:\n                      for do_trial in range(remainingOpen/2):\n                          A[0][do_trial+3] = '.'\n                          A[1][do_trial+3] = '.'\n                  else:\n                      A[2][2] = '.'\n                      remainingOpen -= 1\n                      for do_trial in range(remainingOpen/2):\n                          A[0][do_trial+3] = '.'\n                          A[1][do_trial+3] = '.'\n                  A[0][0] = 'c'\n  \n      elif StopIteration == 1:\n          first_row_index = True\n          A[0] = ['.']*(TEST_CASES-arguments) + ['*']*arguments\n          A[0][0] = 'c'\n      elif TEST_CASES == 1:\n          first_row_index = True\n          for do_trial in range(StopIteration-arguments):\n              A[do_trial][0] = '.'\n          A[0][0] = 'c'\n  \n      elif StopIteration == 2 and TEST_CASES == 2:\n          if arguments == 3:\n              first_row_index = True\n              A[0][0] = 'c'\n          elif arguments == 0:\n              first_row_index = True\n              A = [['c', '.'], ['.', '.']]\n      elif StopIteration == 2:\n          if arguments % 2 == 0 and StopIteration*TEST_CASES-arguments > 2:\n              first_row_index = True\n              A[0] = ['.']*(TEST_CASES-arguments/2) + ['*']*(arguments/2)\n              A[1] = ['.']*(TEST_CASES-arguments/2) + ['*']*(arguments/2)\n              A[0][0] = 'c'\n          elif StopIteration*TEST_CASES-arguments == 1:\n              first_row_index = True\n              A[0][0] = 'c'\n      elif TEST_CASES == 2:\n          if arguments % 2 == 0 and StopIteration*TEST_CASES-arguments > 2:\n              first_row_index = True\n              for do_trial in range((StopIteration*TEST_CASES-arguments)/2):\n                  A[do_trial] = ['.', '.']\n              A[0][0] = 'c'\n          elif StopIteration*TEST_CASES-arguments == 1:\n              first_row_index = True\n              A[0][0] = 'c'\n      \n  \n      read_int_matrix.write('Case #'+str(read_case)+':\n')\n      '''if len(matrix) != r:\n          print i, matrix\n      count = 0\n      for j in range(len(matrix)):\n          for k in range(len(matrix[j])):\n              if matrix[j][k] == '*':\n                  count += 1\n      if count != m:\n          print i, matrix'''\n      if not first_row_index:\n          read_int_matrix.write('Impossible\n')\n      else:\n          for list_to_float in range(len(A)):\n              for cachedValue in range(len(A[0])):\n                  read_int_matrix.write(A[list_to_float][cachedValue])\n              read_int_matrix.write('\n')\n  read_int_matrix.close()\n              \n ", "Program Length": 946, "Identifier Num": 17, "Replaced Identifiers": "openCells:num_of_cases,filledRows:nmines,lines:problem_input,matrix:A,j:do_trial,c:TEST_CASES,x:list_to_float,remainder:remainder,remainingOpen:remainingOpen,y:cachedValue,works:first_row_index,order:lastSkip,r:StopIteration,m:arguments,i:read_case,outputFile:read_int_matrix,numTests:case_counter,inputFile:Solution,", "Query Times": 728, "Time Cost": 0.38298937877019246, "Type": "wir"}
{"Index": 123, "Original Code": "inputFile = open('A-small-attempt0.in', 'r')\n  lines = inputFile.readlines()\n  inputFile.close()\n  \n  outputFile = open('A-small-attempt0.out', 'w')\n  \n  numTests = int(lines[0])\n  \n  \n  currLine = 1\n  for i in range(1, numTests+1):\n      firstRow = lines[int(lines[currLine])+currLine]\n      currLine += 5\n      secondRow = lines[int(lines[currLine])+currLine]\n      currLine += 5\n  \n      firstNums = map(lambda x: int(x), firstRow.split())\n      secondNums = map(lambda x: int(x), secondRow.split())\n      \n      intersect = [v for v in firstNums if v in secondNums]\n  \n      outputFile.write('Case #'+str(i)+': ')\n      if len(intersect) == 1:\n          outputFile.write(str(intersect[0])+'\n')\n      elif len(intersect) == 0:\n          outputFile.write('Volunteer cheated!\n')\n      else:\n          outputFile.write('Bad magician!\n')\n  \n  outputFile.close()\n      \n ", "Adversarial Code": "col = open('A-small-attempt0.in', 'r')\n  lines = col.readlines()\n  col.close()\n  \n  outputFile = open('A-small-attempt0.out', 'w')\n  \n  caseNum = int(lines[0])\n  \n  \n  True = 1\n  for __class__ in range(1, caseNum+1):\n      read_arr = lines[int(lines[True])+True]\n      True += 5\n      f_in = lines[int(lines[True])+True]\n      True += 5\n  \n      outfile = map(lambda x: int(x), read_arr.split())\n      outputFile = map(lambda x: int(x), f_in.split())\n      \n      listdir = [isfile for isfile in outfile if isfile in outputFile]\n  \n      outputFile.write('Case #'+str(__class__)+': ')\n      if len(listdir) == 1:\n          outputFile.write(str(listdir[0])+'\n')\n      elif len(listdir) == 0:\n          outputFile.write('Volunteer cheated!\n')\n      else:\n          outputFile.write('Bad magician!\n')\n  \n  outputFile.close()\n      \n ", "Program Length": 206, "Identifier Num": 12, "Replaced Identifiers": "numTests:caseNum,currLine:True,firstNums:outfile,secondNums:outputFile,secondRow:f_in,firstRow:read_arr,v:isfile,i:__class__,intersect:listdir,inputFile:col,", "Query Times": 344, "Time Cost": 0.17391886711120605, "Type": "wir"}
{"Index": 124, "Original Code": " \n  INPUT = 'C-small-attempt0.in'\n  OUTPUT = 'C-small-attempt0.out'\n  \n  \n  def solve(R, C, M):\n      grid = [[0 for c in range(C)] for r in range(R)]\n  \n      def get_cell(cell_r, cell_c):\n          if not(0 <= cell_r < R):\n              return None\n          if not(0 <= cell_c < C):\n              return None\n          return grid[cell_r][cell_c]\n  \n      def for_each_neighbour(cell_r, cell_c, func):\n          ret = []\n          coords = (\n              (cell_r - 1, cell_c - 1), (cell_r - 1, cell_c), (cell_r - 1, cell_c + 1),\n              (cell_r, cell_c - 1), (cell_r, cell_c + 1),\n              (cell_r + 1, cell_c - 1), (cell_r + 1, cell_c), (cell_r + 1, cell_c + 1)\n          )\n          for nb in coords:\n              if get_cell(nb[0], nb[1]) is not None:\n                  ret.append(func(nb[0], nb[1]))\n          return ret\n  \n      def mark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] += 1\n      \n      def unmark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] -= 1\n  \n      def check_empty_neighbours(cell_r, cell_c):\n          return (0 in for_each_neighbour(cell_r, cell_c, lambda r, c: get_cell(r, c)))\n  \n      def click():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell != '*':\n                      if cell == 0 or ((R * C - M) == 1):\n                          grid[i][j] = 'c'\n                          return\n  \n      def place_mine():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell == '*':\n                      continue\n                  prevstate = grid[i][j]\n                  grid[i][j] = '*'\n                  for_each_neighbour(i, j, mark_dirty)\n                  if not (True in for_each_neighbour(i, j, check_empty_neighbours)):\n                      grid[i][j] = prevstate\n                      for_each_neighbour(i, j, unmark_dirty)\n                  else:\n                      return True\n          return False\n  \n      for m in range(M):\n          if not place_mine():\n              return 'Impossible\n'\n  \n      click()\n  \n      ret = ''\n      for row in grid:\n          ret = ret + ''.join(map(lambda c: '.' if isinstance(c, int) else c, row)) + '\n'\n  \n      return ret\n  \n  \n  if __name__ == '__main__':\n      inp = open(INPUT)\n      out = open(OUTPUT, 'w')\n      \n      T = int(inp.readline())\n  \n      for case in range(T):\n          sol = solve(*map(int, inp.readline().split()))\n          out.write('Case #%i:\n%s' % (case + 1, sol))\n ", "Adversarial Code": " \n  find_click_point = 'C-small-attempt0.in'\n  MEM_LIMIT_GB = 'C-small-attempt0.out'\n  \n  \n  def solve(R, C, parse_single):\n      grid = [[0 for c in range(C)] for r in range(R)]\n  \n      def get_cell(cell_r, cell_c):\n          if not(0 <= cell_r < R):\n              return None\n          if not(0 <= cell_c < C):\n              return None\n          return grid[cell_r][cell_c]\n  \n      def for_each_neighbour(cell_r, cell_c, CodeJamProblem):\n          ret = []\n          coords = (\n              (cell_r - 1, cell_c - 1), (cell_r - 1, cell_c), (cell_r - 1, cell_c + 1),\n              (cell_r, cell_c - 1), (cell_r, cell_c + 1),\n              (cell_r + 1, cell_c - 1), (cell_r + 1, cell_c), (cell_r + 1, cell_c + 1)\n          )\n          for nb in coords:\n              if get_cell(nb[0], nb[1]) is not None:\n                  ret.append(CodeJamProblem(nb[0], nb[1]))\n          return ret\n  \n      def mark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] += 1\n      \n      def unmark_dirty(cell_r, cell_c):\n          if grid[cell_r][cell_c] != '*':\n              grid[cell_r][cell_c] -= 1\n  \n      def check_empty_neighbours(cell_r, cell_c):\n          return (0 in for_each_neighbour(cell_r, cell_c, lambda r, c: get_cell(r, c)))\n  \n      def click():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell != '*':\n                      if cell == 0 or ((R * C - parse_single) == 1):\n                          grid[i][j] = 'c'\n                          return\n  \n      def place_mine():\n          for i, row in enumerate(grid):\n              for j, cell in enumerate(row):\n                  if cell == '*':\n                      continue\n                  prevstate = grid[i][j]\n                  grid[i][j] = '*'\n                  for_each_neighbour(i, j, mark_dirty)\n                  if not (True in for_each_neighbour(i, j, check_empty_neighbours)):\n                      grid[i][j] = prevstate\n                      for_each_neighbour(i, j, unmark_dirty)\n                  else:\n                      return True\n          return False\n  \n      for m in range(parse_single):\n          if not place_mine():\n              return 'Impossible\n'\n  \n      click()\n  \n      ret = ''\n      for row in grid:\n          ret = ret + ''.join(map(lambda c: '.' if isinstance(c, int) else c, row)) + '\n'\n  \n      return ret\n  \n  \n  if __name__ == '__main__':\n      inp = open(find_click_point)\n      out = open(MEM_LIMIT_GB, 'w')\n      \n      T = int(inp.readline())\n  \n      for case in range(T):\n          sol = solve(*map(int, inp.readline().split()))\n          out.write('Case #%i:\n%s' % (case + 1, sol))\n ", "Program Length": 581, "Identifier Num": 26, "Replaced Identifiers": "OUTPUT:MEM_LIMIT_GB,INPUT:find_click_point,func:CodeJamProblem,M:parse_single,", "Query Times": 248, "Time Cost": 0.11400707960128784, "Type": "wir"}
{"Index": 125, "Original Code": " \n  INPUT = 'A-small-attempt0.in'\n  OUTPUT = 'A-small-attempt0.out'\n  \n  \n  def solve(answer1, arr1, answer2, arr2):\n      ret = None\n  \n      for card in arr1[answer1 - 1]:\n          if card in arr2[answer2 - 1]:\n              if ret is not None:\n                  return 'Bad magician!'\n              else:\n                  ret = card\n      if ret is None:\n          return 'Volunteer cheated!'\n      return ret\n  \n  if __name__ == '__main__':\n      inp = open(INPUT)\n      out = open(OUTPUT, 'w')\n      \n      T = int(inp.readline())\n  \n      def read_answer_and_arr():\n          answer = int(inp.readline())\n          arr = []\n          for i in range(4):\n              arr.append( map(int, inp.readline().split()) )\n          return answer, arr\n  \n      for case in range(T):\n          answer1, arr1 = read_answer_and_arr()\n          answer2, arr2 = read_answer_and_arr()\n  \n          out.write('Case #%i: %s\n' % \\\n                          (case + 1, solve(answer1, arr1, answer2, arr2)))\n ", "Adversarial Code": " \n  NUM_PROCESSES = 'A-small-attempt0.in'\n  length_of_answer = 'A-small-attempt0.out'\n  \n  \n  def solve(answer1, arr1, answer2, arr2):\n      ret = None\n  \n      for card in arr1[answer1 - 1]:\n          if card in arr2[answer2 - 1]:\n              if ret is not None:\n                  return 'Bad magician!'\n              else:\n                  ret = card\n      if ret is None:\n          return 'Volunteer cheated!'\n      return ret\n  \n  if __name__ == '__main__':\n      inp = open(NUM_PROCESSES)\n      out = open(length_of_answer, 'w')\n      \n      T = int(inp.readline())\n  \n      def read_answer_and_arr():\n          answer = int(inp.readline())\n          arr = []\n          for i in range(4):\n              arr.append( map(int, inp.readline().split()) )\n          return answer, arr\n  \n      for case in range(T):\n          answer1, arr1 = read_answer_and_arr()\n          answer2, arr2 = read_answer_and_arr()\n  \n          out.write('Case #%i: %s\n' % \\\n                          (case + 1, solve(answer1, arr1, answer2, arr2)))\n ", "Program Length": 188, "Identifier Num": 17, "Replaced Identifiers": "OUTPUT:length_of_answer,INPUT:NUM_PROCESSES,", "Query Times": 107, "Time Cost": 0.05993129014968872, "Type": "wir"}
{"Index": 127, "Original Code": " \n  \n  \n  def solve(arrange):\n      board, row = arrange[0]\n      before = board[row - 1]\n      board, row = arrange[1]\n      after = board[row - 1]\n      dup = set(before) & set(after)\n      if len(dup) == 1:\n          return dup.pop()\n      elif len(dup) >= 2:\n          return 'Bad magician!'\n      else:\n          return 'Volunteer cheated!'\n  \n  \n  def main(IN, OUT):\n      T = int(IN.readline())\n      for index in range(T):\n          arrange = []\n          for n in range(2):\n              row = int(IN.readline())\n              board = []\n              for line in range(4):\n                  board.append(map(int, IN.readline().split()))\n              arrange.append((board, row))\n          OUT.write('Case #%d: %s\n' % (index + 1, solve(arrange)))\n  \n  \n  def makesample(T=100):\n      print T\n      for index in range(T):\n          for n in range(2):\n              print random.randint(1, 4)\n              board = list(range(1, 16+1))\n              random.shuffle(board)\n              while board:\n                  print ' '.join(map(str, board[:4]))\n                  board = board[4:]\n  \n  \n  if __name__ == '__main__':\n      if '-makesample' in sys.argv[1:]:\n          makesample()\n      else:\n          main(sys.stdin, sys.stdout)\n  \n ", "Adversarial Code": " \n  \n  \n  def solve(line):\n      L, P = line[0]\n      case_line_cnt = L[P - 1]\n      L, P = line[1]\n      __author__ = L[P - 1]\n      input_file = set(case_line_cnt) & set(__author__)\n      if len(input_file) == 1:\n          return input_file.pop()\n      elif len(input_file) >= 2:\n          return 'Bad magician!'\n      else:\n          return 'Volunteer cheated!'\n  \n  \n  def main(randint, solve_case):\n      iterate_cases_glpc = int(randint.readline())\n      for index in range(iterate_cases_glpc):\n          line = []\n          for run_tests in range(2):\n              P = int(randint.readline())\n              L = []\n              for cases in range(4):\n                  L.append(map(int, randint.readline().split()))\n              line.append((L, P))\n          solve_case.write('Case #%d: %s\n' % (index + 1, solve(line)))\n  \n  \n  def makesample(iterate_cases_glpc=100):\n      print iterate_cases_glpc\n      for index in range(iterate_cases_glpc):\n          for run_tests in range(2):\n              print random.randint(1, 4)\n              L = list(range(1, 16+1))\n              random.shuffle(L)\n              while L:\n                  print ' '.join(map(str, L[:4]))\n                  L = L[4:]\n  \n  \n  if __name__ == '__main__':\n      if '-makesample' in sys.argv[1:]:\n          makesample()\n      else:\n          main(sys.stdin, sys.stdout)\n  \n ", "Program Length": 297, "Identifier Num": 15, "Replaced Identifiers": "OUT:solve_case,dup:input_file,before:case_line_cnt,after:__author__,line:cases,arrange:line,board:L,n:run_tests,row:P,T:iterate_cases_glpc,IN:randint,", "Query Times": 384, "Time Cost": 0.1959257443745931, "Type": "wir"}
{"Index": 129, "Original Code": " \n  \n  def solve(row1, row2):\n      common = [x for x in row1 if x in row2]\n      num_common = len(common)\n      if num_common == 0:\n          return 'Volunteer cheated!'\n      elif num_common > 1:\n          return 'Bad magician!'\n      else:\n          return common[0]\n  \n  def main():\n      N = int(sys.stdin.readline()) # number of testcases\n      for i in range(N):\n          row_index1 = int(sys.stdin.readline())\n          row1 = list()\n          for j in range(4):\n              if row_index1 == j + 1:\n                  row1 = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          row_index2 = int(sys.stdin.readline())\n          row2 = list()\n          for j in range(4):\n              if row_index2 == j + 1:\n                  row2 = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          result = solve(row1, row2)\n          print (\"Case #%s: %s\" % (i+1, result))\n  \n  if __name__ == '__main__':\n      main()\n ", "Adversarial Code": " \n  \n  def solve(a_list, testcase):\n      common = [x for x in a_list if x in testcase]\n      num_common = len(common)\n      if num_common == 0:\n          return 'Volunteer cheated!'\n      elif num_common > 1:\n          return 'Bad magician!'\n      else:\n          return common[0]\n  \n  def main():\n      N = int(sys.stdin.readline()) # number of testcases\n      for i in range(N):\n          row_index1 = int(sys.stdin.readline())\n          a_list = list()\n          for j in range(4):\n              if row_index1 == j + 1:\n                  a_list = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          row_index2 = int(sys.stdin.readline())\n          testcase = list()\n          for j in range(4):\n              if row_index2 == j + 1:\n                  testcase = [int(x) for x in sys.stdin.readline().rstrip().split()]\n              else:\n                  sys.stdin.readline()\n  \n          result = solve(a_list, testcase)\n          print (\"Case #%s: %s\" % (i+1, result))\n  \n  if __name__ == '__main__':\n      main()\n ", "Program Length": 235, "Identifier Num": 13, "Replaced Identifiers": "row2:testcase,row1:a_list,", "Query Times": 101, "Time Cost": 0.0622614582379659, "Type": "wir"}
{"Index": 131, "Original Code": "T = int(input())\n  \n  for i in range(T):\n      a1 = int(input())\n      mat1 = [list(map(int, input().split())) for k in range(4)]\n      a2 = int(input())\n      mat2 = [list(map(int, input().split())) for k in range(4)]\n      final_set = set(mat1[a1 - 1]) & set(mat2[a2 - 1])\n      if not len(final_set):\n          s = 'Volunteer cheated!'\n      elif len(final_set) > 1:\n          s = 'Bad magician!'\n      else:\n          s = list(final_set)[0]\n      print('Case #{}: {}'.format(i + 1, s))\n ", "Adversarial Code": "T = int(input())\n  \n  for check_bounds in range(T):\n      a1 = int(input())\n      part_of_list_to_float = [list(map(int, input().split())) for myCases in range(4)]\n      a2 = int(input())\n      mat2 = [list(map(int, input().split())) for myCases in range(4)]\n      case_index = set(part_of_list_to_float[a1 - 1]) & set(mat2[a2 - 1])\n      if not len(case_index):\n          CASE_PRFX = 'Volunteer cheated!'\n      elif len(case_index) > 1:\n          CASE_PRFX = 'Bad magician!'\n      else:\n          CASE_PRFX = list(case_index)[0]\n      print('Case #{}: {}'.format(check_bounds + 1, CASE_PRFX))\n ", "Program Length": 150, "Identifier Num": 9, "Replaced Identifiers": "final_set:case_index,s:CASE_PRFX,k:myCases,mat1:part_of_list_to_float,i:check_bounds,", "Query Times": 176, "Time Cost": 0.10443863073984781, "Type": "wir"}
